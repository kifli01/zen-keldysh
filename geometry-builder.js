/**
 * Geometry Builder
 * THREE.js geometri√°k √©s mesh-ek l√©trehoz√°sa elem defin√≠ci√≥k alapj√°n
 * v1.6.0 - Shade t√°mogat√°s hozz√°adva
 */

class GeometryBuilder {
  constructor() {
    this.materialCache = new Map();
    this.csgManager = null; // CSG Manager referencia
  }

  // CSG Manager be√°ll√≠t√°sa
  setCSGManager(csgManager) {
    this.csgManager = csgManager;
    console.log("CSG Manager be√°ll√≠tva a GeometryBuilder-ben");
  }

  // FRISS√çTETT: THREE.js material l√©trehoz√°sa anyag defin√≠ci√≥ √©s shade alapj√°n
  createMaterial(materialDef, shade = 5) {
    // Cache kulcs shade-del kib≈ëv√≠tve
    const cacheKey = `${JSON.stringify(materialDef)}_shade_${shade}`;

    if (this.materialCache.has(cacheKey)) {
      return this.materialCache.get(cacheKey);
    }

    let material;

    // Ha galvaniz√°lt ac√©l √©s van TextureManager, akkor shade-alap√∫ material
    if (materialDef === MATERIALS.GALVANIZED_STEEL && window.textureManager) {
      try {
        const textureManager = window.textureManager();
        material = textureManager.getGalvanizedMaterial(shade);
        console.log(`üîß Galvaniz√°lt material l√©trehozva shade ${shade}-del`);
      } catch (error) {
        console.warn("TextureManager nem el√©rhet≈ë, fallback material:", error);
        material = new THREE.MeshPhongMaterial({
          color: materialDef.color,
          shininess: materialDef.shininess,
        });
      }
    } else {
      // Hagyom√°nyos material (m√°s anyagok eset√©n a shade k√©s≈ëbb lesz implement√°lva)
      material = new THREE.MeshPhongMaterial({
        color: materialDef.color,
        shininess: materialDef.shininess,
      });
    }

    this.materialCache.set(cacheKey, material);
    return material;
  }

  // THREE.js geometria l√©trehoz√°sa elem alapj√°n
  createGeometry(element) {
    const geom = element.geometry;

    // CSG m≈±veletek ellen≈ërz√©se
    if (this.csgManager && (geom.holes || geom.csgOperations)) {
      return this.createCSGGeometry(element);
    }

    // Hagyom√°nyos geometria l√©trehoz√°s
    return this.createStandardGeometry(element);
  }

  // CSG geometria l√©trehoz√°sa
  createCSGGeometry(element) {
    const geom = element.geometry;

    // Alap geometria l√©trehoz√°sa
    const baseGeometry = this.createStandardGeometry(element);

    let csgOperations = [];

    // Lyukak konvert√°l√°sa CSG m≈±veletekre (kompatibilit√°s)
    if (geom.holes) {
      const holeOperations = this.csgManager.convertHolesToCSGOperations(
        geom.holes
      );
      csgOperations = csgOperations.concat(holeOperations);
    }

    // Direkt CSG m≈±veletek hozz√°ad√°sa
    if (geom.csgOperations) {
      csgOperations = csgOperations.concat(geom.csgOperations);
    }

    // CSG m≈±veletek v√©grehajt√°sa
    if (csgOperations.length > 0) {
      // Poz√≠ci√≥ alap√∫ CSG m≈±veletek alkalmaz√°sa
      const positionedOperations = csgOperations.map((operation) => {
        const positioned = { ...operation };

        // Ha van poz√≠ci√≥ megadva, alkalmazzuk
        if (operation.position) {
          positioned.params = {
            ...positioned.params,
            position: operation.position,
          };
        }

        return positioned;
      });

      return this.csgManager.createCSGGeometry(
        baseGeometry,
        positionedOperations
      );
    }

    return baseGeometry;
  }

  // Hagyom√°nyos geometria l√©trehoz√°sa
  createStandardGeometry(element) {
    const geom = element.geometry;
    const dim = geom.dimensions;

    switch (geom.type) {
      case GEOMETRY_TYPES.BOX:
        return new THREE.BoxGeometry(dim.length, dim.height, dim.width);

      case GEOMETRY_TYPES.CYLINDER:
        const radius = dim.radius || dim.diameter / 2;
        const segments = dim.segments || 16; // segments param√©ter t√°mogat√°sa
        
        // K√∫p alak√∫ geometria t√°mogat√°sa (topRadius/bottomRadius)
        if (dim.topRadius !== undefined && dim.bottomRadius !== undefined) {
          // K√∫p: k√ºl√∂nb√∂z≈ë fels≈ë √©s als√≥ sug√°r
          return new THREE.CylinderGeometry(dim.topRadius, dim.bottomRadius, dim.height, segments);
        } else {
          // Hagyom√°nyos henger: azonos sug√°r fel√ºl √©s alul
          return new THREE.CylinderGeometry(radius, radius, dim.height, segments);
        }

      case GEOMETRY_TYPES.SPHERE:
        const sphereRadius = dim.radius || dim.diameter / 2;
        return new THREE.SphereGeometry(sphereRadius, 16, 12); // 16 szegmens, 12 gy≈±r≈±

      case GEOMETRY_TYPES.EXTRUDE:
        return this.createExtrudeGeometry(element);

      case GEOMETRY_TYPES.GROUP:
        return this.createGroupGeometry(element);

      default:
        console.warn(`Ismeretlen geometria t√≠pus: ${geom.type}`);
        return new THREE.BoxGeometry(dim.length, dim.height, dim.width);
    }
  }

  // FRISS√çTETT: GROUP geometria l√©trehoz√°sa - shade tov√°bb√≠t√°ssal
  createGroupGeometry(element) {
    const group = new THREE.Group();
    
    if (element.geometry.elements) {
      element.geometry.elements.forEach((childElement) => {
        // Gyerek elem teljes defin√≠ci√≥ l√©trehoz√°sa
        const fullChildElement = {
          geometry: childElement.geometry,
          material: element.material, // Sz√ºl≈ë anyaga
          shade: element.shade || 5, // √öJ: Sz√ºl≈ë shade-je
        };
        
        const childGeometry = this.createGeometry(fullChildElement);
        const childMaterial = this.createMaterial(element.material, element.shade || 5); // √öJ: Shade tov√°bb√≠t√°sa
        const childMesh = new THREE.Mesh(childGeometry, childMaterial);
        
        // CSG metadata be√°ll√≠t√°sa a gyerek mesh-hez is
        childMesh.userData = {
          elementId: `${element.id}_child_${element.geometry.elements.indexOf(childElement)}`,
          elementName: childElement.name || `Gyerek elem`,
          elementType: element.type,
          parentId: element.id,
          isChildElement: true,
          shade: element.shade || 5, // √öJ: Shade metadata
          hasCSGOperations: !!(childElement.geometry.holes || childElement.geometry.csgOperations),
          csgOperationCount: (childElement.geometry.holes?.length || 0) + (childElement.geometry.csgOperations?.length || 0),
        };
        
        if (childElement.transform) {
          childMesh.position.set(
            childElement.transform.position.x,
            childElement.transform.position.y, 
            childElement.transform.position.z
          );
          
          if (childElement.transform.rotation) {
            childMesh.rotation.set(
              childElement.transform.rotation.x,
              childElement.transform.rotation.y,
              childElement.transform.rotation.z
            );
          }
        }
        
        group.add(childMesh);
      });
    }
    
    return group;
  }

  // Extrude geometria l√©trehoz√°sa - CSG n√©lk√ºli fallback
  createExtrudeGeometry(element) {
    const dim = element.geometry.dimensions;
    const holes = element.geometry.holes || [];

    // Ha van CSG Manager √©s lyukak, pr√≥b√°ljuk CSG-vel
    if (this.csgManager && holes.length > 0) {
      // Alap box geometria
      const baseGeometry = new THREE.BoxGeometry(
        dim.length,
        dim.height,
        dim.width
      );

      // Lyukak konvert√°l√°sa CSG m≈±veletekre
      const csgOperations = this.csgManager.convertHolesToCSGOperations(holes);

      if (csgOperations.length > 0) {
        try {
          return this.csgManager.createCSGGeometry(baseGeometry, csgOperations);
        } catch (error) {
          console.warn(
            "CSG extrude hiba, fallback THREE.ExtrudeGeometry-ra:",
            error
          );
        }
      }
    }

    // Fallback: hagyom√°nyos THREE.ExtrudeGeometry
    return this.createLegacyExtrudeGeometry(element);
  }

  // Legacy ExtrudeGeometry (eredeti implement√°ci√≥)
  createLegacyExtrudeGeometry(element) {
    const dim = element.geometry.dimensions;
    const holes = element.geometry.holes || [];

    // Alap shape l√©trehoz√°sa
    const shape = new THREE.Shape();
    shape.moveTo(-dim.length / 2, -dim.width / 2);
    shape.lineTo(dim.length / 2, -dim.width / 2);
    shape.lineTo(dim.length / 2, dim.width / 2);
    shape.lineTo(-dim.length / 2, dim.width / 2);
    shape.lineTo(-dim.length / 2, -dim.width / 2);

    // Lyukak hozz√°ad√°sa
    holes.forEach((hole) => {
      if (hole.type === "circle") {
        const holePath = new THREE.Path();
        holePath.absarc(
          hole.position.x,
          hole.position.z, // Z koordin√°ta lesz a Y a shape-ben
          hole.radius,
          0,
          Math.PI * 2,
          true // √≥ramutat√≥ j√°r√°sa ellen
        );
        shape.holes.push(holePath);
      }
    });

    // Extrude be√°ll√≠t√°sok
    const extrudeSettings = {
      steps: 1,
      depth: dim.height,
      bevelEnabled: false,
    };

    const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);

    // Elforgat√°s hogy a megfelel≈ë ir√°nyba n√©zzen
    geometry.rotateX(Math.PI / 2);

    return geometry;
  }

  // FRISS√çTETT: Komplett THREE.js mesh l√©trehoz√°sa - shade t√°mogat√°ssal
  createMesh(element) {
    const geometry = this.createGeometry(element);
    const shade = element.shade || 5; // Shade kinyer√©se az elemb≈ël
    
    // GROUP eset√©n a geometry m√°r egy THREE.Group
    if (element.geometry.type === GEOMETRY_TYPES.GROUP) {
      const group = geometry;
      
      // Transform alkalmaz√°sa a GROUP-ra
      const transform = element.transform;
      group.position.set(
        transform.position.x,
        transform.position.y,
        transform.position.z
      );

      if (transform.rotation) {
        group.rotation.set(
          transform.rotation.x,
          transform.rotation.y,
          transform.rotation.z
        );
      }

      if (transform.scale) {
        group.scale.set(transform.scale.x, transform.scale.y, transform.scale.z);
      }

      // Display be√°ll√≠t√°sok alkalmaz√°sa a GROUP-ra
      const display = element.display;
      group.visible = display.visible;

      // GROUP metadata - √öJ: shade hozz√°adva
      group.userData = {
        elementId: element.id,
        elementName: element.name,
        elementType: element.type,
        isGroup: true,
        childCount: group.children.length,
        shade: shade, // √öJ: Shade metadata
      };

      return group;
    }

    // Hagyom√°nyos mesh l√©trehoz√°s - √öJ: shade alap√∫ material
    const material = this.createMaterial(element.material, shade);
    const mesh = new THREE.Mesh(geometry, material);

    // Transform alkalmaz√°sa
    const transform = element.transform;
    mesh.position.set(
      transform.position.x,
      transform.position.y,
      transform.position.z
    );

    if (transform.rotation) {
      mesh.rotation.set(
        transform.rotation.x,
        transform.rotation.y,
        transform.rotation.z
      );
    }

    if (transform.scale) {
      mesh.scale.set(transform.scale.x, transform.scale.y, transform.scale.z);
    }

    // Display be√°ll√≠t√°sok alkalmaz√°sa
    const display = element.display;
    mesh.visible = display.visible;
    mesh.material.transparent = display.opacity < 1;
    mesh.material.opacity = display.opacity;
    mesh.material.wireframe = display.wireframe;
    mesh.castShadow = display.castShadow;
    mesh.receiveShadow = display.receiveShadow;

    // Elem ID ment√©se a mesh-hez - √öJ: shade hozz√°adva
    mesh.userData = {
      elementId: element.id,
      elementName: element.name,
      elementType: element.type,
      shade: shade, // √öJ: Shade metadata
      hasCSGOperations: !!(
        element.geometry.holes || element.geometry.csgOperations
      ),
      csgOperationCount:
        (element.geometry.holes?.length || 0) +
        (element.geometry.csgOperations?.length || 0),
    };

    return mesh;
  }

  // √ñsszes elem mesh-einek l√©trehoz√°sa
  createAllMeshes(elements) {
    const meshes = new Map();

    elements.forEach((element) => {
      try {
        const mesh = this.createMesh(element);
        meshes.set(element.id, mesh);

        // CSG m≈±veletek napl√≥z√°sa
        if (mesh.userData.hasCSGOperations && CSG_DEBUG.logOperations) {
          console.log(
            `CSG mesh l√©trehozva: ${element.id} (${mesh.userData.csgOperationCount} m≈±velet, shade: ${mesh.userData.shade})`
          );
        }

        // √öJ: Shade napl√≥z√°sa debug m√≥dban
        if (element.shade && element.shade !== 5) {
          console.log(`üé® Egyedi shade mesh: ${element.id} - shade: ${element.shade}`);
        }
      } catch (error) {
        console.error(`Mesh l√©trehoz√°s hiba (${element.id}):`, error);

        // Fallback: egyszer≈± box mesh
        const fallbackGeometry = new THREE.BoxGeometry(10, 10, 10);
        const fallbackMaterial = new THREE.MeshBasicMaterial({
          color: 0xff0000,
          wireframe: true,
        });
        const fallbackMesh = new THREE.Mesh(fallbackGeometry, fallbackMaterial);

        fallbackMesh.userData = {
          elementId: element.id,
          elementName: element.name + " (HIBA)",
          elementType: element.type,
          shade: element.shade || 5,
          hasError: true,
        };

        meshes.set(element.id, fallbackMesh);
        console.warn(`Fallback mesh haszn√°lata: ${element.id}`);
      }
    });

    return meshes;
  }

  // FRISS√çTETT: Material cache √ºr√≠t√©se - shade figyelembev√©tel√©vel
  clearCache() {
    console.log(`üßπ Material cache tiszt√≠t√°sa: ${this.materialCache.size} elem`);
    this.materialCache.clear();

    // CSG cache is t√∂rl√©se
    if (this.csgManager) {
      this.csgManager.clearCache();
    }
  }

  // Lyuk mesh l√©trehoz√°sa (vizu√°lis c√©lokra) - LEGACY
  createHoleMesh(element) {
    const holes = element.geometry.holes || [];
    const holeMeshes = [];

    holes.forEach((hole, index) => {
      if (hole.type === "circle") {
        // S√∂t√©t cylinder a lyuk jel√∂l√©s√©re
        const holeGeometry = new THREE.CylinderGeometry(
          hole.radius,
          hole.radius,
          element.geometry.dimensions.height + 0.1, // Kicsit vastagabb
          16
        );

        const holeMaterial = new THREE.MeshPhongMaterial({
          color: 0x333333,
          shininess: 0,
        });

        const holeMesh = new THREE.Mesh(holeGeometry, holeMaterial);

        // Poz√≠ci√≥ be√°ll√≠t√°sa
        holeMesh.position.set(
          element.transform.position.x + hole.position.x,
          element.transform.position.y,
          element.transform.position.z + hole.position.z
        );

        holeMesh.userData = {
          elementId: `${element.id}_hole_${index}`,
          elementName: `${element.name} - Lyuk`,
          elementType: "hole",
          parentElement: element.id,
          shade: element.shade || 5, // √öJ: Shade a lyukn√°l is
        };

        holeMeshes.push(holeMesh);
      }
    });

    return holeMeshes;
  }

  // CSG st√°tusz lek√©rdez√©se
  getCSGStatus() {
    return {
      csgManagerAvailable: !!this.csgManager,
      csgLibraryAvailable: this.csgManager?.isCSGAvailable || false,
      cacheSize: this.csgManager?.getCacheSize() || 0,
    };
  }

  // √öJ: Shade statisztik√°k a material cache-b≈ël
  getShadeStats() {
    const shadeUsage = {};
    let totalCachedMaterials = 0;

    this.materialCache.forEach((material, key) => {
      if (key.includes('shade_')) {
        const shadeMatch = key.match(/shade_(\d+)/);
        if (shadeMatch) {
          const shade = parseInt(shadeMatch[1]);
          shadeUsage[shade] = (shadeUsage[shade] || 0) + 1;
          totalCachedMaterials++;
        }
      }
    });

    return {
      totalCachedMaterials,
      shadeUsage,
      uniqueShades: Object.keys(shadeUsage).length,
    };
  }

  // Debug info ki√≠r√°sa - √öJ: shade info-val
  logElementInfo(element, mesh) {
    console.log(`Element: ${element.name} (${element.id})`);
    console.log(`- Type: ${element.type}`);
    console.log(`- Material: ${element.material.name}`);
    console.log(`- Shade: ${element.shade || 5}`); // √öJ: Shade info
    console.log(`- Geometry: ${element.geometry.type}`);
    console.log(`- Dimensions:`, element.geometry.dimensions);
    console.log(`- Position:`, mesh.position);
    console.log(`- Calculated:`, element.calculated);

    // CSG info
    if (mesh.userData.hasCSGOperations) {
      console.log(`- CSG Operations: ${mesh.userData.csgOperationCount}`);
    }

    console.log("---");
  }

  // Cleanup
  destroy() {
    this.clearCache();

    if (this.csgManager) {
      this.csgManager.destroy();
    }

    console.log("GeometryBuilder v1.6.0 destroyed");
  }
}

// Glob√°lis hozz√°f√©rhet≈ës√©g
window.GeometryBuilder = GeometryBuilder;