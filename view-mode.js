/**
 * View Mode Manager
 * V√°lt√°s sz√≠nes n√©zet √©s tervrajz st√≠lus k√∂z√∂tt
 * v1.6.0 - Toon shader √©s pap√≠rszer≈± megjelen√©s
 */

class ViewModeManager {
  constructor(sceneManager, geometryBuilder) {
    this.sceneManager = sceneManager;
    this.geometryBuilder = geometryBuilder;
    this.currentMode = "blueprint"; // 'realistic' vagy 'blueprint'

    // Eredeti anyagok ment√©se
    this.originalMaterials = new Map();

    // √öJ: K√©pess√©gek ellen≈ërz√©se
    this.capabilities = {
      postProcessing: false,
      customShaders: false,
    };

    // Text√∫r√°k l√©trehoz√°sa
    this.textures = this.createTextures();

    // √öJ: Toon shader anyagok (ha t√°mogatott)
    this.toonMaterials = null;

    // Blueprint anyagok - TISZTA FEH√âR fallback anyagok
    this.blueprintMaterials = {
      plate: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      frame: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      covering: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      wall: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      leg: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      ball: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
    };

    // Realistic anyagok - val√≥szer≈± text√∫r√°kkal
    this.realisticMaterials = {
      plate: new THREE.MeshPhongMaterial({
        color: 0xa47b51,
        map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      frame: new THREE.MeshPhongMaterial({
        color: 0xbf9f7e,
        map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      covering: new THREE.MeshPhongMaterial({
        color: 0x96b965,
        map: this.textures.grass,
        shininess: 2,
        transparent: false,
      }),
      wall: new THREE.MeshPhongMaterial({
        color: 0xbf9f7e,
        map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      leg: new THREE.MeshPhongMaterial({
        color: 0xbf9f7e,
        map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      ball: new THREE.MeshPhongMaterial({
        color: 0xffffff,
        shininess: 30,
        transparent: false,
      }),
    };

    // Wireframe anyagok (k√∂rvonalakhoz) - fallback
    this.wireframeMaterials = new Map();
  }

  // √öJ: Post-processing el√©rhet≈ës√©g be√°ll√≠t√°sa
  setPostProcessingAvailable(available) {
    this.capabilities.postProcessing = available;
    console.log(`Post-processing t√°mogat√°s: ${available ? "‚úÖ" : "‚ùå"}`);
  }

  // √öJ: Custom shader el√©rhet≈ës√©g be√°ll√≠t√°sa
  setShadersAvailable(available) {
    this.capabilities.customShaders = available;

    if (available) {
      // Toon shader anyagok l√©trehoz√°sa
      this.createToonShaderMaterials();
      console.log(`Custom shader t√°mogat√°s: ‚úÖ`);
    } else {
      console.log(`Custom shader t√°mogat√°s: ‚ùå (fallback anyagok haszn√°lata)`);
    }
  }

  // √öJ: Toon shader anyagok l√©trehoz√°sa + ERROR HANDLING
  createToonShaderMaterials() {
    try {
      // Shader k√≥dok lek√©r√©se a HTML-b≈ël
      const vertexShader =
        document.getElementById("toonVertexShader")?.textContent;
      const fragmentShader =
        document.getElementById("toonFragmentShader")?.textContent;

      if (!vertexShader || !fragmentShader) {
        console.warn(
          "‚ùå Toon shader k√≥dok nem tal√°lhat√≥ak, fallback haszn√°lata"
        );
        return false;
      }

      console.log(
        "‚úÖ Shader k√≥dok megtal√°lva, pr√≥b√°lkoz√°s shader anyagokkal..."
      );

      // Teszt shader l√©trehoz√°sa el≈ësz√∂r
      const testMaterial = new THREE.ShaderMaterial({
        uniforms: {
          color: { value: new THREE.Color(0xffffff) },
          lightDirection: { value: new THREE.Vector3(1, 1, 1).normalize() },
          paperStrength: { value: 0.0 }, // Nincs text√∫ra teszt c√©lj√°b√≥l
        },
        vertexShader: vertexShader,
        fragmentShader: fragmentShader,
        side: THREE.DoubleSide,
      });

      // Shader compile teszt
      console.log("üß™ Shader compile teszt...");

      // K√∂z√∂s shader uniforms
      const commonUniforms = {
        lightDirection: { value: new THREE.Vector3(1, 1, 1).normalize() },
        paperStrength: { value: 0.0 }, // KIKAPCSOLVA TESZTEL√âSHEZ
        paperTexture: { value: this.textures.paper },
      };

      // Toon anyagok l√©trehoz√°sa minden t√≠pushoz - TISZTA FEH√âR
      this.toonMaterials = {
        plate: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        frame: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        covering: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
            paperTexture: { value: this.textures.fabric },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        wall: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        leg: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        ball: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),
      };

      console.log(
        "‚úÖ Toon shader anyagok l√©trehozva - TISZTA FEH√âR be√°ll√≠t√°ssal"
      );
      return true;
    } catch (error) {
      console.error("‚ùå Toon shader anyagok l√©trehoz√°si hiba:", error);
      console.log("üì¥ Fallback anyagokra v√°lt√°s...");
      return false;
    }
  }

  // √öJ: Outline shader anyag l√©trehoz√°sa
  createOutlineShaderMaterial() {
    try {
      const vertexShader = document.getElementById(
        "outlineVertexShader"
      )?.textContent;
      const fragmentShader = document.getElementById(
        "outlineFragmentShader"
      )?.textContent;

      if (!vertexShader || !fragmentShader) {
        return null;
      }

      return new THREE.ShaderMaterial({
        uniforms: {
          outlineColor: { value: new THREE.Color(0x333333) },
          outlineThickness: { value: 2.0 },
        },
        vertexShader: vertexShader,
        fragmentShader: fragmentShader,
        side: THREE.BackSide,
        transparent: true,
      });
    } catch (error) {
      console.error("Outline shader hiba:", error);
      return null;
    }
  }

  // Text√∫r√°k l√©trehoz√°sa (m√≥dos√≠tott - finomabb pap√≠r hat√°s)
  createTextures() {
    const textures = {};

    // Pap√≠r text√∫ra - finomabb, kev√©sb√© l√°that√≥
    textures.paper = this.createPaperTexture();

    // Fa text√∫ra
    textures.wood = this.createWoodTexture();

    // M≈±f≈± text√∫ra
    textures.grass = this.createGrassTexture();

    // Sz√∂vet text√∫ra - finomabb
    textures.fabric = this.createFabricTexture();

    return textures;
  }

  // M√ìDOS√çTOTT: Sokkal finomabb pap√≠r text√∫ra - szinte l√°thatatlan
  createPaperTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    // Alap feh√©r h√°tt√©r
    context.fillStyle = "#ffffff";
    context.fillRect(0, 0, 512, 512);

    // MINIM√ÅLIS zaj - szinte l√°thatatlan
    const imageData = context.getImageData(0, 0, 512, 512);
    const data = imageData.data;

    for (let i = 0; i < data.length; i += 4) {
      const noise = (Math.random() - 0.5) * 1; // Nagyon kicsi zaj: 1 helyett 4
      data[i] = Math.max(0, Math.min(255, 255 + noise)); // R
      data[i + 1] = Math.max(0, Math.min(255, 255 + noise)); // G
      data[i + 2] = Math.max(0, Math.min(255, 255 + noise)); // B
      data[i + 3] = 255; // A
    }

    context.putImageData(imageData, 0, 0);

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(16, 16); // Nagyobb ism√©tl√©s = finomabb minta
    return texture;
  }

  // T√∂bbi text√∫ra funkci√≥ v√°ltozatlan...
  createWoodTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    context.fillStyle = "#8B4513";
    context.fillRect(0, 0, 512, 512);

    for (let i = 0; i < 20; i++) {
      context.strokeStyle = `rgba(139, 69, 19, ${0.1 + Math.random() * 0.3})`;
      context.lineWidth = 2 + Math.random() * 4;
      context.beginPath();
      context.moveTo(0, Math.random() * 512);
      context.bezierCurveTo(
        128,
        Math.random() * 512,
        384,
        Math.random() * 512,
        512,
        Math.random() * 512
      );
      context.stroke();
    }

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(2, 2);
    return texture;
  }

  createGrassTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    context.fillStyle = "#228B22";
    context.fillRect(0, 0, 512, 512);

    for (let i = 0; i < 1000; i++) {
      const x = Math.random() * 512;
      const y = Math.random() * 512;
      const length = 5 + Math.random() * 15;

      context.strokeStyle = `rgba(34, 139, 34, ${0.3 + Math.random() * 0.7})`;
      context.lineWidth = 1;
      context.beginPath();
      context.moveTo(x, y);
      context.lineTo(x + (Math.random() - 0.5) * 4, y - length);
      context.stroke();
    }

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(8, 8);
    return texture;
  }

  // M√ìDOS√çTOTT: Finomabb sz√∂vet text√∫ra
  createFabricTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    context.fillStyle = "#f8f8f8";
    context.fillRect(0, 0, 512, 512);

    // Finomabb keresztminta
    context.strokeStyle = "rgba(230, 230, 230, 0.3)";
    context.lineWidth = 0.5;

    for (let y = 0; y < 512; y += 12) {
      context.beginPath();
      context.moveTo(0, y);
      context.lineTo(512, y);
      context.stroke();
    }

    for (let x = 0; x < 512; x += 12) {
      context.beginPath();
      context.moveTo(x, 0);
      context.lineTo(x, 512);
      context.stroke();
    }

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(4, 4);
    return texture;
  }

  // Eredeti anyagok ment√©se
  saveOriginalMaterials(meshes) {
    meshes.forEach((mesh, elementId) => {
      this.originalMaterials.set(elementId, mesh.material.clone());
    });
  }

  // M√ìDOS√çTOTT: V√°lt√°s tervrajz n√©zetbe - DEBUG m√≥dban
  switchToBlueprint(meshes, elements, force = false) {
    if (this.currentMode === "blueprint" && !force) return;

    console.log("üîÑ V√°lt√°s tervrajz n√©zetbe...");

    // Eredeti anyagok ment√©se (ha m√©g nem t√∂rt√©nt meg)
    if (this.originalMaterials.size === 0) {
      this.saveOriginalMaterials(meshes);
    }

    // √Årny√©kok kikapcsol√°sa
    this.sceneManager.renderer.shadowMap.enabled = false;

    // Scene h√°tt√©r feh√©rre
    this.sceneManager.scene.background = new THREE.Color(0xffffff);
    console.log("‚úÖ H√°tt√©r feh√©rre √°ll√≠tva");

    // Anyagok cser√©je - toon shader vagy fallback
    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      // Anyag kiv√°laszt√°sa
      let material;

      if (this.capabilities.customShaders && this.toonMaterials) {
        // ‚úÖ Toon shader anyagok haszn√°lata
        material = this.getBlueprintMaterial(element.type, true);
        console.log(`üé® Shader anyag alkalmazva: ${element.id}`);
      } else {
        // ‚ùå Fallback hagyom√°nyos anyagok
        material = this.getBlueprintMaterial(element.type, false);
        console.log(`üìÑ Fallback anyag alkalmazva: ${element.id}`);
      }

      mesh.material = material;
      mesh.castShadow = false;
      mesh.receiveShadow = false;

      // NINCS k√∂rvonal - tiszta pap√≠r makettszer≈± megjelen√©s
      // Az outline hat√°st a shader adja
    });

    // F√©nyek m√≥dos√≠t√°sa (egyenletes megvil√°g√≠t√°s)
    this.setBlueprintLighting();

    this.currentMode = "blueprint";
    console.log(
      `‚úÖ Tervrajz n√©zet akt√≠v (shader: ${
        this.capabilities.customShaders ? "‚úÖ" : "‚ùå"
      })`
    );
    console.log(`üìä Toon materials ready: ${!!this.toonMaterials}`);
  }

  // √öJ: Blueprint anyag kiv√°laszt√°sa (shader vagy fallback)
  getBlueprintMaterial(elementType, useShader = false) {
    const materialSource = useShader
      ? this.toonMaterials
      : this.blueprintMaterials;

    switch (elementType) {
      case "plate":
        return materialSource.plate;
      case "frame":
        return materialSource.frame;
      case "covering":
        return materialSource.covering;
      case "wall":
        return materialSource.wall;
      case "leg":
        return materialSource.leg;
      case "ball":
        return materialSource.ball;
      default:
        return materialSource.frame;
    }
  }

  // V√°lt√°s sz√≠nes n√©zetbe (v√°ltozatlan)
  switchToRealistic(meshes, elements) {
    if (this.currentMode === "realistic") return;

    // √Årny√©kok bekapcsol√°sa
    this.sceneManager.renderer.shadowMap.enabled = true;

    // Scene h√°tt√©r eredeti sz√≠nre
    this.sceneManager.scene.background = new THREE.Color(0xf9f9f9);

    // Realistic anyagok alkalmaz√°sa
    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      let realisticMaterial;
      switch (element.type) {
        case "plate":
          realisticMaterial = this.realisticMaterials.plate;
          break;
        case "frame":
          realisticMaterial = this.realisticMaterials.frame;
          break;
        case "covering":
          realisticMaterial = this.realisticMaterials.covering;
          break;
        case "wall":
          realisticMaterial = this.realisticMaterials.wall;
          break;
        case "leg":
          realisticMaterial = this.realisticMaterials.leg;
          break;
        case "ball":
          realisticMaterial = this.realisticMaterials.ball;
          break;
        default:
          realisticMaterial = this.realisticMaterials.frame;
      }

      mesh.material = realisticMaterial;
      mesh.castShadow = element.display.castShadow;
      mesh.receiveShadow = element.display.receiveShadow;

      // Edge outline elt√°vol√≠t√°sa
      this.removeEdgeOutline(element.id);
    });

    // F√©nyek vissza√°ll√≠t√°sa
    this.setRealisticLighting();

    this.currentMode = "realistic";
    console.log("Sz√≠nes n√©zet akt√≠v");
  }

  // Toggle - v√°lt√°s a k√©t n√©zet k√∂z√∂tt
  toggle(meshes, elements) {
    if (this.currentMode === "realistic") {
      this.switchToBlueprint(meshes, elements);
    } else {
      this.switchToRealistic(meshes, elements);
    }
  }

  // Edge outline poz√≠ci√≥ friss√≠t√©se (explode-hoz)
  updateEdgePositions(meshes) {
    this.wireframeMaterials.forEach((edgeLines, elementId) => {
      const mesh = meshes.get(elementId);
      if (mesh && edgeLines) {
        edgeLines.position.copy(mesh.position);
        edgeLines.rotation.copy(mesh.rotation);
        edgeLines.scale.copy(mesh.scale);
      }
    });
  }

  // Edge outline hozz√°ad√°sa - ER≈êSEBB KONT√öROK
  addEdgeOutline(mesh, elementId) {
    // CSG eredm√©nyhez is adunk edge-et a jobb l√°that√≥s√°g√©rt
    const isCSGResult = mesh.userData.hasCSGOperations;
    if (isCSGResult) {
      console.log(`CSG mesh k√∂rvonal hozz√°adva: ${elementId}`);
    }

    const edges = new THREE.EdgesGeometry(mesh.geometry, 15); // Cs√∂kkentett threshold = t√∂bb vonal
    const edgeMaterial = new THREE.LineBasicMaterial({
      color: 0x333333, // S√∂t√©tebb sz√ºrke
      linewidth: 2, // Vastagabb vonalak
      transparent: true,
      opacity: 0.8, // Er≈ësebb k√∂rvonal
    });

    const edgeLines = new THREE.LineSegments(edges, edgeMaterial);
    edgeLines.position.copy(mesh.position);
    edgeLines.rotation.copy(mesh.rotation);
    edgeLines.scale.copy(mesh.scale);

    edgeLines.userData = { isEdgeOutline: true, parentId: elementId };

    this.sceneManager.scene.add(edgeLines);
    this.wireframeMaterials.set(elementId, edgeLines);
  }

  // Edge outline elt√°vol√≠t√°sa
  removeEdgeOutline(elementId) {
    const edgeLines = this.wireframeMaterials.get(elementId);
    if (edgeLines) {
      this.sceneManager.scene.remove(edgeLines);

      // Cleanup
      edgeLines.geometry.dispose();
      edgeLines.material.dispose();

      this.wireframeMaterials.delete(elementId);
    }
  }

  // M√ìDOS√çTOTT: Blueprint megvil√°g√≠t√°s - tiszta feh√©r h√°tt√©r
  setBlueprintLighting() {
    // √ñsszes f√©ny elt√°vol√≠t√°sa
    const lightsToRemove = [];
    this.sceneManager.scene.traverse((object) => {
      if (object.isLight) {
        lightsToRemove.push(object);
      }
    });
    lightsToRemove.forEach((light) => this.sceneManager.scene.remove(light));

    // Er≈ës, egyenletes vil√°g√≠t√°s - minden feh√©r legyen
    const ambientLight = new THREE.AmbientLight(0xffffff, 1.5); // Er≈ësebb intenzit√°s
    this.sceneManager.scene.add(ambientLight);

    // Ment√©s a k√©s≈ëbbi vissza√°ll√≠t√°shoz
    this.sceneManager.blueprintLights = [ambientLight];
  }

  // Realistic megvil√°g√≠t√°s vissza√°ll√≠t√°sa (v√°ltozatlan)
  setRealisticLighting() {
    if (this.sceneManager.blueprintLights) {
      this.sceneManager.blueprintLights.forEach((light) => {
        this.sceneManager.scene.remove(light);
      });
      delete this.sceneManager.blueprintLights;
    }

    this.sceneManager.createLights();
  }

  // Aktu√°lis m√≥d lek√©rdez√©se
  getCurrentMode() {
    return this.currentMode;
  }

  // M√≥d n√©v megjelen√≠t√©shez
  getModeDisplayName() {
    return this.currentMode === "realistic" ? "Sz√≠nes" : "Tervrajz";
  }

  // √öJ: K√©pess√©gek lek√©rdez√©se debug-hoz
  getCapabilities() {
    return {
      ...this.capabilities,
      toonMaterialsReady: !!this.toonMaterials,
      shadersLoaded: this.capabilities.customShaders,
    };
  }

  // Cleanup
  destroy() {
    // Wireframe meshek elt√°vol√≠t√°sa
    this.wireframeMaterials.forEach((edgeLines, elementId) => {
      this.removeEdgeOutline(elementId);
    });

    // Blueprint anyagok cleanup
    Object.values(this.blueprintMaterials).forEach((material) => {
      material.dispose();
    });

    // Realistic anyagok cleanup
    Object.values(this.realisticMaterials).forEach((material) => {
      material.dispose();
    });

    // √öJ: Toon anyagok cleanup
    if (this.toonMaterials) {
      Object.values(this.toonMaterials).forEach((material) => {
        material.dispose();
      });
    }

    // Text√∫r√°k cleanup
    Object.values(this.textures).forEach((texture) => {
      texture.dispose();
    });

    this.originalMaterials.clear();
    this.wireframeMaterials.clear();
  }
}
