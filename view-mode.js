/**
 * View Mode Manager
 * V√°lt√°s sz√≠nes n√©zet √©s tervrajz st√≠lus k√∂z√∂tt
 * v2.1.0 - TextureManager injekt√°l√°s, text√∫ra √©s anyag k√≥d kiszervezve
 */

class ViewModeManager {
  constructor(sceneManager, geometryBuilder, textureManager) {
    this.sceneManager = sceneManager;
    this.geometryBuilder = geometryBuilder;
    this.textureManager = textureManager;
    this.currentMode = "blueprint"; // 'realistic' vagy 'blueprint'

    // Eredeti anyagok ment√©se
    this.originalMaterials = new Map();

    // Wireframe layer
    this.wireframeLayer = new Map(); // elementId -> wireframe mesh

    // Exploder referencia t√°rol√°sa
    this.exploder = null;

    // Shader t√°mogat√°s
    this.toonMaterials = null;

    // Text√∫r√°k √©s anyagok bet√∂lt√©se TextureManager-b≈ël
    this.textures = this.textureManager.getAllTextures();
    this.realisticMaterials = this.textureManager.getRealisticMaterials();
    this.wireframeMaterial = this.textureManager.getWireframeMaterial();

    console.log("ViewModeManager v2.1.0 - TextureManager injekt√°lva");
  }

  // Exploder referencia be√°ll√≠t√°sa
  setExploder(exploder) {
    this.exploder = exploder;
    console.log("‚úÖ Exploder referencia be√°ll√≠tva ViewModeManager-ben");
  }

  // Shader t√°mogat√°s be√°ll√≠t√°sa
  setShadersAvailable(available) {
    if (available) {
      this.createToonShaderMaterials();
      console.log(`Custom shader t√°mogat√°s: ‚úÖ`);
    } else {
      console.log(`Custom shader t√°mogat√°s: ‚ùå (fallback anyagok haszn√°lata)`);
    }
  }

  // Toon shader anyagok l√©trehoz√°sa
  createToonShaderMaterials() {
    try {
      // Shader k√≥dok lek√©r√©se DOM-b√≥l
      const vertexShader =
        document.getElementById("toonVertexShader")?.textContent;
      const fragmentShader =
        document.getElementById("toonFragmentShader")?.textContent;

      if (!vertexShader || !fragmentShader) {
        console.warn("‚ùå Toon shader k√≥dok nem tal√°lhat√≥ak");
        return false;
      }

      // K√∂z√∂s shader uniforms
      const commonUniforms = {
        lightDirection: { value: new THREE.Vector3(3, 1, 1).normalize() },
        paperStrength: { value: 0.0 },
        paperTexture: { value: this.textures.paper },
      };

      // Toon anyagok l√©trehoz√°sa - tiszta feh√©r
      this.toonMaterials = {
        default: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),
      };

      console.log("‚úÖ Toon shader anyagok l√©trehozva");
      return true;
    } catch (error) {
      console.error("‚ùå Toon shader anyagok l√©trehoz√°si hiba:", error);
      return false;
    }
  }

  // Eredeti anyagok ment√©se
  saveOriginalMaterials(meshes) {
    meshes.forEach((mesh, elementId) => {
      // GROUP eset√©n nem ment√ºnk material-t (nincs is)
      if (mesh.userData && mesh.userData.isGroup) {
        return;
      }
      
      // Csak ha van material
      if (mesh.material) {
        this.originalMaterials.set(elementId, mesh.material.clone());
      }
    });
  }

  // Wireframe layer l√©trehoz√°sa
  createWireframeLayer(meshes, elements) {
    console.log("üîß Wireframe layer l√©trehoz√°sa...");

    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      // GROUP eset√©n a gyerek elemeknek wireframe
      if (mesh.userData && mesh.userData.isGroup) {
        mesh.children.forEach((childMesh, index) => {
          const wireframeGeometry = this.createWireframeGeometry(childMesh);
          
          if (wireframeGeometry) {
            const wireframeMesh = new THREE.LineSegments(
              wireframeGeometry,
              this.wireframeMaterial
            );

            // Gyerek poz√≠ci√≥ + parent poz√≠ci√≥
            wireframeMesh.position.copy(mesh.position);
            wireframeMesh.position.add(childMesh.position);
            wireframeMesh.rotation.copy(mesh.rotation);
            wireframeMesh.rotation.x += childMesh.rotation.x;
            wireframeMesh.rotation.y += childMesh.rotation.y;
            wireframeMesh.rotation.z += childMesh.rotation.z;
            wireframeMesh.scale.copy(mesh.scale);

            wireframeMesh.userData = {
              isWireframe: true,
              parentId: element.id,
              childIndex: index,
              elementType: element.type,
              isGroupChild: true,
            };

            this.sceneManager.scene.add(wireframeMesh);
            this.wireframeLayer.set(`${element.id}_child_${index}`, wireframeMesh);
          }
          
          // GROUP gyerek elem lyuk k√∂rvonalai
          if (element.geometry.elements && element.geometry.elements[index]) {
            const childElement = element.geometry.elements[index];
            
            // Abszol√∫t poz√≠ci√≥j√∫ mesh l√©trehoz√°sa a lyuk k√∂rvonalakhoz
            const absoluteChildMesh = {
              position: {
                x: mesh.position.x + childMesh.position.x,
                y: mesh.position.y + childMesh.position.y,
                z: mesh.position.z + childMesh.position.z,
              },
              rotation: {
                x: mesh.rotation.x + childMesh.rotation.x,
                y: mesh.rotation.y + childMesh.rotation.y,
                z: mesh.rotation.z + childMesh.rotation.z,
              },
              userData: childMesh.userData
            };
            
            this.addHoleOutlines(childElement, absoluteChildMesh);
          }
        });
        return;
      }

      // Hagyom√°nyos elem wireframe
      const wireframeGeometry = this.createWireframeGeometry(mesh);

      if (wireframeGeometry) {
        const wireframeMesh = new THREE.LineSegments(
          wireframeGeometry,
          this.wireframeMaterial
        );

        wireframeMesh.position.copy(mesh.position);
        wireframeMesh.rotation.copy(mesh.rotation);
        wireframeMesh.scale.copy(mesh.scale);

        wireframeMesh.userData = {
          isWireframe: true,
          parentId: element.id,
          elementType: element.type,
        };

        this.sceneManager.scene.add(wireframeMesh);
        this.wireframeLayer.set(element.id, wireframeMesh);
      }

      this.addHoleOutlines(element, mesh);
    });

    console.log(`üéØ Wireframe layer k√©sz: ${this.wireframeLayer.size} elem`);
  }

  // Wireframe geometria l√©trehoz√°sa
  createWireframeGeometry(mesh) {
    try {
      let geometry;

      if (mesh.userData.hasCSGOperations) {
        geometry = this.createSimplifiedBoundingGeometry(mesh);
      } else {
        geometry = mesh.geometry;
      }

      const edgesGeometry = new THREE.EdgesGeometry(geometry, 15);
      return edgesGeometry;
    } catch (error) {
      console.error(
        `Wireframe geometria hiba (${mesh.userData.elementId}):`,
        error
      );
      return null;
    }
  }

  // Egyszer≈±s√≠tett befoglal√≥ geometria k√©sz√≠t√©se
  createSimplifiedBoundingGeometry(mesh) {
    const userData = mesh.userData;
    const box = new THREE.Box3().setFromObject(mesh);
    const size = box.getSize(new THREE.Vector3());

    switch (userData.elementType) {
      case "plate":
      case "covering":
      case "frame":
      case "wall":
        return new THREE.BoxGeometry(size.x, size.y, size.z);

      case "leg":
        const radius = Math.max(size.x, size.z) / 2;
        return new THREE.CylinderGeometry(radius, radius, size.y, 16);

      case "ball":
        const sphereRadius = Math.max(size.x, size.y, size.z) / 2;
        return new THREE.SphereGeometry(sphereRadius, 16, 12);

      default:
        return new THREE.BoxGeometry(size.x, size.y, size.z);
    }
  }

  // Lyukak k√∂rvonalainak hozz√°ad√°sa - CSAK CSG m≈±veletek
  addHoleOutlines(element, mesh) {
    const csgOperations = element.geometry.csgOperations;
    let holeCount = 0;

    // Csak CSG m≈±veletek alapj√°n lyukak keres√©se
    if (csgOperations && csgOperations.length > 0) {
      csgOperations.forEach((operation, index) => {
        if (operation.type === "subtract") {
          const holeOutlines = this.createHoleOutlineGeometry(operation, mesh);
          if (holeOutlines && holeOutlines.length > 0) {
            holeOutlines.forEach((holeOutline, outlineIndex) => {
              this.addHoleOutlineToScene(
                holeOutline,
                mesh,
                element.id,
                `csg_${index}_${holeOutline.type}`
              );
              holeCount++;
            });
          }
        }
      });
    }

    if (holeCount > 0) {
      console.log(`üîµ ${holeCount} lyuk k√∂rvonal hozz√°adva: ${element.id}`);
    }
  }

  // CSG m≈±velet alapj√°n lyuk k√∂rvonal k√©sz√≠t√©se - JAV√çTOTT rot√°ci√≥ √©s poz√≠ci√≥ kezel√©s v3
  createHoleOutlineGeometry(csgOperation, parentMesh) {
    try {
      const position = csgOperation.position || { x: 0, y: 0, z: 0 };
      const depth = csgOperation.params.height || 10;

      let outlines = [];

      // √öJ: Lyuk tengely meghat√°roz√°sa CSG rot√°ci√≥ alapj√°n
      const holeAxis = this.determineHoleAxis(csgOperation.rotation);
      const depthOffsets = this.calculateDepthOffsets(depth, holeAxis);

      switch (csgOperation.geometry) {
        case "cylinder":
          const radius = csgOperation.params.radius;
          const segments = csgOperation.params.segments || 32;

          // Fels≈ë k√∂rvonal - JAV√çTOTT poz√≠ci√≥val
          const topCircleGeometry = new THREE.CircleGeometry(radius, segments);
          const topEdgesGeometry = new THREE.EdgesGeometry(topCircleGeometry);

          this.applyCSGRotationToGeometry(
            topEdgesGeometry,
            csgOperation.rotation
          );

          outlines.push({
            geometry: topEdgesGeometry,
            position: {
              x: position.x + depthOffsets.top.x,
              y: position.y + depthOffsets.top.y,
              z: position.z + depthOffsets.top.z,
            },
            type: "top",
          });

          // Als√≥ k√∂rvonal - JAV√çTOTT poz√≠ci√≥val
          const bottomCircleGeometry = new THREE.CircleGeometry(
            radius,
            segments
          );
          const bottomEdgesGeometry = new THREE.EdgesGeometry(
            bottomCircleGeometry
          );

          this.applyCSGRotationToGeometry(
            bottomEdgesGeometry,
            csgOperation.rotation
          );

          outlines.push({
            geometry: bottomEdgesGeometry,
            position: {
              x: position.x + depthOffsets.bottom.x,
              y: position.y + depthOffsets.bottom.y,
              z: position.z + depthOffsets.bottom.z,
            },
            type: "bottom",
          });
          break;

        case "box":
          const width = csgOperation.params.width;
          const length =
            csgOperation.params.length || csgOperation.params.height;

          // Fels≈ë t√©glalap - JAV√çTOTT poz√≠ci√≥val
          const topPlaneGeometry = new THREE.PlaneGeometry(width, length);
          const topPlaneEdges = new THREE.EdgesGeometry(topPlaneGeometry);

          this.applyCSGRotationToGeometry(topPlaneEdges, csgOperation.rotation);

          outlines.push({
            geometry: topPlaneEdges,
            position: {
              x: position.x + depthOffsets.top.x,
              y: position.y + depthOffsets.top.y,
              z: position.z + depthOffsets.top.z,
            },
            type: "top",
          });

          // Als√≥ t√©glalap - JAV√çTOTT poz√≠ci√≥val
          const bottomPlaneGeometry = new THREE.PlaneGeometry(width, length);
          const bottomPlaneEdges = new THREE.EdgesGeometry(bottomPlaneGeometry);

          this.applyCSGRotationToGeometry(
            bottomPlaneEdges,
            csgOperation.rotation
          );

          outlines.push({
            geometry: bottomPlaneEdges,
            position: {
              x: position.x + depthOffsets.bottom.x,
              y: position.y + depthOffsets.bottom.y,
              z: position.z + depthOffsets.bottom.z,
            },
            type: "bottom",
          });
          break;

        default:
          console.warn(
            `Nem t√°mogatott lyuk geometria: ${csgOperation.geometry}`
          );
          return [];
      }

      return outlines;
    } catch (error) {
      console.error("CSG lyuk k√∂rvonal hiba:", error);
      return [];
    }
  }

  // √öJ: Lyuk tengely meghat√°roz√°sa CSG rot√°ci√≥ alapj√°n - JAV√çTOTT v2.0.3
  determineHoleAxis(csgRotation) {
    if (!csgRotation) {
      return "y"; // Alap√©rtelmezett: Y tengely (f√ºgg≈ëleges)
    }

    // JAV√çTOTT: Rot√°ci√≥ detekt√°l√°s az √∫j direction rendszerhez
    // hole-generator.js v3.1.0 rot√°ci√≥ mapping:
    // Y tengely: x: 0 vagy Math.PI (up eset√©n)
    // X tengely: y: ¬±Math.PI/2
    // Z tengely: x: ¬±Math.PI/2

    const threshold = 0.1; // Kis tolerancia a floating point hib√°khoz

    // Z tengely detekt√°l√°s: X tengely k√∂r√ºl ¬±90¬∞ rot√°ci√≥
    if (Math.abs(Math.abs(csgRotation.x) - Math.PI / 2) < threshold) {
      return "z"; // Z tengely ir√°ny√∫ lyuk (right/left)
    }
    // X tengely detekt√°l√°s: Y tengely k√∂r√ºl ¬±90¬∞ rot√°ci√≥
    else if (Math.abs(Math.abs(csgRotation.y) - Math.PI / 2) < threshold) {
      return "x"; // X tengely ir√°ny√∫ lyuk (forward/backward)
    }
    // Y tengely detekt√°l√°s: nincs jelent≈ës rot√°ci√≥ VAGY 180¬∞ X k√∂r√ºl (up)
    else {
      return "y"; // Y tengely ir√°ny√∫ lyuk (down/up)
    }
  }

  // √öJ: M√©lys√©g offsetek sz√°m√≠t√°sa tengely szerint - JAV√çTOTT v2.0.3
  calculateDepthOffsets(depth, axis) {
    const halfDepth = depth / 2;

    // JAV√çTOTT: √öj direction rendszerhez igaz√≠tva
    switch (axis) {
      case "x":
        // X tengely: forward/backward (hosszanti ir√°ny)
        return {
          top: { x: halfDepth, y: 0, z: 0 }, // Forward ir√°ny
          bottom: { x: -halfDepth, y: 0, z: 0 }, // Backward ir√°ny
        };
      case "z":
        // Z tengely: right/left (sz√©less√©gi ir√°ny)
        return {
          top: { x: 0, y: 0, z: halfDepth }, // Right ir√°ny
          bottom: { x: 0, y: 0, z: -halfDepth }, // Left ir√°ny
        };
      case "y":
      default:
        // Y tengely: down/up (magass√°gi ir√°ny)
        return {
          top: { x: 0, y: halfDepth, z: 0 }, // Down ir√°ny (fel√ºl)
          bottom: { x: 0, y: -halfDepth, z: 0 }, // Up ir√°ny (alul)
        };
    }
  }

  // √öJ: CSG rot√°ci√≥ alkalmaz√°sa wireframe geometri√°n - DEBUG inf√≥val
  applyCSGRotationToGeometry(geometry, csgRotation) {
    // Alap√©rtelmezett orient√°ci√≥: XY s√≠k -> XZ s√≠kra forgat√°s (v√≠zszintes)
    geometry.rotateX(Math.PI / 2);

    // Ha van CSG rot√°ci√≥, alkalmazzuk azt is
    if (
      csgRotation &&
      (csgRotation.x !== 0 || csgRotation.y !== 0 || csgRotation.z !== 0)
    ) {
      const rotationMatrix = new THREE.Matrix4();
      rotationMatrix.makeRotationFromEuler(
        new THREE.Euler(csgRotation.x, csgRotation.y, csgRotation.z)
      );
      geometry.applyMatrix4(rotationMatrix);

      // Debug info a tengely meghat√°roz√°s√°hoz - JAV√çTOTT komment
      const axis = this.determineHoleAxis(csgRotation);
      console.log(
        `üîÑ CSG wireframe: ${axis} tengely, rot√°ci√≥: x:${(
          (csgRotation.x * 180) /
          Math.PI
        ).toFixed(1)}¬∞ y:${((csgRotation.y * 180) / Math.PI).toFixed(1)}¬∞ z:${(
          (csgRotation.z * 180) /
          Math.PI
        ).toFixed(1)}¬∞`
      );
    }
  }

  // Lyuk k√∂rvonal hozz√°ad√°sa a scene-hez - EGYSZER≈∞S√çTETT rot√°ci√≥ kezel√©s
  addHoleOutlineToScene(holeOutline, parentMesh, elementId, holeId) {
    try {
      const holeWireframe = new THREE.LineSegments(
        holeOutline.geometry,
        this.wireframeMaterial
      );

      const originalHolePosition = {
        x: holeOutline.position.x,
        y: holeOutline.position.y,
        z: holeOutline.position.z,
      };

      // Poz√≠ci√≥ be√°ll√≠t√°sa (parent + hole offset)
      holeWireframe.position.set(
        parentMesh.position.x + holeOutline.position.x,
        parentMesh.position.y + holeOutline.position.y,
        parentMesh.position.z + holeOutline.position.z
      );

      // JAV√çT√ÅS v2: Csak parent mesh rot√°ci√≥j√°t alkalmazzuk
      // A CSG rot√°ci√≥ m√°r a geometri√°ban van az applyCSGRotationToGeometry-ban
      holeWireframe.rotation.set(
        parentMesh.rotation.x,
        parentMesh.rotation.y,
        parentMesh.rotation.z
      );

      holeWireframe.userData = {
        isHoleOutline: true,
        parentId: elementId,
        holeId: holeId,
        originalHolePosition: originalHolePosition,
      };

      this.sceneManager.scene.add(holeWireframe);

      const combinedKey = `${elementId}_hole_${holeId}`;
      this.wireframeLayer.set(combinedKey, holeWireframe);
    } catch (error) {
      console.error("Lyuk k√∂rvonal scene hozz√°ad√°s hiba:", error);
    }
  }

  // Wireframe layer elt√°vol√≠t√°sa
  removeWireframeLayer() {
    console.log("üßπ Wireframe layer elt√°vol√≠t√°sa...");

    this.wireframeLayer.forEach((wireframeMesh, elementId) => {
      this.sceneManager.scene.remove(wireframeMesh);
      wireframeMesh.geometry.dispose();
    });

    this.wireframeLayer.clear();
    console.log("‚úÖ Wireframe layer t√∂r√∂lve");
  }

  // Wireframe poz√≠ci√≥k friss√≠t√©se
  updateWireframePositions(meshes) {
    this.wireframeLayer.forEach((wireframeMesh, key) => {
      if (!key.includes("_hole_")) {
        // Sima elem wireframe
        const originalMesh = meshes.get(key);
        if (originalMesh && wireframeMesh) {
          wireframeMesh.position.copy(originalMesh.position);
          wireframeMesh.rotation.copy(originalMesh.rotation);
          wireframeMesh.scale.copy(originalMesh.scale);
        }
      } else {
        // Lyuk wireframe
        const elementId = key.split("_hole_")[0];
        const originalMesh = meshes.get(elementId);

        if (
          originalMesh &&
          wireframeMesh &&
          wireframeMesh.userData.isHoleOutline
        ) {
          const holePosition = wireframeMesh.userData.originalHolePosition || {
            x: 0,
            y: 0,
            z: 0,
          };

          // Poz√≠ci√≥ friss√≠t√©se
          wireframeMesh.position.set(
            originalMesh.position.x + holePosition.x,
            originalMesh.position.y + holePosition.y,
            originalMesh.position.z + holePosition.z
          );

          // JAV√çT√ÅS: Rot√°ci√≥ friss√≠t√©se - csak parent rot√°ci√≥
          wireframeMesh.rotation.copy(originalMesh.rotation);
        }
      }
    });
  }

  // V√°lt√°s tervrajz n√©zetbe
  switchToBlueprint(meshes, elements, force = false) {
    if (this.currentMode === "blueprint" && !force) return;

    console.log("üîÑ V√°lt√°s tervrajz n√©zetbe...");

    if (this.originalMaterials.size === 0) {
      this.saveOriginalMaterials(meshes);
    }

    this.sceneManager.renderer.shadowMap.enabled = false;
    this.sceneManager.scene.background = new THREE.Color(0xffffff);

    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      // GROUP eset√©n a gyerek elemeket is √°t kell √°ll√≠tani
      if (mesh.userData && mesh.userData.isGroup) {
        mesh.castShadow = false;
        mesh.receiveShadow = false;
        
        // GROUP gyerekek material v√°lt√°sa
        mesh.children.forEach((childMesh) => {
          if (childMesh.material) {
            const material = this.getBlueprintMaterial(element.type);
            childMesh.material = material;
            childMesh.castShadow = false;
            childMesh.receiveShadow = false;
          }
        });
        return;
      }

      const material = this.getBlueprintMaterial(element.type);

      mesh.material = material;
      mesh.castShadow = false;
      mesh.receiveShadow = false;
    });

    this.createWireframeLayer(meshes, elements);

    const isExploded = this.exploder && this.exploder.getState().isExploded;
    if (isExploded) {
      console.log(
        "üîß Exploded √°llapot √©szlelve, wireframe poz√≠ci√≥k friss√≠t√©se..."
      );
      setTimeout(() => {
        this.updateWireframePositions(meshes);
      }, 50);
    }

    this.setBlueprintLighting();

    this.currentMode = "blueprint";
    console.log(
      `‚úÖ Tervrajz n√©zet akt√≠v (wireframe: ${this.wireframeLayer.size} elem, exploded: ${isExploded})`
    );
  }

  // Blueprint anyag kiv√°laszt√°sa
  getBlueprintMaterial(elementType) {
    return this.toonMaterials.default;
  }

  // V√°lt√°s sz√≠nes n√©zetbe
  switchToRealistic(meshes, elements) {
    if (this.currentMode === "realistic") return;

    console.log("üîÑ V√°lt√°s sz√≠nes n√©zetbe...");

    this.removeWireframeLayer();

    this.sceneManager.renderer.shadowMap.enabled = true;
    this.sceneManager.scene.background = new THREE.Color(0xf9f9f9);

    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      // GROUP eset√©n a gyerek elemeket is √°t kell √°ll√≠tani
      if (mesh.userData && mesh.userData.isGroup) {
        mesh.castShadow = element.display.castShadow;
        mesh.receiveShadow = element.display.receiveShadow;
        
        // GROUP gyerekek realistic material v√°lt√°sa
        mesh.children.forEach((childMesh) => {
          if (childMesh.material) {
            let realisticMaterial;
            switch (element.type) {
              case "plate":
                realisticMaterial = this.realisticMaterials.plate;
                break;
              case "frame":
                realisticMaterial = this.realisticMaterials.frame;
                break;
              case "covering":
                realisticMaterial = this.realisticMaterials.covering;
                break;
              case "wall":
                realisticMaterial = this.realisticMaterials.wall;
                break;
              case "leg":
                realisticMaterial = this.realisticMaterials.leg;
                break;
              case "ball":
                realisticMaterial = this.realisticMaterials.ball;
                break;
              default:
                realisticMaterial = this.realisticMaterials.frame;
            }
            
            childMesh.material = realisticMaterial;
            childMesh.castShadow = element.display.castShadow;
            childMesh.receiveShadow = element.display.receiveShadow;
          }
        });
        return;
      }

      let realisticMaterial;
      switch (element.type) {
        case "plate":
          realisticMaterial = this.realisticMaterials.plate;
          break;
        case "frame":
          realisticMaterial = this.realisticMaterials.frame;
          break;
        case "covering":
          realisticMaterial = this.realisticMaterials.covering;
          break;
        case "wall":
          realisticMaterial = this.realisticMaterials.wall;
          break;
        case "leg":
          realisticMaterial = this.realisticMaterials.leg;
          break;
        case "ball":
          realisticMaterial = this.realisticMaterials.ball;
          break;
        default:
          realisticMaterial = this.realisticMaterials.frame;
      }

      mesh.material = realisticMaterial;
      mesh.castShadow = element.display.castShadow;
      mesh.receiveShadow = element.display.receiveShadow;
    });

    this.setRealisticLighting();

    this.currentMode = "realistic";
    console.log("‚úÖ Sz√≠nes n√©zet akt√≠v");
  }

  // Toggle - v√°lt√°s a k√©t n√©zet k√∂z√∂tt
  toggle(meshes, elements) {
    if (this.currentMode === "realistic") {
      this.switchToBlueprint(meshes, elements);
    } else {
      this.switchToRealistic(meshes, elements);
    }
  }

  // Blueprint megvil√°g√≠t√°s
  setBlueprintLighting() {
    const lightsToRemove = [];
    this.sceneManager.scene.traverse((object) => {
      if (object.isLight) {
        lightsToRemove.push(object);
      }
    });
    lightsToRemove.forEach((light) => this.sceneManager.scene.remove(light));

    const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
    this.sceneManager.scene.add(ambientLight);

    this.sceneManager.blueprintLights = [ambientLight];
  }

  // Realistic megvil√°g√≠t√°s vissza√°ll√≠t√°sa
  setRealisticLighting() {
    if (this.sceneManager.blueprintLights) {
      this.sceneManager.blueprintLights.forEach((light) => {
        this.sceneManager.scene.remove(light);
      });
      delete this.sceneManager.blueprintLights;
    }

    this.sceneManager.createLights();
  }

  // Aktu√°lis m√≥d lek√©rdez√©se
  getCurrentMode() {
    return this.currentMode;
  }

  // M√≥d n√©v megjelen√≠t√©shez
  getModeDisplayName() {
    return this.currentMode === "realistic" ? "Sz√≠nes" : "Tervrajz";
  }

  // Cleanup
  destroy() {
    this.removeWireframeLayer();

    if (this.toonMaterials) {
      Object.values(this.toonMaterials).forEach((material) => {
        material.dispose();
      });
    }

    this.originalMaterials.clear();
    this.wireframeLayer.clear();

    console.log("ViewModeManager v2.1.0 destroy - TextureManager anyagokat nem dispose-olja");
  }
}