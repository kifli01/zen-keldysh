/**
 * View Mode Manager
 * V√°lt√°s sz√≠nes n√©zet √©s tervrajz st√≠lus k√∂z√∂tt
 * v1.8.0 - Wireframe layer poz√≠ci√≥ jav√≠t√°s exploded √°llapot kezel√©shez
 */

class ViewModeManager {
  constructor(sceneManager, geometryBuilder) {
    this.sceneManager = sceneManager;
    this.geometryBuilder = geometryBuilder;
    this.currentMode = "blueprint"; // 'realistic' vagy 'blueprint'

    // Eredeti anyagok ment√©se
    this.originalMaterials = new Map();

    // √öJ: Wireframe layer
    this.wireframeLayer = new Map(); // elementId -> wireframe mesh

    // √öJ: Exploder referencia t√°rol√°sa
    this.exploder = null;

    // √öJ: K√©pess√©gek ellen≈ërz√©se
    this.capabilities = {
      postProcessing: false,
      customShaders: false,
    };

    // Text√∫r√°k l√©trehoz√°sa
    this.textures = this.createTextures();

    // √öJ: Toon shader anyagok (ha t√°mogatott)
    this.toonMaterials = null;

    // Blueprint anyagok - TISZTA FEH√âR fallback anyagok
    this.blueprintMaterials = {
      plate: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      frame: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      covering: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      wall: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      leg: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
      ball: new THREE.MeshLambertMaterial({
        color: 0xffffff, // Tiszta feh√©r
        transparent: false,
        flatShading: false,
        side: THREE.DoubleSide,
      }),
    };

    // Realistic anyagok - val√≥szer≈± text√∫r√°kkal
    this.realisticMaterials = {
      plate: new THREE.MeshPhongMaterial({
        color: 0xb99379,
        // map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      frame: new THREE.MeshPhongMaterial({
        color: 0xecc5a9,
        map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      covering: new THREE.MeshPhongMaterial({
        color: 0xa5bc49,
        map: this.textures.grass,
        shininess: 2,
        transparent: false,
      }),
      wall: new THREE.MeshPhongMaterial({
        color: 0xecc5a9,
        map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      leg: new THREE.MeshPhongMaterial({
        color: 0xecc5a9,
        map: this.textures.wood,
        shininess: 10,
        transparent: false,
      }),
      ball: new THREE.MeshPhongMaterial({
        color: 0xffffff,
        shininess: 30,
        transparent: false,
      }),
    };

    // √öJ: Egys√©ges wireframe anyag
    this.wireframeMaterial = new THREE.LineBasicMaterial({
      color: 0x333333, // S√∂t√©t sz√ºrke
      linewidth: 2,
      transparent: true,
      opacity: 0.8,
    });

    // Wireframe anyagok (legacy) - most √ºres lesz
    this.wireframeMaterials = new Map();
  }

  // √öJ: Exploder referencia be√°ll√≠t√°sa
  setExploder(exploder) {
    this.exploder = exploder;
    console.log("‚úÖ Exploder referencia be√°ll√≠tva ViewModeManager-ben");
  }

  // √öJ: Post-processing el√©rhet≈ës√©g be√°ll√≠t√°sa
  setPostProcessingAvailable(available) {
    this.capabilities.postProcessing = available;
    console.log(`Post-processing t√°mogat√°s: ${available ? "‚úÖ" : "‚ùå"}`);
  }

  // √öJ: Custom shader el√©rhet≈ës√©g be√°ll√≠t√°sa
  setShadersAvailable(available) {
    this.capabilities.customShaders = available;

    if (available) {
      // Toon shader anyagok l√©trehoz√°sa
      this.createToonShaderMaterials();
      console.log(`Custom shader t√°mogat√°s: ‚úÖ`);
    } else {
      console.log(`Custom shader t√°mogat√°s: ‚ùå (fallback anyagok haszn√°lata)`);
    }
  }

  // √öJ: Toon shader anyagok l√©trehoz√°sa + ERROR HANDLING
  createToonShaderMaterials() {
    try {
      // Shader k√≥dok lek√©r√©se a HTML-b≈ël
      const vertexShader =
        document.getElementById("toonVertexShader")?.textContent;
      const fragmentShader =
        document.getElementById("toonFragmentShader")?.textContent;

      if (!vertexShader || !fragmentShader) {
        console.warn(
          "‚ùå Toon shader k√≥dok nem tal√°lhat√≥ak, fallback haszn√°lata"
        );
        return false;
      }

      console.log(
        "‚úÖ Shader k√≥dok megtal√°lva, pr√≥b√°lkoz√°s shader anyagokkal..."
      );

      // Teszt shader l√©trehoz√°sa el≈ësz√∂r
      const testMaterial = new THREE.ShaderMaterial({
        uniforms: {
          color: { value: new THREE.Color(0xffffff) },
          lightDirection: { value: new THREE.Vector3(1, 1, 1).normalize() },
          paperStrength: { value: 0.0 }, // Nincs text√∫ra teszt c√©lj√°b√≥l
        },
        vertexShader: vertexShader,
        fragmentShader: fragmentShader,
        side: THREE.DoubleSide,
      });

      // Shader compile teszt
      console.log("üß™ Shader compile teszt...");

      // K√∂z√∂s shader uniforms
      const commonUniforms = {
        lightDirection: { value: new THREE.Vector3(3, 1, 1).normalize() },
        paperStrength: { value: 0.0 }, // KIKAPCSOLVA TESZTEL√âSHEZ
        paperTexture: { value: this.textures.paper },
      };

      // Toon anyagok l√©trehoz√°sa minden t√≠pushoz - TISZTA FEH√âR
      this.toonMaterials = {
        plate: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        frame: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        covering: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
            paperTexture: { value: this.textures.fabric },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        wall: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        leg: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),

        ball: new THREE.ShaderMaterial({
          uniforms: {
            ...commonUniforms,
            color: { value: new THREE.Color(0xffffff) }, // Tiszta feh√©r
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
          side: THREE.DoubleSide,
        }),
      };

      console.log(
        "‚úÖ Toon shader anyagok l√©trehozva - TISZTA FEH√âR be√°ll√≠t√°ssal"
      );
      return true;
    } catch (error) {
      console.error("‚ùå Toon shader anyagok l√©trehoz√°si hiba:", error);
      console.log("üì¥ Fallback anyagokra v√°lt√°s...");
      return false;
    }
  }

  // Text√∫r√°k l√©trehoz√°sa (m√≥dos√≠tott - finomabb pap√≠r hat√°s)
  createTextures() {
    const textures = {};

    // Pap√≠r text√∫ra - finomabb, kev√©sb√© l√°that√≥
    textures.paper = this.createPaperTexture();

    // Fa text√∫ra
    textures.wood = this.createWoodTexture();

    // M≈±f≈± text√∫ra
    textures.grass = this.createGrassTexture();

    // Sz√∂vet text√∫ra - finomabb
    textures.fabric = this.createFabricTexture();

    return textures;
  }

  // M√ìDOS√çTOTT: Sokkal finomabb pap√≠r text√∫ra - szinte l√°thatatlan
  createPaperTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    // Alap feh√©r h√°tt√©r
    context.fillStyle = "#ffffff";
    context.fillRect(0, 0, 512, 512);

    // MINIM√ÅLIS zaj - szinte l√°thatatlan
    const imageData = context.getImageData(0, 0, 512, 512);
    const data = imageData.data;

    for (let i = 0; i < data.length; i += 4) {
      const noise = (Math.random() - 0.5) * 1; // Nagyon kicsi zaj: 1 helyett 4
      data[i] = Math.max(0, Math.min(255, 255 + noise)); // R
      data[i + 1] = Math.max(0, Math.min(255, 255 + noise)); // G
      data[i + 2] = Math.max(0, Math.min(255, 255 + noise)); // B
      data[i + 3] = 255; // A
    }

    context.putImageData(imageData, 0, 0);

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(16, 16); // Nagyobb ism√©tl√©s = finomabb minta
    return texture;
  }

  // T√∂bbi text√∫ra funkci√≥ v√°ltozatlan...
  createWoodTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    context.fillStyle = "#AF815F";
    context.fillRect(0, 0, 512, 512);

    for (let i = 0; i < 20; i++) {
      context.strokeStyle = `rgba(139, 69, 19, ${0.1 + Math.random() * 0.3})`;
      context.lineWidth = 2 + Math.random() * 4;
      context.beginPath();
      context.moveTo(0, Math.random() * 512);
      context.bezierCurveTo(
        128,
        Math.random() * 512,
        384,
        Math.random() * 512,
        512,
        Math.random() * 512
      );
      context.stroke();
    }

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(2, 2);
    return texture;
  }

  createGrassTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    context.fillStyle = "#A5BC49";
    context.fillRect(0, 0, 512, 512);

    for (let i = 0; i < 1000; i++) {
      const x = Math.random() * 512;
      const y = Math.random() * 512;
      const length = 5 + Math.random() * 15;

      context.strokeStyle = `rgba(34, 139, 34, ${0.3 + Math.random() * 0.7})`;
      context.lineWidth = 1;
      context.beginPath();
      context.moveTo(x, y);
      context.lineTo(x + (Math.random() - 0.5) * 4, y - length);
      context.stroke();
    }

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(8, 8);
    return texture;
  }

  // M√ìDOS√çTOTT: Finomabb sz√∂vet text√∫ra
  createFabricTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    context.fillStyle = "#f8f8f8";
    context.fillRect(0, 0, 512, 512);

    // Finomabb keresztminta
    context.strokeStyle = "rgba(230, 230, 230, 0.3)";
    context.lineWidth = 0.5;

    for (let y = 0; y < 512; y += 12) {
      context.beginPath();
      context.moveTo(0, y);
      context.lineTo(512, y);
      context.stroke();
    }

    for (let x = 0; x < 512; x += 12) {
      context.beginPath();
      context.moveTo(x, 0);
      context.lineTo(x, 512);
      context.stroke();
    }

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(4, 4);
    return texture;
  }

  // Eredeti anyagok ment√©se
  saveOriginalMaterials(meshes) {
    meshes.forEach((mesh, elementId) => {
      this.originalMaterials.set(elementId, mesh.material.clone());
    });
  }

  // √öJ: Wireframe layer l√©trehoz√°sa
  createWireframeLayer(meshes, elements) {
    console.log("üîß Wireframe layer l√©trehoz√°sa...");

    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      // 1. Alap wireframe geometria l√©trehoz√°sa (befoglal√≥ forma)
      const wireframeGeometry = this.createWireframeGeometry(mesh);

      if (wireframeGeometry) {
        const wireframeMesh = new THREE.LineSegments(
          wireframeGeometry,
          this.wireframeMaterial
        );

        // Poz√≠ci√≥, forgat√°s, sk√°l√°z√°s m√°sol√°sa
        wireframeMesh.position.copy(mesh.position);
        wireframeMesh.rotation.copy(mesh.rotation);
        wireframeMesh.scale.copy(mesh.scale);

        // Metadata
        wireframeMesh.userData = {
          isWireframe: true,
          parentId: element.id,
          elementType: element.type,
        };

        // Scene-hez ad√°s √©s t√°rol√°s
        this.sceneManager.scene.add(wireframeMesh);
        this.wireframeLayer.set(element.id, wireframeMesh);

        console.log(`‚úÖ Wireframe l√©trehozva: ${element.id}`);
      }

      // 2. √öJ: Lyukak k√∂rvonalainak hozz√°ad√°sa
      this.addHoleOutlines(element, mesh);
    });

    console.log(`üéØ Wireframe layer k√©sz: ${this.wireframeLayer.size} elem`);
  }

  // √öJ: Wireframe geometria l√©trehoz√°sa - lyukak n√©lk√ºli verzi√≥
  createWireframeGeometry(mesh) {
    try {
      let geometry;

      // CSG eredm√©nyhez egyszer≈±s√≠tett befoglal√≥ forma k√©sz√≠t√©se
      if (mesh.userData.hasCSGOperations) {
        console.log(
          `üîß CSG mesh egyszer≈±s√≠tett wireframe: ${mesh.userData.elementId}`
        );
        geometry = this.createSimplifiedBoundingGeometry(mesh);
      } else {
        // Nem CSG mesh eset√©n az eredeti geometria haszn√°lata
        geometry = mesh.geometry;
      }

      // EdgesGeometry l√©trehoz√°sa
      const edgesGeometry = new THREE.EdgesGeometry(geometry, 15); // 15 fok threshold

      // Ha egyszer≈±s√≠tett geometri√°t k√©sz√≠tett√ºnk, azt k√©s≈ëbb tiszt√≠tjuk fel
      if (geometry !== mesh.geometry) {
        // A geometry-t k√©s≈ëbb dispose-oljuk amikor a wireframe mesh t√∂rl≈ëdik
      }

      return edgesGeometry;
    } catch (error) {
      console.error(
        `Wireframe geometria hiba (${mesh.userData.elementId}):`,
        error
      );
      return null;
    }
  }

  // √öJ: Egyszer≈±s√≠tett befoglal√≥ geometria k√©sz√≠t√©se (lyukak n√©lk√ºl)
  createSimplifiedBoundingGeometry(mesh) {
    const userData = mesh.userData;

    // Bounding box alapj√°n egyszer≈±s√≠tett forma k√©sz√≠t√©se
    const box = new THREE.Box3().setFromObject(mesh);
    const size = box.getSize(new THREE.Vector3());

    // Elem t√≠pus alapj√°n megfelel≈ë egyszer≈±s√≠tett geometria
    switch (userData.elementType) {
      case "plate":
      case "covering":
      case "frame":
      case "wall":
        // Box geometria
        return new THREE.BoxGeometry(size.x, size.y, size.z);

      case "leg":
        // Cylinder geometria
        const radius = Math.max(size.x, size.z) / 2;
        return new THREE.CylinderGeometry(radius, radius, size.y, 16);

      case "ball":
        // Sphere geometria
        const sphereRadius = Math.max(size.x, size.y, size.z) / 2;
        return new THREE.SphereGeometry(sphereRadius, 16, 12);

      default:
        // Fallback: box
        return new THREE.BoxGeometry(size.x, size.y, size.z);
    }
  }

  // √öJ: Lyukak k√∂rvonalainak hozz√°ad√°sa
  addHoleOutlines(element, mesh) {
    // CSG m≈±veletek ellen≈ërz√©se
    const csgOperations = element.geometry.csgOperations;
    const holes = element.geometry.holes; // Legacy holes t√°mogat√°s

    let holeCount = 0;

    // 1. CSG m≈±veletek alapj√°n lyukak keres√©se
    if (csgOperations && csgOperations.length > 0) {
      csgOperations.forEach((operation, index) => {
        if (operation.type === "subtract") {
          const holeOutlines = this.createHoleOutlineGeometry(operation, mesh);
          if (holeOutlines && holeOutlines.length > 0) {
            // T√∂bb k√∂rvonal hozz√°ad√°sa (fels≈ë √©s als√≥)
            holeOutlines.forEach((holeOutline, outlineIndex) => {
              this.addHoleOutlineToScene(
                holeOutline,
                mesh,
                element.id,
                `csg_${index}_${holeOutline.type}`
              );
              holeCount++;
            });
          }
        }
      });
    }

    // 2. Legacy holes t√°mogat√°s
    if (holes && holes.length > 0) {
      holes.forEach((hole, index) => {
        const holeOutlines = this.createLegacyHoleOutlineGeometry(hole, mesh);
        if (holeOutlines && holeOutlines.length > 0) {
          // T√∂bb k√∂rvonal hozz√°ad√°sa (fels≈ë √©s als√≥)
          holeOutlines.forEach((holeOutline, outlineIndex) => {
            this.addHoleOutlineToScene(
              holeOutline,
              mesh,
              element.id,
              `legacy_${index}_${holeOutline.type}`
            );
            holeCount++;
          });
        }
      });
    }

    if (holeCount > 0) {
      console.log(`üîµ ${holeCount} lyuk k√∂rvonal hozz√°adva: ${element.id}`);
    }
  }

  // √öJ: CSG m≈±velet alapj√°n lyuk k√∂rvonal k√©sz√≠t√©se
  createHoleOutlineGeometry(csgOperation, parentMesh) {
    try {
      const position = csgOperation.position || { x: 0, y: 0, z: 0 };
      const depth = csgOperation.params.height || 10; // Lyuk m√©lys√©ge

      let outlines = []; // T√∂bb k√∂rvonal t√°rol√°sa

      switch (csgOperation.geometry) {
        case "cylinder":
          // K√∂r k√∂rvonal - fels≈ë √©s als√≥
          const radius = csgOperation.params.radius;
          const segments = csgOperation.params.segments || 32;

          // Fels≈ë k√∂rvonal
          const topCircleGeometry = new THREE.CircleGeometry(radius, segments);
          const topEdgesGeometry = new THREE.EdgesGeometry(topCircleGeometry);
          topEdgesGeometry.rotateX(Math.PI / 2);

          outlines.push({
            geometry: topEdgesGeometry,
            position: {
              x: position.x,
              y: position.y + depth / 2, // Fels≈ë poz√≠ci√≥
              z: position.z,
            },
            rotation: csgOperation.rotation || { x: 0, y: 0, z: 0 },
            type: "top",
          });

          // Als√≥ k√∂rvonal
          const bottomCircleGeometry = new THREE.CircleGeometry(
            radius,
            segments
          );
          const bottomEdgesGeometry = new THREE.EdgesGeometry(
            bottomCircleGeometry
          );
          bottomEdgesGeometry.rotateX(Math.PI / 2);

          outlines.push({
            geometry: bottomEdgesGeometry,
            position: {
              x: position.x,
              y: position.y - depth / 2, // Als√≥ poz√≠ci√≥
              z: position.z,
            },
            rotation: csgOperation.rotation || { x: 0, y: 0, z: 0 },
            type: "bottom",
          });
          break;

        case "box":
          // T√©glalap k√∂rvonal - fels≈ë √©s als√≥
          const width = csgOperation.params.width;
          const length =
            csgOperation.params.length || csgOperation.params.height;

          // Fels≈ë t√©glalap
          const topPlaneGeometry = new THREE.PlaneGeometry(width, length);
          const topPlaneEdges = new THREE.EdgesGeometry(topPlaneGeometry);
          topPlaneEdges.rotateX(Math.PI / 2);

          outlines.push({
            geometry: topPlaneEdges,
            position: {
              x: position.x,
              y: position.y + depth / 2, // Fels≈ë poz√≠ci√≥
              z: position.z,
            },
            rotation: csgOperation.rotation || { x: 0, y: 0, z: 0 },
            type: "top",
          });

          // Als√≥ t√©glalap
          const bottomPlaneGeometry = new THREE.PlaneGeometry(width, length);
          const bottomPlaneEdges = new THREE.EdgesGeometry(bottomPlaneGeometry);
          bottomPlaneEdges.rotateX(Math.PI / 2);

          outlines.push({
            geometry: bottomPlaneEdges,
            position: {
              x: position.x,
              y: position.y - depth / 2, // Als√≥ poz√≠ci√≥
              z: position.z,
            },
            rotation: csgOperation.rotation || { x: 0, y: 0, z: 0 },
            type: "bottom",
          });
          break;

        default:
          console.warn(
            `Nem t√°mogatott lyuk geometria: ${csgOperation.geometry}`
          );
          return [];
      }

      return outlines;
    } catch (error) {
      console.error("CSG lyuk k√∂rvonal hiba:", error);
      return [];
    }
  }

  // √öJ: Legacy hole k√∂rvonal k√©sz√≠t√©se
  createLegacyHoleOutlineGeometry(hole, parentMesh) {
    try {
      const depth = hole.depth || 10; // Alap√©rtelmezett m√©lys√©g
      let outlines = [];

      switch (hole.type) {
        case "circle":
          const radius = hole.radius;

          // Fels≈ë k√∂rvonal
          const topCircleGeometry = new THREE.CircleGeometry(radius, 32);
          const topEdgesGeometry = new THREE.EdgesGeometry(topCircleGeometry);
          topEdgesGeometry.rotateX(Math.PI / 2);

          outlines.push({
            geometry: topEdgesGeometry,
            position: {
              x: hole.position.x,
              y: hole.position.y + depth / 2,
              z: hole.position.z,
            },
            rotation: hole.rotation || { x: 0, y: 0, z: 0 },
            type: "top",
          });

          // Als√≥ k√∂rvonal
          const bottomCircleGeometry = new THREE.CircleGeometry(radius, 32);
          const bottomEdgesGeometry = new THREE.EdgesGeometry(
            bottomCircleGeometry
          );
          bottomEdgesGeometry.rotateX(Math.PI / 2);

          outlines.push({
            geometry: bottomEdgesGeometry,
            position: {
              x: hole.position.x,
              y: hole.position.y - depth / 2,
              z: hole.position.z,
            },
            rotation: hole.rotation || { x: 0, y: 0, z: 0 },
            type: "bottom",
          });
          break;

        case "square":
          // Fels≈ë t√©glalap
          const topPlaneGeometry = new THREE.PlaneGeometry(
            hole.width,
            hole.height
          );
          const topPlaneEdges = new THREE.EdgesGeometry(topPlaneGeometry);
          topPlaneEdges.rotateX(Math.PI / 2);

          outlines.push({
            geometry: topPlaneEdges,
            position: {
              x: hole.position.x,
              y: hole.position.y + depth / 2,
              z: hole.position.z,
            },
            rotation: hole.rotation || { x: 0, y: 0, z: 0 },
            type: "top",
          });

          // Als√≥ t√©glalap
          const bottomPlaneGeometry = new THREE.PlaneGeometry(
            hole.width,
            hole.height
          );
          const bottomPlaneEdges = new THREE.EdgesGeometry(bottomPlaneGeometry);
          bottomPlaneEdges.rotateX(Math.PI / 2);

          outlines.push({
            geometry: bottomPlaneEdges,
            position: {
              x: hole.position.x,
              y: hole.position.y - depth / 2,
              z: hole.position.z,
            },
            rotation: hole.rotation || { x: 0, y: 0, z: 0 },
            type: "bottom",
          });
          break;

        default:
          console.warn(`Nem t√°mogatott legacy lyuk t√≠pus: ${hole.type}`);
          return [];
      }

      return outlines;
    } catch (error) {
      console.error("Legacy lyuk k√∂rvonal hiba:", error);
      return [];
    }
  }

  // √öJ: Lyuk k√∂rvonal hozz√°ad√°sa a scene-hez
  addHoleOutlineToScene(holeOutline, parentMesh, elementId, holeId) {
    try {
      // LineSegments haszn√°lata a wireframe vonalakhoz
      const holeWireframe = new THREE.LineSegments(
        holeOutline.geometry,
        this.wireframeMaterial
      );

      // Eredeti lyuk poz√≠ci√≥ ment√©se (explode t√°mogat√°shoz)
      const originalHolePosition = {
        x: holeOutline.position.x,
        y: holeOutline.position.y,
        z: holeOutline.position.z,
      };

      // Poz√≠ci√≥ be√°ll√≠t√°sa (parent mesh + hole offset)
      holeWireframe.position.set(
        parentMesh.position.x + holeOutline.position.x,
        parentMesh.position.y + holeOutline.position.y,
        parentMesh.position.z + holeOutline.position.z
      );

      // Forgat√°s alkalmaz√°sa
      if (holeOutline.rotation) {
        holeWireframe.rotation.set(
          holeOutline.rotation.x,
          holeOutline.rotation.y,
          holeOutline.rotation.z
        );
      }

      // Parent mesh forgat√°s√°nak alkalmaz√°sa
      holeWireframe.rotation.x += parentMesh.rotation.x;
      holeWireframe.rotation.y += parentMesh.rotation.y;
      holeWireframe.rotation.z += parentMesh.rotation.z;

      // Metadata
      holeWireframe.userData = {
        isHoleOutline: true,
        parentId: elementId,
        holeId: holeId,
        originalHolePosition: originalHolePosition, // Explode t√°mogat√°shoz
      };

      // Scene-hez ad√°s
      this.sceneManager.scene.add(holeWireframe);

      // Wireframe layer-hez t√°rol√°s (kombin√°lt kulcs)
      const combinedKey = `${elementId}_hole_${holeId}`;
      this.wireframeLayer.set(combinedKey, holeWireframe);
    } catch (error) {
      console.error("Lyuk k√∂rvonal scene hozz√°ad√°s hiba:", error);
    }
  }

  // √öJ: Wireframe layer elt√°vol√≠t√°sa
  removeWireframeLayer() {
    console.log("üßπ Wireframe layer elt√°vol√≠t√°sa...");

    this.wireframeLayer.forEach((wireframeMesh, elementId) => {
      // Scene-b≈ël elt√°vol√≠t√°s
      this.sceneManager.scene.remove(wireframeMesh);

      // Cleanup
      wireframeMesh.geometry.dispose();

      // Ha egyszer≈±s√≠tett geometria volt haszn√°lva az edges-hez, azt is tiszt√≠tjuk
      if (wireframeMesh.userData.hasSimplifiedGeometry) {
        // A simplified geometry m√°r dispose-olva van a wireframe geometry-val egy√ºtt
      }

      // Material nem kell dispose-olni, mert k√∂z√∂s
    });

    this.wireframeLayer.clear();
    console.log("‚úÖ Wireframe layer t√∂r√∂lve");
  }

  // JAV√çTOTT: Wireframe poz√≠ci√≥k friss√≠t√©se (explode t√°mogat√°shoz)
  updateWireframePositions(meshes) {
    this.wireframeLayer.forEach((wireframeMesh, key) => {
      // Alap wireframe elemek friss√≠t√©se
      if (!key.includes("_hole_")) {
        const originalMesh = meshes.get(key);
        if (originalMesh && wireframeMesh) {
          wireframeMesh.position.copy(originalMesh.position);
          wireframeMesh.rotation.copy(originalMesh.rotation);
          wireframeMesh.scale.copy(originalMesh.scale);
        }
      } else {
        // Lyuk k√∂rvonalak friss√≠t√©se
        const elementId = key.split("_hole_")[0];
        const originalMesh = meshes.get(elementId);

        if (
          originalMesh &&
          wireframeMesh &&
          wireframeMesh.userData.isHoleOutline
        ) {
          // Parent mesh poz√≠ci√≥j√°hoz k√©pest relat√≠v poz√≠ci√≥
          const holePosition = wireframeMesh.userData.originalHolePosition || {
            x: 0,
            y: 0,
            z: 0,
          };

          wireframeMesh.position.set(
            originalMesh.position.x + holePosition.x,
            originalMesh.position.y + holePosition.y,
            originalMesh.position.z + holePosition.z
          );

          // Parent mesh forgat√°s√°nak alkalmaz√°sa
          wireframeMesh.rotation.copy(originalMesh.rotation);
        }
      }
    });
  }

  // JAV√çTOTT: V√°lt√°s tervrajz n√©zetbe - exploded √°llapot figyel√©se
  switchToBlueprint(meshes, elements, force = false) {
    if (this.currentMode === "blueprint" && !force) return;

    console.log("üîÑ V√°lt√°s tervrajz n√©zetbe (wireframe layer)...");

    // Eredeti anyagok ment√©se (ha m√©g nem t√∂rt√©nt meg)
    if (this.originalMaterials.size === 0) {
      this.saveOriginalMaterials(meshes);
    }

    // √Årny√©kok kikapcsol√°sa
    this.sceneManager.renderer.shadowMap.enabled = false;

    // Scene h√°tt√©r feh√©rre
    this.sceneManager.scene.background = new THREE.Color(0xffffff);
    console.log("‚úÖ H√°tt√©r feh√©rre √°ll√≠tva");

    // Eredeti mesh-ek anyagcser√©je (feh√©r/toon)
    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      // Anyag kiv√°laszt√°sa
      let material;

      if (this.capabilities.customShaders && this.toonMaterials) {
        // ‚úÖ Toon shader anyagok haszn√°lata
        material = this.getBlueprintMaterial(element.type, true);
        console.log(`üé® Shader anyag alkalmazva: ${element.id}`);
      } else {
        // ‚ùå Fallback hagyom√°nyos anyagok
        material = this.getBlueprintMaterial(element.type, false);
        console.log(`üìÑ Fallback anyag alkalmazva: ${element.id}`);
      }

      mesh.material = material;
      mesh.castShadow = false;
      mesh.receiveShadow = false;
    });

    // √öJ: Wireframe layer l√©trehoz√°sa
    this.createWireframeLayer(meshes, elements);

    // JAV√çTOTT: Exploded √°llapot ellen≈ërz√©se √©s wireframe poz√≠ci√≥k friss√≠t√©se
    if (this.exploder && this.exploder.getState().isExploded) {
      console.log(
        "üîß Exploded √°llapot √©szlelve, wireframe poz√≠ci√≥k friss√≠t√©se..."
      );
      this.updateWireframePositions(meshes);
    }

    // F√©nyek m√≥dos√≠t√°sa (egyenletes megvil√°g√≠t√°s)
    this.setBlueprintLighting();

    this.currentMode = "blueprint";
    console.log(
      `‚úÖ Tervrajz n√©zet akt√≠v (shader: ${
        this.capabilities.customShaders ? "‚úÖ" : "‚ùå"
      }, wireframe: ${this.wireframeLayer.size} elem)`
    );
  }

  // √öJ: Blueprint anyag kiv√°laszt√°sa (shader vagy fallback)
  getBlueprintMaterial(elementType, useShader = false) {
    const materialSource = useShader
      ? this.toonMaterials
      : this.blueprintMaterials;

    switch (elementType) {
      case "plate":
        return materialSource.plate;
      case "frame":
        return materialSource.frame;
      case "covering":
        return materialSource.covering;
      case "wall":
        return materialSource.wall;
      case "leg":
        return materialSource.leg;
      case "ball":
        return materialSource.ball;
      default:
        return materialSource.frame;
    }
  }

  // M√ìDOS√çTOTT: V√°lt√°s sz√≠nes n√©zetbe - wireframe layer elt√°vol√≠t√°ssal
  switchToRealistic(meshes, elements) {
    if (this.currentMode === "realistic") return;

    console.log("üîÑ V√°lt√°s sz√≠nes n√©zetbe...");

    // √öJ: Wireframe layer elt√°vol√≠t√°sa
    this.removeWireframeLayer();

    // √Årny√©kok bekapcsol√°sa
    this.sceneManager.renderer.shadowMap.enabled = true;

    // Scene h√°tt√©r eredeti sz√≠nre
    this.sceneManager.scene.background = new THREE.Color(0xf9f9f9);

    // Realistic anyagok alkalmaz√°sa
    elements.forEach((element) => {
      const mesh = meshes.get(element.id);
      if (!mesh) return;

      let realisticMaterial;
      switch (element.type) {
        case "plate":
          realisticMaterial = this.realisticMaterials.plate;
          break;
        case "frame":
          realisticMaterial = this.realisticMaterials.frame;
          break;
        case "covering":
          realisticMaterial = this.realisticMaterials.covering;
          break;
        case "wall":
          realisticMaterial = this.realisticMaterials.wall;
          break;
        case "leg":
          realisticMaterial = this.realisticMaterials.leg;
          break;
        case "ball":
          realisticMaterial = this.realisticMaterials.ball;
          break;
        default:
          realisticMaterial = this.realisticMaterials.frame;
      }

      mesh.material = realisticMaterial;
      mesh.castShadow = element.display.castShadow;
      mesh.receiveShadow = element.display.receiveShadow;
    });

    // F√©nyek vissza√°ll√≠t√°sa
    this.setRealisticLighting();

    this.currentMode = "realistic";
    console.log("‚úÖ Sz√≠nes n√©zet akt√≠v");
  }

  // Toggle - v√°lt√°s a k√©t n√©zet k√∂z√∂tt
  toggle(meshes, elements) {
    if (this.currentMode === "realistic") {
      this.switchToBlueprint(meshes, elements);
    } else {
      this.switchToRealistic(meshes, elements);
    }
  }

  // M√ìDOS√çTOTT: Edge poz√≠ci√≥ friss√≠t√©se - most wireframe layert friss√≠t
  updateEdgePositions(meshes) {
    this.updateWireframePositions(meshes);
  }

  // M√ìDOS√çTOTT: Blueprint megvil√°g√≠t√°s - tiszta feh√©r h√°tt√©r
  setBlueprintLighting() {
    // √ñsszes f√©ny elt√°vol√≠t√°sa
    const lightsToRemove = [];
    this.sceneManager.scene.traverse((object) => {
      if (object.isLight) {
        lightsToRemove.push(object);
      }
    });
    lightsToRemove.forEach((light) => this.sceneManager.scene.remove(light));

    // Er≈ës, egyenletes vil√°g√≠t√°s - minden feh√©r legyen
    const ambientLight = new THREE.AmbientLight(0xffffff, 0.8); // Er≈ësebb intenzit√°s
    this.sceneManager.scene.add(ambientLight);

    // Ment√©s a k√©s≈ëbbi vissza√°ll√≠t√°shoz
    this.sceneManager.blueprintLights = [ambientLight];
  }

  // Realistic megvil√°g√≠t√°s vissza√°ll√≠t√°sa (v√°ltozatlan)
  setRealisticLighting() {
    if (this.sceneManager.blueprintLights) {
      this.sceneManager.blueprintLights.forEach((light) => {
        this.sceneManager.scene.remove(light);
      });
      delete this.sceneManager.blueprintLights;
    }

    this.sceneManager.createLights();
  }

  // Aktu√°lis m√≥d lek√©rdez√©se
  getCurrentMode() {
    return this.currentMode;
  }

  // M√≥d n√©v megjelen√≠t√©shez
  getModeDisplayName() {
    return this.currentMode === "realistic" ? "Sz√≠nes" : "Tervrajz";
  }

  // √öJ: K√©pess√©gek lek√©rdez√©se debug-hoz
  getCapabilities() {
    return {
      ...this.capabilities,
      toonMaterialsReady: !!this.toonMaterials,
      shadersLoaded: this.capabilities.customShaders,
      wireframeLayerSize: this.wireframeLayer.size,
    };
  }

  // M√ìDOS√çTOTT: Cleanup - wireframe layer is t√∂r√∂lve
  destroy() {
    // √öJ: Wireframe layer cleanup
    this.removeWireframeLayer();

    // Legacy wireframe meshek elt√°vol√≠t√°sa (ha maradt volna)
    this.wireframeMaterials.forEach((edgeLines, elementId) => {
      if (edgeLines && edgeLines.parent) {
        this.sceneManager.scene.remove(edgeLines);
        if (edgeLines.geometry) edgeLines.geometry.dispose();
        if (edgeLines.material) edgeLines.material.dispose();
      }
    });

    // Blueprint anyagok cleanup
    Object.values(this.blueprintMaterials).forEach((material) => {
      material.dispose();
    });

    // Realistic anyagok cleanup
    Object.values(this.realisticMaterials).forEach((material) => {
      material.dispose();
    });

    // √öJ: Toon anyagok cleanup
    if (this.toonMaterials) {
      Object.values(this.toonMaterials).forEach((material) => {
        material.dispose();
      });
    }

    // √öJ: Wireframe material cleanup
    this.wireframeMaterial.dispose();

    // Text√∫r√°k cleanup
    Object.values(this.textures).forEach((texture) => {
      texture.dispose();
    });

    this.originalMaterials.clear();
    this.wireframeMaterials.clear();
    this.wireframeLayer.clear();
  }
}
