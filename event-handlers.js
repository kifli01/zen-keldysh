/**
 * Event Handlers
 * UI interakci√≥k kezel√©se
 * v2.0.0 - Dual Color Picker (Fa + M≈±f≈±)
 */

// Glob√°lis iro.js color picker v√°ltoz√≥k
let woodColorPicker = null;   // Fa sz√≠nv√°laszt√≥
let grassColorPicker = null;  // M≈±f≈± sz√≠nv√°laszt√≥

// Event listener-ek be√°ll√≠t√°sa
function setupEventListeners({
  exploder,
  viewModeManager,
  sceneManager,
  elementManager,
  allMeshes,
}) {
  // Sz√©tszed√©s gomb
  const explodeBtn = document.getElementById("toggle-explode");
  if (explodeBtn) {
    explodeBtn.addEventListener("click", function () {
      exploder.toggle(allMeshes, elementManager.getAllElements());

      // Slider szinkroniz√°l√°sa
      const explodeSlider = document.getElementById("explode-slider");
      if (explodeSlider) {
        explodeSlider.value = exploder.getState().isExploded ? 1000 : 0;
      }

      // Gomb ikon friss√≠t√©se
      if (exploder.getState().isExploded) {
        explodeBtn.className = "icon-box";
      } else {
        explodeBtn.className = "icon-layers";
      }
    });
  }

  // Explode slider kezel√©se
  const explodeSlider = document.getElementById("explode-slider");
  if (explodeSlider) {
    explodeSlider.addEventListener("input", function () {
      const sliderValue = parseInt(this.value); // 0-1000
      const percentage = (sliderValue / 1000) * 100; // 0-100%

      // Exploder szint be√°ll√≠t√°sa
      exploder.setExplodeLevel(percentage, allMeshes, elementManager.getAllElements());

      // Toggle gomb szinkroniz√°l√°sa
      const explodeBtn = document.getElementById("toggle-explode");
      if (explodeBtn) {
        if (percentage > 0) {
          explodeBtn.className = "icon-box";
        } else {
          explodeBtn.className = "icon-layers";
        }
      }

      console.log(`üéöÔ∏è Slider: ${sliderValue}/1000 (${percentage.toFixed(1)}%)`);
    });

    // Slider kezdeti √©rt√©k√©nek be√°ll√≠t√°sa az exploder √°llapot alapj√°n
    const currentLevel = exploder.getExplodeLevel();
    explodeSlider.value = (currentLevel / 100) * 1000;
  }

  // N√©zet v√°lt√°s gomb
  const viewModeBtn = document.getElementById("toggle-view-mode");
  viewModeBtn.className = viewModeManager.getCurrentMode() === "realistic" ? 'icon-codepen' : 'icon-palette'

  if (viewModeBtn) {
    viewModeBtn.addEventListener("click", function () {
      console.log("--- MYDEBUG", "viewModeBtn ", viewModeManager.getCurrentMode())
      viewModeManager.toggle(allMeshes, elementManager.getAllElements());
      viewModeBtn.className = viewModeManager.getCurrentMode() === "blueprint" ? 'icon-codepen' : 'icon-palette'
    });
  }

  // Koordin√°ta rendszer toggle gomb
  const coordBtn = document.getElementById("toggle-coordinates");
  if (coordBtn) {
    coordBtn.addEventListener("click", function () {
      const isVisible = sceneManager.toggleCoordinateSystem();
      coordBtn.className = isVisible ? "icon-eye-closed" : "icon-axis-3d";
    });
  }

  // Bal oldali panel toggle gomb
  const leftPanelBtn = document.getElementById("toggle-left-panel");
  if (leftPanelBtn) {
    leftPanelBtn.addEventListener("click", function () {
      toggleLeftPanel();
    });
  }

  // Dual Color Picker inicializ√°l√°sa
  initializeColorPickers();

  // FA SZ√çN GOMBOK
  const saveWoodColorBtn = document.getElementById("save-color-btn");
  if (saveWoodColorBtn) {
    saveWoodColorBtn.addEventListener("click", function () {
      saveCurrentWoodColor();
    });
  }

  const resetWoodColorBtn = document.getElementById("reset-color-btn");
  if (resetWoodColorBtn) {
    resetWoodColorBtn.addEventListener("click", function () {
      resetWoodToDefaultColor();
    });
  }

  const saveWoodPresetBtn = document.getElementById("save-as-preset-btn");
  if (saveWoodPresetBtn) {
    saveWoodPresetBtn.addEventListener("click", saveCurrentWoodAsPreset);
  }

  // M≈∞F≈∞ SZ√çN GOMBOK
  const saveGrassColorBtn = document.getElementById("save-grass-color-btn");
  if (saveGrassColorBtn) {
    saveGrassColorBtn.addEventListener("click", function () {
      saveCurrentGrassColor();
    });
  }

  const resetGrassColorBtn = document.getElementById("reset-grass-color-btn");
  if (resetGrassColorBtn) {
    resetGrassColorBtn.addEventListener("click", function () {
      resetGrassToDefaultColor();
    });
  }

  const saveGrassPresetBtn = document.getElementById("save-grass-preset-btn");
  if (saveGrassPresetBtn) {
    saveGrassPresetBtn.addEventListener("click", saveCurrentGrassAsPreset);
  }

  // Summary panel toggle gomb
  const summaryBtn = document.getElementById("toggle-summary-panel");
  if (summaryBtn) {
    summaryBtn.addEventListener("click", function () {
      toggleSummaryPanel();
    });
  }

  // Koordin√°ta gomb kezdeti √°llapot K√âNYSZER√çTETT be√°ll√≠t√°sa
  if (coordBtn) {
    // K√âNYSZER√çTETT kikapcsolt √°llapot - ikon m√°r a HTML-ben van
    console.log("Koordin√°ta gomb K√âNYSZER√çTVE kikapcsolt √°llapotra √°ll√≠tva");
  }

  // Alaphelyzet gomb
  const resetBtn = document.getElementById("reset-view");
  if (resetBtn) {
    resetBtn.addEventListener("click", function () {
      sceneManager.resetView();
    });
  }

  // Zoom gombok
  const zoomInBtn = document.getElementById("zoom-in");
  if (zoomInBtn) {
    zoomInBtn.addEventListener("click", function () {
      sceneManager.zoomIn();
    });
  }

  const zoomOutBtn = document.getElementById("zoom-out");
  if (zoomOutBtn) {
    zoomOutBtn.addEventListener("click", function () {
      sceneManager.zoomOut();
    });
  }

  // GLTF Export gomb
  const exportBtn = document.getElementById("export-gltf");
  if (exportBtn) {
    exportBtn.addEventListener("click", function () {
      exportGLTF(false, { exploder, sceneManager, elementManager, allMeshes });
    });
  }

  // N√©zet be√°ll√≠t√°s gombok
  const viewTopBtn = document.getElementById("view-top");
  if (viewTopBtn) {
    viewTopBtn.addEventListener("click", function () {
      sceneManager.setTopView();
    });
  }

  const viewBottomBtn = document.getElementById("view-bottom");
  if (viewBottomBtn) {
    viewBottomBtn.addEventListener("click", function () {
      sceneManager.setBottomView();
    });
  }

  const viewFrontBtn = document.getElementById("view-front");
  if (viewFrontBtn) {
    viewFrontBtn.addEventListener("click", function () {
      sceneManager.setFrontView();
    });
  }

  const viewBackBtn = document.getElementById("view-back");
  if (viewBackBtn) {
    viewBackBtn.addEventListener("click", function () {
      sceneManager.setBackView();
    });
  }

  const viewLeftBtn = document.getElementById("view-left");
  if (viewLeftBtn) {
    viewLeftBtn.addEventListener("click", function () {
      sceneManager.setLeftView();
    });
  }

  const viewRightBtn = document.getElementById("view-right");
  if (viewRightBtn) {
    viewRightBtn.addEventListener("click", function () {
      sceneManager.setRightView();
    });
  }

  console.log("‚úÖ Event listener-ek be√°ll√≠tva v2.0.0 - Dual Color Picker integr√°ci√≥val");
}

// =============================================================================
// DUAL COLOR PICKER INICIALIZ√ÅL√ÅS
// =============================================================================

function initializeColorPickers() {
  // Ellen≈ërizz√ºk, hogy az iro.js bet√∂lt≈ëd√∂tt-e
  if (typeof iro === 'undefined') {
    console.error("‚ùå iro.js nem t√∂lt≈ëd√∂tt be! Ellen≈ërizd a CDN-t.");
    return;
  }

  // FA COLOR PICKER inicializ√°l√°sa
  initializeWoodColorPicker();
  
  // M≈∞F≈∞ COLOR PICKER inicializ√°l√°sa  
  initializeGrassColorPicker();
}

function initializeWoodColorPicker() {
  const pickerContainer = document.getElementById("iro-color-picker");
  if (!pickerContainer) {
    console.error("‚ùå iro-color-picker container nem tal√°lhat√≥!");
    return;
  }

  try {
    // FA SliderPicker l√©trehoz√°sa
    woodColorPicker = new iro.ColorPicker("#iro-color-picker", {
      width: 390, // Teljes panel sz√©less√©g m√≠nusz padding
      color: "#d3e3ff", // Alap√©rtelmezett fa sz√≠n
      borderWidth: 0, // Nincs border
      layout: [
        {
          component: iro.ui.Box,
        },
        {
          component: iro.ui.Slider,
          options: {
            id: 'hue-slider',
            sliderType: 'hue'
          }
        }
      ]
    });

    // FA Color change event listener
    woodColorPicker.on('color:change', function(color) {
      const hexString = color.hexString; // pl. "#ff5722"
      const hexNumber = parseInt(hexString.substring(1), 16); // 0xff5722
      
      console.log(`üé® FA sz√≠nv√°ltoz√°s: ${hexString} -> 0x${hexNumber.toString(16)}`);
      
      // UI friss√≠t√©se
      updateWoodColorPreview(color);
      
      // Fa sz√≠n v√°ltoztat√°sa
      if (window.changeWoodColor) {
        window.changeWoodColor(hexNumber);
      } else {
        console.warn("changeWoodColor f√ºggv√©ny nem tal√°lhat√≥");
      }
    });

    // Kezdeti fa color preview be√°ll√≠t√°sa
    updateWoodColorPreview(woodColorPicker.color);
    loadWoodPresetsToUI();
    
    console.log("‚úÖ FA iro.js Color Picker inicializ√°lva");
    
  } catch (error) {
    console.error("‚ùå FA iro.js Color Picker inicializ√°l√°si hiba:", error);
  }
}

function initializeGrassColorPicker() {
  const grassPickerContainer = document.getElementById("iro-grass-color-picker");
  if (!grassPickerContainer) {
    console.error("‚ùå iro-grass-color-picker container nem tal√°lhat√≥!");
    return;
  }

  try {
    // M≈∞F≈∞ SliderPicker l√©trehoz√°sa
    grassColorPicker = new iro.ColorPicker("#iro-grass-color-picker", {
      width: 390, // Teljes panel sz√©less√©g m√≠nusz padding
      color: "#95c5ff", // Alap√©rtelmezett m≈±f≈± sz√≠n
      borderWidth: 0, // Nincs border
      layout: [
        {
          component: iro.ui.Box,
        },
        {
          component: iro.ui.Slider,
          options: {
            id: 'hue-slider',
            sliderType: 'hue'
          }
        }
      ]
    });

    // M≈∞F≈∞ Color change event listener
    grassColorPicker.on('color:change', function(color) {
      const hexString = color.hexString; // pl. "#00ff00"
      const hexNumber = parseInt(hexString.substring(1), 16); // 0x00ff00
      
      console.log(`üå± M≈∞F≈∞ sz√≠nv√°ltoz√°s: ${hexString} -> 0x${hexNumber.toString(16)}`);
      
      // UI friss√≠t√©se
      updateGrassColorPreview(color);
      
      // M≈±f≈± sz√≠n v√°ltoztat√°sa
      if (window.changeGrassColor) {
        window.changeGrassColor(hexNumber);
      } else {
        console.warn("changeGrassColor f√ºggv√©ny nem tal√°lhat√≥");
      }
    });

    // Kezdeti m≈±f≈± color preview be√°ll√≠t√°sa
    updateGrassColorPreview(grassColorPicker.color);
    loadGrassPresetsToUI();
    
    console.log("‚úÖ M≈∞F≈∞ iro.js Color Picker inicializ√°lva");
    
  } catch (error) {
    console.error("‚ùå M≈∞F≈∞ iro.js Color Picker inicializ√°l√°si hiba:", error);
  }
}

// =============================================================================
// FA SZ√çN KEZEL√âS
// =============================================================================

// FA Color preview √©s hex √©rt√©k friss√≠t√©se
function updateWoodColorPreview(color) {
  // Color preview friss√≠t√©se (ha van)
  const colorPreview = document.getElementById("color-preview");
  if (colorPreview) {
    colorPreview.style.backgroundColor = color.rgbaString;
  }
  
  // Hex √©rt√©k friss√≠t√©se
  const hexValue = document.getElementById("hex-value");
  if (hexValue) {
    hexValue.textContent = color.hexString.split("#").join("0x");
  }
}

// FA Preset-ek bet√∂lt√©se UI-ba
async function loadWoodPresetsToUI() {
  if (!window.loadWoodPresetsFromFirebase) {
    console.warn("‚ö†Ô∏è loadWoodPresetsFromFirebase f√ºggv√©ny nem tal√°lhat√≥");
    return;
  }

  const presets = await window.loadWoodPresetsFromFirebase();
  const grid = document.getElementById("preset-grid");
  
  if (!grid) return;
  
  grid.innerHTML = "";
  
  if (presets.length === 0) {
    grid.innerHTML = '<div class="no-presets">Nincs mentett fa sz√≠n</div>';
    return;
  }
  
  presets.forEach(preset => {
    const presetElement = createWoodPresetElement(preset);
    grid.appendChild(presetElement);
  });
}

// FA Preset elem l√©trehoz√°sa
function createWoodPresetElement(preset) {
  const presetDiv = document.createElement('div');
  presetDiv.className = 'preset-item';
  presetDiv.style.backgroundColor = '#' + preset.color.toString(16).padStart(6, '0');
  presetDiv.title = preset.colorString;
  
  // Kattint√°s: sz√≠n alkalmaz√°sa
  presetDiv.addEventListener('click', async () => {
    if (window.changeWoodColor && woodColorPicker) {
      await window.changeWoodColor(preset.color);
      woodColorPicker.color.set('#' + preset.color.toString(16).padStart(6, '0'));
      console.log(`üé® FA preset alkalmazva: ${preset.colorString}`);
    }
  });
  
  // T√∂rl√©s gomb
  const deleteBtn = document.createElement('button');
  deleteBtn.className = 'preset-delete';
  deleteBtn.innerHTML = '√ó';
  deleteBtn.title = 'Preset t√∂rl√©se';
  
  deleteBtn.addEventListener('click', async (e) => {
    e.stopPropagation();
    if (!confirm('Biztosan t√∂r√∂lni szeretn√©d ezt a fa sz√≠nt?')) return;
    const success = await window.deleteWoodPresetFromFirebase(preset.id);
    if (success) await loadWoodPresetsToUI();
  });

  presetDiv.appendChild(deleteBtn);
  return presetDiv;
}

// FA Preset ment√©s
async function saveCurrentWoodAsPreset() {
  if (!woodColorPicker) return;
  
  const hexNumber = parseInt(woodColorPicker.color.hexString.substring(1), 16);
  const success = await window.saveWoodPresetToFirebase(hexNumber);
  
  if (success) {
    await loadWoodPresetsToUI();
    
    const saveBtn = document.getElementById("save-as-preset-btn");
    if (saveBtn) {
      const originalText = saveBtn.innerHTML;
      saveBtn.innerHTML = '<i data-lucide="check"></i>';
      saveBtn.disabled = true;
      
      if (typeof lucide !== 'undefined') lucide.createIcons();
      
      setTimeout(() => {
        saveBtn.innerHTML = originalText;
        saveBtn.disabled = false;
        if (typeof lucide !== 'undefined') lucide.createIcons();
      }, 2000);
    }
  }
}

// FA Eredeti sz√≠nre vissza√°ll√≠t√°s
function resetWoodToDefaultColor() {
  console.log("üîÑ FA sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre...");
  
  // resetWoodColor haszn√°lata (color-manager.js)
  if (window.resetWoodColor) {
    const success = window.resetWoodColor();
    
    if (success) {
      // iro.js picker friss√≠t√©se az eredeti sz√≠nre
      if (woodColorPicker) {
        woodColorPicker.color.set("#d3e3ff"); // Alap√©rtelmezett fa sz√≠n
        console.log("‚úÖ FA iro.js picker friss√≠tve az alap√©rtelmezettre");
      }
      
      // Vizu√°lis visszajelz√©s - gomb anim√°ci√≥
      const resetBtn = document.getElementById("reset-color-btn");
      if (resetBtn) {
        const originalText = resetBtn.innerHTML;
        resetBtn.innerHTML = '<i data-lucide="check"></i>';
        resetBtn.disabled = true;
        
        // Lucide ikon friss√≠t√©se
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        
        // 2 m√°sodperc ut√°n vissza√°ll√≠t√°s
        setTimeout(() => {
          resetBtn.innerHTML = originalText;
          resetBtn.disabled = false;
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
        }, 2000);
      }
      
      console.log("‚úÖ FA sz√≠n vissza√°ll√≠tva alap√©rtelmezettre");
    } else {
      console.error("‚ùå FA sz√≠n reset sikertelen");
    }
  } else {
    console.error("‚ùå resetWoodColor f√ºggv√©ny nem tal√°lhat√≥");
  }
}

// FA Aktu√°lis sz√≠n ment√©se
function saveCurrentWoodColor() {
  if (!woodColorPicker) {
    console.warn("‚ö†Ô∏è FA color picker nincs inicializ√°lva");
    return;
  }
  
  const currentColor = woodColorPicker.color;
  const hexString = currentColor.hexString;
  const hexNumber = parseInt(hexString.substring(1), 16);
  
  // saveWoodColor haszn√°lata (color-manager.js)
  if (window.saveWoodColor) {
    const success = window.saveWoodColor(hexNumber);
    
    if (success) {
      console.log(`üíæ FA sz√≠n mentve: ${hexString} (0x${hexNumber.toString(16)})`);
      
      // Vizu√°lis visszajelz√©s - gomb anim√°ci√≥
      const saveBtn = document.getElementById("save-color-btn");
      if (saveBtn) {
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i data-lucide="check"></i>';
        saveBtn.disabled = true;
        
        // Lucide ikon friss√≠t√©se
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        
        // 2 m√°sodperc ut√°n vissza√°ll√≠t√°s
        setTimeout(() => {
          saveBtn.innerHTML = originalText;
          saveBtn.disabled = false;
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
        }, 2000);
      }
    } else {
      console.error("‚ùå FA sz√≠n ment√©se sikertelen");
    }
  } else {
    console.error("‚ùå saveWoodColor f√ºggv√©ny nem tal√°lhat√≥");
  }
}

// =============================================================================
// M≈∞F≈∞ SZ√çN KEZEL√âS
// =============================================================================

// M≈∞F≈∞ Color preview √©s hex √©rt√©k friss√≠t√©se
function updateGrassColorPreview(color) {
  // Color preview friss√≠t√©se (ha van)
  const colorPreview = document.getElementById("grass-color-preview");
  if (colorPreview) {
    colorPreview.style.backgroundColor = color.rgbaString;
  }
  // Hex √©rt√©k friss√≠t√©se
  const hexValue = document.getElementById("grass-hex-value");
  if (hexValue) {
    hexValue.textContent = color.hexString.split("#").join("0x");
  }
}

// M≈∞F≈∞ Preset-ek bet√∂lt√©se UI-ba
async function loadGrassPresetsToUI() {
  if (!window.loadGrassPresetsFromFirebase) {
    console.warn("‚ö†Ô∏è loadGrassPresetsFromFirebase f√ºggv√©ny nem tal√°lhat√≥");
    return;
  }

  const presets = await window.loadGrassPresetsFromFirebase();
  const grid = document.getElementById("grass-preset-grid");
  
  if (!grid) return;
  
  grid.innerHTML = "";
  
  if (presets.length === 0) {
    grid.innerHTML = '<div class="no-presets">Nincs mentett m≈±f≈± sz√≠n</div>';
    return;
  }
  
  presets.forEach(preset => {
    const presetElement = createGrassPresetElement(preset);
    grid.appendChild(presetElement);
  });
}

// M≈∞F≈∞ Preset elem l√©trehoz√°sa
function createGrassPresetElement(preset) {
  const presetDiv = document.createElement('div');
  presetDiv.className = 'preset-item';
  presetDiv.style.backgroundColor = '#' + preset.color.toString(16).padStart(6, '0');
  presetDiv.title = preset.colorString;
  
  // Kattint√°s: sz√≠n alkalmaz√°sa
  presetDiv.addEventListener('click', async () => {
    if (window.changeGrassColor && grassColorPicker) {
      await window.changeGrassColor(preset.color);
      grassColorPicker.color.set('#' + preset.color.toString(16).padStart(6, '0'));
      console.log(`üå± M≈∞F≈∞ preset alkalmazva: ${preset.colorString}`);
    }
  });
  
  // T√∂rl√©s gomb
  const deleteBtn = document.createElement('button');
  deleteBtn.className = 'preset-delete';
  deleteBtn.innerHTML = '√ó';
  deleteBtn.title = 'M≈±f≈± preset t√∂rl√©se';
  
  deleteBtn.addEventListener('click', async (e) => {
    e.stopPropagation();
    if (!confirm('Biztosan t√∂r√∂lni szeretn√©d ezt a m≈±f≈± sz√≠nt?')) return;
    const success = await window.deleteGrassPresetFromFirebase(preset.id);
    if (success) await loadGrassPresetsToUI();
  });

  presetDiv.appendChild(deleteBtn);
  return presetDiv;
}

// M≈∞F≈∞ Preset ment√©s
async function saveCurrentGrassAsPreset() {
  if (!grassColorPicker) return;
  
  const hexNumber = parseInt(grassColorPicker.color.hexString.substring(1), 16);
  const success = await window.saveGrassPresetToFirebase(hexNumber);
  
  if (success) {
    await loadGrassPresetsToUI();
    
    const saveBtn = document.getElementById("save-grass-preset-btn");
    if (saveBtn) {
      const originalText = saveBtn.innerHTML;
      saveBtn.innerHTML = '<i data-lucide="check"></i>';
      saveBtn.disabled = true;
      
      if (typeof lucide !== 'undefined') lucide.createIcons();
      
      setTimeout(() => {
        saveBtn.innerHTML = originalText;
        saveBtn.disabled = false;
        if (typeof lucide !== 'undefined') lucide.createIcons();
      }, 2000);
    }
  }
}

// M≈∞F≈∞ Eredeti sz√≠nre vissza√°ll√≠t√°s
function resetGrassToDefaultColor() {
  console.log("üîÑ M≈∞F≈∞ sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre...");
  
  // resetGrassColor haszn√°lata (color-manager.js)
  if (window.resetGrassColor) {
    const success = window.resetGrassColor();
    
    if (success) {
      // iro.js picker friss√≠t√©se az eredeti sz√≠nre
      if (grassColorPicker) {
        grassColorPicker.color.set("#95c5ff"); // Alap√©rtelmezett m≈±f≈± sz√≠n
        console.log("‚úÖ M≈∞F≈∞ iro.js picker friss√≠tve az alap√©rtelmezettre");
      }
      
      // Vizu√°lis visszajelz√©s - gomb anim√°ci√≥
      const resetBtn = document.getElementById("reset-grass-color-btn");
      if (resetBtn) {
        const originalText = resetBtn.innerHTML;
        resetBtn.innerHTML = '<i data-lucide="check"></i>';
        resetBtn.disabled = true;
        
        // Lucide ikon friss√≠t√©se
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        
        // 2 m√°sodperc ut√°n vissza√°ll√≠t√°s
        setTimeout(() => {
          resetBtn.innerHTML = originalText;
          resetBtn.disabled = false;
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
        }, 2000);
      }
      
      console.log("‚úÖ M≈∞F≈∞ sz√≠n vissza√°ll√≠tva alap√©rtelmezettre");
    } else {
      console.error("‚ùå M≈∞F≈∞ sz√≠n reset sikertelen");
    }
  } else {
    console.error("‚ùå resetGrassColor f√ºggv√©ny nem tal√°lhat√≥");
  }
}

// M≈∞F≈∞ Aktu√°lis sz√≠n ment√©se
function saveCurrentGrassColor() {
  if (!grassColorPicker) {
    console.warn("‚ö†Ô∏è M≈∞F≈∞ color picker nincs inicializ√°lva");
    return;
  }
  
  const currentColor = grassColorPicker.color;
  const hexString = currentColor.hexString;
  const hexNumber = parseInt(hexString.substring(1), 16);
  
  // saveGrassColor haszn√°lata (color-manager.js)
  if (window.saveGrassColor) {
    const success = window.saveGrassColor(hexNumber);
    
    if (success) {
      console.log(`üíæ M≈∞F≈∞ sz√≠n mentve: ${hexString} (0x${hexNumber.toString(16)})`);
      
      // Vizu√°lis visszajelz√©s - gomb anim√°ci√≥
      const saveBtn = document.getElementById("save-grass-color-btn");
      if (saveBtn) {
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i data-lucide="check"></i>';
        saveBtn.disabled = true;
        
        // Lucide ikon friss√≠t√©se
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        
        // 2 m√°sodperc ut√°n vissza√°ll√≠t√°s
        setTimeout(() => {
          saveBtn.innerHTML = originalText;
          saveBtn.disabled = false;
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
        }, 2000);
      }
    } else {
      console.error("‚ùå M≈∞F≈∞ sz√≠n ment√©se sikertelen");
    }
  } else {
    console.error("‚ùå saveGrassColor f√ºggv√©ny nem tal√°lhat√≥");
  }
}

// =============================================================================
// EGY√âB UI FUNKCI√ìK (V√ÅLTOZATLAN)
// =============================================================================

// Bal oldali panel toggle funkcionalit√°s
function toggleLeftPanel() {
  const leftPanel = document.getElementById("left-panel");
  const toggleBtn = document.getElementById("toggle-left-panel");
  
  if (!leftPanel || !toggleBtn) {
    console.warn("Bal oldali panel elemek nem tal√°lhat√≥ak");
    return;
  }
  
  const isHidden = leftPanel.classList.contains("hidden");
  
  if (isHidden) {
    // Panel megjelen√≠t√©se
    leftPanel.classList.remove("hidden");
    leftPanel.classList.add("visible");
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'panel-left-close');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Bal oldali panel megjelen√≠tve");
  } else {
    // Panel elrejt√©se
    leftPanel.classList.remove("visible");
    leftPanel.classList.add("hidden");
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'panel-left-open');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Bal oldali panel elrejtve");
  }
}

// Summary panel toggle funkcionalit√°s
function toggleSummaryPanel() {
  const summaryPanel = document.getElementById("summary-panel");
  const toggleBtn = document.getElementById("toggle-summary-panel");
  const rightSlider = document.getElementById("right-slider");
  
  if (!summaryPanel || !toggleBtn) {
    console.warn("Summary panel elemek nem tal√°lhat√≥ak");
    return;
  }
  
  const isHidden = summaryPanel.classList.contains("hidden");
  
  if (isHidden) {
    // Panel megjelen√≠t√©se
    summaryPanel.classList.remove("hidden");
    summaryPanel.classList.add("visible");
    
    // Slider bentebb cs√∫sztat√°sa
    if (rightSlider) {
      rightSlider.style.right = "470px"; // 450px panel + 20px
    }
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'x');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Summary panel megjelen√≠tve");
  } else {
    // Panel elrejt√©se
    summaryPanel.classList.remove("visible");
    summaryPanel.classList.add("hidden");
    
    // Slider visszacs√∫sztat√°sa
    if (rightSlider) {
      rightSlider.style.right = "20px";
    }
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'panel-right');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Summary panel elrejtve");
  }
}

// GLTF export√°l√°si funkci√≥
async function exportGLTF(
  binary = false,
  { exploder, sceneManager, elementManager, allMeshes }
) {
  try {
    // Ha sz√©tszedett √°llapotban van, √°tmenetileg √°ll√≠tsuk vissza
    const wasExploded = exploder.getState().isExploded;
    const currentLevel = exploder.getExplodeLevel();
    
    if (wasExploded) {
      exploder.setPositionImmediate(
        allMeshes,
        elementManager.getAllElements(),
        false
      );
    }

    // Export
    const result = await sceneManager.exportScene(binary);

    // F√°jl ment√©se
    const filename = binary ? "minigolf-palya.glb" : "minigolf-palya.gltf";
    const link = document.createElement("a");
    link.style.display = "none";
    document.body.appendChild(link);

    const blob = new Blob([result], {
      type: binary ? "application/octet-stream" : "application/json",
    });

    const url = URL.createObjectURL(blob);
    link.href = url;
    link.download = filename;
    link.click();

    // Cleanup
    URL.revokeObjectURL(url);
    document.body.removeChild(link);

    // Vissza√°ll√≠t√°s eredeti √°llapotra
    if (wasExploded) {
      exploder.setExplodeLevel(
        currentLevel,
        allMeshes,
        elementManager.getAllElements()
      );
    }

    console.log(`‚úÖ ${filename} sikeresen export√°lva`);
  } catch (error) {
    console.error("‚ùå GLTF export hiba:", error);
    alert("Hiba t√∂rt√©nt az export√°l√°s sor√°n. L√°sd a konzolt a r√©szletek√©rt.");
  }
}

// =============================================================================
// GLOB√ÅLIS HOZZ√ÅF√âR√âS √âS BACKWARD COMPATIBILITY
// =============================================================================

// Glob√°lis hozz√°f√©r√©s
window.setupEventListeners = setupEventListeners;
window.exportGLTF = exportGLTF;
window.toggleLeftPanel = toggleLeftPanel;
window.toggleSummaryPanel = toggleSummaryPanel;

// DUAL COLOR PICKER F√úGGV√âNYEK
window.initializeColorPickers = initializeColorPickers;
window.initializeWoodColorPicker = initializeWoodColorPicker;
window.initializeGrassColorPicker = initializeGrassColorPicker;

// FA SZ√çN FUNKCI√ìK
window.saveCurrentWoodColor = saveCurrentWoodColor;
window.resetWoodToDefaultColor = resetWoodToDefaultColor;
window.saveCurrentWoodAsPreset = saveCurrentWoodAsPreset;
window.loadWoodPresetsToUI = loadWoodPresetsToUI;
window.updateWoodColorPreview = updateWoodColorPreview;

// M≈∞F≈∞ SZ√çN FUNKCI√ìK
window.saveCurrentGrassColor = saveCurrentGrassColor;
window.resetGrassToDefaultColor = resetGrassToDefaultColor;
window.saveCurrentGrassAsPreset = saveCurrentGrassAsPreset;
window.loadGrassPresetsToUI = loadGrassPresetsToUI;
window.updateGrassColorPreview = updateGrassColorPreview;

// BACKWARD COMPATIBILITY - r√©gi f√ºggv√©nyek tov√°bbra is el√©rhet≈ëek
window.initializeColorPicker = initializeColorPickers; // r√©gi n√©v
window.saveCurrentColor = saveCurrentWoodColor; // r√©gi n√©v
window.resetToDefaultColor = resetWoodToDefaultColor; // r√©gi n√©v
window.saveCurrentColorAsPreset = saveCurrentWoodAsPreset; // r√©gi n√©v
window.updateColorPreview = updateWoodColorPreview; // r√©gi n√©v
window.loadPresetsToUI = loadWoodPresetsToUI; // r√©gi n√©v

console.log('‚úÖ Event Handlers v2.0.0 - Dual Color Picker (Fa + M≈±f≈±) bet√∂ltve');