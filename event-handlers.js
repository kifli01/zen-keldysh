/**
 * Event Handlers
 * UI interakci√≥k kezel√©se
 * v1.17.0 - iro.js Color Picker integr√°ci√≥
 */

// Glob√°lis iro.js color picker v√°ltoz√≥
let colorPicker = null;

// Event listener-ek be√°ll√≠t√°sa
function setupEventListeners({
  exploder,
  viewModeManager,
  sceneManager,
  elementManager,
  allMeshes,
}) {
  // Sz√©tszed√©s gomb
  const explodeBtn = document.getElementById("toggle-explode");
  if (explodeBtn) {
    explodeBtn.addEventListener("click", function () {
      exploder.toggle(allMeshes, elementManager.getAllElements());

      // Slider szinkroniz√°l√°sa
      const explodeSlider = document.getElementById("explode-slider");
      if (explodeSlider) {
        explodeSlider.value = exploder.getState().isExploded ? 1000 : 0;
      }

      // Gomb ikon friss√≠t√©se
      if (exploder.getState().isExploded) {
        explodeBtn.className = "icon-box";
      } else {
        explodeBtn.className = "icon-layers";
      }
    });
  }

  // Explode slider kezel√©se
  const explodeSlider = document.getElementById("explode-slider");
  if (explodeSlider) {
    explodeSlider.addEventListener("input", function () {
      const sliderValue = parseInt(this.value); // 0-1000
      const percentage = (sliderValue / 1000) * 100; // 0-100%

      // Exploder szint be√°ll√≠t√°sa
      exploder.setExplodeLevel(percentage, allMeshes, elementManager.getAllElements());

      // Toggle gomb szinkroniz√°l√°sa
      const explodeBtn = document.getElementById("toggle-explode");
      if (explodeBtn) {
        if (percentage > 0) {
          explodeBtn.className = "icon-box";
        } else {
          explodeBtn.className = "icon-layers";
        }
      }

      console.log(`üéöÔ∏è Slider: ${sliderValue}/1000 (${percentage.toFixed(1)}%)`);
    });

    // Slider kezdeti √©rt√©k√©nek be√°ll√≠t√°sa az exploder √°llapot alapj√°n
    const currentLevel = exploder.getExplodeLevel();
    explodeSlider.value = (currentLevel / 100) * 1000;
  }

  // N√©zet v√°lt√°s gomb
  const viewModeBtn = document.getElementById("toggle-view-mode");
  viewModeBtn.className = viewModeManager.getCurrentMode() === "realistic" ? 'icon-codepen' : 'icon-palette'

  if (viewModeBtn) {
    viewModeBtn.addEventListener("click", function () {
      console.log("--- MYDEBUG", "viewModeBtn ", viewModeManager.getCurrentMode())
      viewModeManager.toggle(allMeshes, elementManager.getAllElements());
      viewModeBtn.className = viewModeManager.getCurrentMode() === "blueprint" ? 'icon-codepen' : 'icon-palette'
    });
  }

  // Koordin√°ta rendszer toggle gomb
  const coordBtn = document.getElementById("toggle-coordinates");
  if (coordBtn) {
    coordBtn.addEventListener("click", function () {
      const isVisible = sceneManager.toggleCoordinateSystem();
      coordBtn.className = isVisible ? "icon-eye-closed" : "icon-axis-3d";
    });
  }

  // Bal oldali panel toggle gomb
  const leftPanelBtn = document.getElementById("toggle-left-panel");
  if (leftPanelBtn) {
    leftPanelBtn.addEventListener("click", function () {
      toggleLeftPanel();
    });
  }

  // iro.js Color Picker inicializ√°l√°sa
  initializeColorPicker();

  // Sz√≠n ment√©s gomb
  const saveColorBtn = document.getElementById("save-color-btn");
  if (saveColorBtn) {
    saveColorBtn.addEventListener("click", function () {
      saveCurrentColor();
    });
  }

  // Sz√≠n reset gomb
  const resetColorBtn = document.getElementById("reset-color-btn");
  if (resetColorBtn) {
    resetColorBtn.addEventListener("click", function () {
      resetToDefaultColor();
    });
  }

  // Summary panel toggle gomb
  const summaryBtn = document.getElementById("toggle-summary-panel");
  if (summaryBtn) {
    summaryBtn.addEventListener("click", function () {
      toggleSummaryPanel();
    });
  }

  // Koordin√°ta gomb kezdeti √°llapot K√âNYSZER√çTETT be√°ll√≠t√°sa
  if (coordBtn) {
    // K√âNYSZER√çTETT kikapcsolt √°llapot - ikon m√°r a HTML-ben van
    console.log("Koordin√°ta gomb K√âNYSZER√çTVE kikapcsolt √°llapotra √°ll√≠tva");
  }

  // Alaphelyzet gomb
  const resetBtn = document.getElementById("reset-view");
  if (resetBtn) {
    resetBtn.addEventListener("click", function () {
      sceneManager.resetView();
    });
  }

  // Zoom gombok
  const zoomInBtn = document.getElementById("zoom-in");
  if (zoomInBtn) {
    zoomInBtn.addEventListener("click", function () {
      sceneManager.zoomIn();
    });
  }

  const zoomOutBtn = document.getElementById("zoom-out");
  if (zoomOutBtn) {
    zoomOutBtn.addEventListener("click", function () {
      sceneManager.zoomOut();
    });
  }

  // GLTF Export gomb
  const exportBtn = document.getElementById("export-gltf");
  if (exportBtn) {
    exportBtn.addEventListener("click", function () {
      exportGLTF(false, { exploder, sceneManager, elementManager, allMeshes });
    });
  }

  // N√©zet be√°ll√≠t√°s gombok
  const viewTopBtn = document.getElementById("view-top");
  if (viewTopBtn) {
    viewTopBtn.addEventListener("click", function () {
      sceneManager.setTopView();
    });
  }

  const viewBottomBtn = document.getElementById("view-bottom");
  if (viewBottomBtn) {
    viewBottomBtn.addEventListener("click", function () {
      sceneManager.setBottomView();
    });
  }

  const viewFrontBtn = document.getElementById("view-front");
  if (viewFrontBtn) {
    viewFrontBtn.addEventListener("click", function () {
      sceneManager.setFrontView();
    });
  }

  const viewBackBtn = document.getElementById("view-back");
  if (viewBackBtn) {
    viewBackBtn.addEventListener("click", function () {
      sceneManager.setBackView();
    });
  }

  const viewLeftBtn = document.getElementById("view-left");
  if (viewLeftBtn) {
    viewLeftBtn.addEventListener("click", function () {
      sceneManager.setLeftView();
    });
  }

  const viewRightBtn = document.getElementById("view-right");
  if (viewRightBtn) {
    viewRightBtn.addEventListener("click", function () {
      sceneManager.setRightView();
    });
  }

  console.log("‚úÖ Event listener-ek be√°ll√≠tva v1.17.0 - iro.js Color Picker integr√°ci√≥val");
}

// iro.js Color Picker inicializ√°l√°sa
function initializeColorPicker() {
  // Ellen≈ërizz√ºk, hogy az iro.js bet√∂lt≈ëd√∂tt-e
  if (typeof iro === 'undefined') {
    console.error("‚ùå iro.js nem t√∂lt≈ëd√∂tt be! Ellen≈ërizd a CDN-t.");
    return;
  }

  const pickerContainer = document.getElementById("iro-color-picker");
  if (!pickerContainer) {
    console.error("‚ùå iro-color-picker container nem tal√°lhat√≥!");
    return;
  }

  try {
    // SliderPicker l√©trehoz√°sa (3 slider: hue, saturation, value - teljes sz√©less√©g≈±ek)
    colorPicker = new iro.ColorPicker("#iro-color-picker", {
      width: 410, // Teljes panel sz√©less√©g m√≠nusz padding
      color: "#d3e3ff", // Alap√©rtelmezett fa sz√≠n
      borderWidth: 0, // Nincs border
      layout: [
        {
          component: iro.ui.Slider,
          options: {
            sliderType: 'hue'
          }
        },
        {
          component: iro.ui.Slider,
          options: {
            sliderType: 'saturation'
          }
        },
        {
          component: iro.ui.Slider,
          options: {
            sliderType: 'value'
          }
        }
      ]
    });

    // Color change event listener
    colorPicker.on('color:change', function(color) {
      const hexString = color.hexString; // pl. "#ff5722"
      const hexNumber = parseInt(hexString.substring(1), 16); // 0xff5722
      
      console.log(`üé® iro.js sz√≠nv√°ltoz√°s: ${hexString} -> 0x${hexNumber.toString(16)}`);
      
      // UI friss√≠t√©se
      updateColorPreview(color);
      
      // Fa sz√≠n v√°ltoztat√°sa
      if (window.changeWoodColor) {
        window.changeWoodColor(hexNumber);
      } else {
        console.warn("changeWoodColor f√ºggv√©ny nem tal√°lhat√≥");
      }
    });

    // Kezdeti color preview be√°ll√≠t√°sa
    updateColorPreview(colorPicker.color);
    
    console.log("‚úÖ iro.js Color Picker inicializ√°lva (sliderPicker layout)");
    
  } catch (error) {
    console.error("‚ùå iro.js Color Picker inicializ√°l√°si hiba:", error);
  }
}

// Color preview √©s hex √©rt√©k friss√≠t√©se
function updateColorPreview(color) {
  // Color preview friss√≠t√©se
  const colorPreview = document.getElementById("color-preview");
  if (colorPreview) {
    colorPreview.style.backgroundColor = color.rgbaString;
  }
  
  // Hex √©rt√©k friss√≠t√©se
  const hexValue = document.getElementById("hex-value");
  if (hexValue) {
    hexValue.textContent = color.hexString.split("#").join("0x");
  }
}

// Bal oldali panel toggle funkcionalit√°s
function toggleLeftPanel() {
  const leftPanel = document.getElementById("left-panel");
  const toggleBtn = document.getElementById("toggle-left-panel");
  
  if (!leftPanel || !toggleBtn) {
    console.warn("Bal oldali panel elemek nem tal√°lhat√≥ak");
    return;
  }
  
  const isVisible = leftPanel.classList.contains("visible");
  
  if (isVisible) {
    // Panel elrejt√©se
    leftPanel.classList.remove("visible");
    leftPanel.classList.add("hidden");
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'panel-left');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Bal oldali panel elrejtve");
  } else {
    // Panel megjelen√≠t√©se
    leftPanel.classList.remove("hidden");
    leftPanel.classList.add("visible");
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'x');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Bal oldali panel megjelen√≠tve");
  }
}

// Summary Panel Toggle funkcionalit√°s
function toggleSummaryPanel() {
  const summaryPanel = document.getElementById("summary-panel");
  const toggleBtn = document.getElementById("toggle-summary-panel");
  const rightSlider = document.getElementById("right-slider");
  
  if (!summaryPanel || !toggleBtn) {
    console.warn("Summary panel elemek nem tal√°lhat√≥ak");
    return;
  }
  
  const isVisible = summaryPanel.classList.contains("visible");
  
  if (isVisible) {
    // Panel elrejt√©se
    summaryPanel.classList.remove("visible");
    summaryPanel.classList.add("hidden");
    
    // Slider visszacs√∫sztat√°sa
    if (rightSlider) {
      rightSlider.style.right = "20px";
    }
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'panel-right');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Summary panel elrejtve");
  } else {
    // Panel megjelen√≠t√©se
    summaryPanel.classList.remove("hidden");
    summaryPanel.classList.add("visible");
    
    // Slider bentebb cs√∫sztat√°sa
    if (rightSlider) {
      rightSlider.style.right = "470px"; // 450px panel + 20px
    }
    
    // Ikon v√°lt√°s
    const icon = toggleBtn.querySelector('i[data-lucide]');
    if (icon) {
      icon.setAttribute('data-lucide', 'x');
      if (typeof lucide !== 'undefined') {
        lucide.createIcons();
      }
    }
    
    console.log("üìã Summary panel megjelen√≠tve");
  }
}

// GLTF export√°l√°si funkci√≥
async function exportGLTF(
  binary = false,
  { exploder, sceneManager, elementManager, allMeshes }
) {
  try {
    // Ha sz√©tszedett √°llapotban van, √°tmenetileg √°ll√≠tsuk vissza
    const wasExploded = exploder.getState().isExploded;
    const currentLevel = exploder.getExplodeLevel();
    
    if (wasExploded) {
      exploder.setPositionImmediate(
        allMeshes,
        elementManager.getAllElements(),
        false
      );
    }

    // Export
    const result = await sceneManager.exportScene(binary);

    // F√°jl ment√©se
    const filename = binary ? "minigolf_palya.glb" : "minigolf_palya.gltf";

    if (binary) {
      saveArrayBuffer(result, filename);
    } else {
      saveString(JSON.stringify(result, null, 2), filename);
    }

    // Ha sz√©tszedett √°llapotban volt, √°ll√≠tsuk vissza
    if (wasExploded) {
      exploder.setExplodeLevel(currentLevel, allMeshes, elementManager.getAllElements());
    }

    console.log(`Export sikeres: ${filename}`);
  } catch (error) {
    console.error("Export hiba:", error);
  }
}

// Seg√©df√ºggv√©nyek a f√°jlok ment√©s√©hez
function saveString(text, filename) {
  const blob = new Blob([text], { type: "text/plain" });
  downloadBlob(blob, filename);
}

function saveArrayBuffer(buffer, filename) {
  const blob = new Blob([buffer], { type: "application/octet-stream" });
  downloadBlob(blob, filename);
}

function downloadBlob(blob, filename) {
  const link = document.createElement("a");
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  link.click();

  // Cleanup
  setTimeout(() => URL.revokeObjectURL(link.href), 1000);
}

// Glob√°lis hozz√°f√©r√©s
window.setupEventListeners = setupEventListeners;
window.exportGLTF = exportGLTF;
window.toggleLeftPanel = toggleLeftPanel;
window.toggleSummaryPanel = toggleSummaryPanel;
window.initializeColorPicker = initializeColorPicker;
window.saveCurrentColor = saveCurrentColor;
window.resetToDefaultColor = resetToDefaultColor;

// Eredeti sz√≠nre vissza√°ll√≠t√°s
function resetToDefaultColor() {
  console.log("üîÑ Sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre...");
  
  // resetWoodColor haszn√°lata (color-manager.js)
  if (window.resetWoodColor) {
    const success = window.resetWoodColor();
    
    if (success) {
      // iro.js picker friss√≠t√©se az eredeti sz√≠nre
      if (colorPicker) {
        colorPicker.color.set("#d3e3ff"); // Alap√©rtelmezett fa sz√≠n
        console.log("‚úÖ iro.js picker friss√≠tve az alap√©rtelmezettre");
      }
      
      // Vizu√°lis visszajelz√©s - gomb anim√°ci√≥
      const resetBtn = document.getElementById("reset-color-btn");
      if (resetBtn) {
        const originalText = resetBtn.innerHTML;
        resetBtn.innerHTML = '<i data-lucide="check"></i>!';
        resetBtn.disabled = true;
        
        // Lucide ikon friss√≠t√©se
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        
        // 2 m√°sodperc ut√°n vissza√°ll√≠t√°s
        setTimeout(() => {
          resetBtn.innerHTML = originalText;
          resetBtn.disabled = false;
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
        }, 2000);
      }
      
      console.log("‚úÖ Sz√≠n vissza√°ll√≠tva alap√©rtelmezettre");
    } else {
      console.error("‚ùå Sz√≠n reset sikertelen");
    }
  } else {
    console.error("‚ùå resetWoodColor f√ºggv√©ny nem tal√°lhat√≥");
  }
}

// Aktu√°lis sz√≠n ment√©se
function saveCurrentColor() {
  if (!colorPicker) {
    console.warn("‚ö†Ô∏è Color picker nincs inicializ√°lva");
    return;
  }
  
  const currentColor = colorPicker.color;
  const hexString = currentColor.hexString;
  const hexNumber = parseInt(hexString.substring(1), 16);
  
  // saveWoodColor haszn√°lata (color-manager.js)
  if (window.saveWoodColor) {
    const success = window.saveWoodColor(hexNumber);
    
    if (success) {
      console.log(`üíæ Sz√≠n mentve: ${hexString} (0x${hexNumber.toString(16)})`);
      
      // Vizu√°lis visszajelz√©s - gomb anim√°ci√≥
      const saveBtn = document.getElementById("save-color-btn");
      if (saveBtn) {
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = '<i data-lucide="check"></i>';
        saveBtn.disabled = true;
        
        // Lucide ikon friss√≠t√©se
        if (typeof lucide !== 'undefined') {
          lucide.createIcons();
        }
        
        // 2 m√°sodperc ut√°n vissza√°ll√≠t√°s
        setTimeout(() => {
          saveBtn.innerHTML = originalText;
          saveBtn.disabled = false;
          if (typeof lucide !== 'undefined') {
            lucide.createIcons();
          }
        }, 2000);
      }
    } else {
      console.error("‚ùå Sz√≠n ment√©se sikertelen");
    }
  } else {
    console.error("‚ùå saveWoodColor f√ºggv√©ny nem tal√°lhat√≥");
  }
}