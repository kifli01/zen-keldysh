/**
 * Minigolf P√°lya Viewer - F≈ëalkalmaz√°s
 * v1.12.0 - Async Normal Maps Integration
 */

// ES6 importok
import * as THREE from "three";
import { GLTFExporter } from "three/examples/jsm/exporters/GLTFExporter.js";
import { CSS2DRenderer, CSS2DObject } from "three/examples/jsm/renderers/CSS2DRenderer.js";
import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js"; // HDR loader
import * as ThreeMeshBVH from "three-mesh-bvh";
import * as ThreeBVHCSG from "three-bvh-csg";

// THREE.js glob√°lisan el√©rhet≈ëv√© t√©tele
window.THREE = THREE;
window.GLTFExporter = GLTFExporter;

// CSS2DRenderer k√ºl√∂n glob√°lis v√°ltoz√≥k√©nt
window.CSS2DRenderer = CSS2DRenderer;
window.CSS2DObject = CSS2DObject;

// Glob√°lis v√°ltoz√≥k
let elementManager;
let sceneManager;
let geometryBuilder;
let exploder;
let viewModeManager;
let csgManager;
let textureManager;
// Refaktor√°lt manager objektumok el√©rhet≈ës√©ge
let wireframeManager;
let materialManager;
let lightingManager;
let hdrEnvironmentManager;
let postProcessingManager;
let allMeshes;

// CSG inicializ√°l√°s (v√°ltozatlan)
function initializeCSG() {
  try {
    // K√∂nyvt√°rak hozz√°f√©rhet≈ës√©ge ellen≈ërz√©se
    if (!ThreeMeshBVH || !ThreeBVHCSG) {
      console.warn("CSG k√∂nyvt√°rak nem t√∂lt≈ëdtek be, fallback m√≥dra v√°lt√°s");
      return false;
    }

    // Glob√°lis objektumok l√©trehoz√°sa kompatibilit√°s miatt
    window.MeshBVH = ThreeMeshBVH.MeshBVH;
    window.CSGAPI = ThreeBVHCSG;

    // CSG wrapper objektum
    window.CSG = {
      // Alapvet≈ë oszt√°lyok
      Brush: ThreeBVHCSG.Brush,
      Evaluator: ThreeBVHCSG.Evaluator,

      // Oper√°ci√≥k
      ADDITION: ThreeBVHCSG.ADDITION,
      SUBTRACTION: ThreeBVHCSG.SUBTRACTION,
      INTERSECTION: ThreeBVHCSG.INTERSECTION,
      DIFFERENCE: ThreeBVHCSG.DIFFERENCE,

      // Kompatibilit√°si funkci√≥k
      fromMesh: (mesh) => {
        const brush = new ThreeBVHCSG.Brush(mesh.geometry, mesh.material);
        brush.position.copy(mesh.position);
        brush.rotation.copy(mesh.rotation);
        brush.scale.copy(mesh.scale);
        brush.updateMatrixWorld();
        return brush;
      },

      toMesh: (brush, matrix) => {
        const mesh = new THREE.Mesh(brush.geometry, brush.material);
        if (matrix) mesh.applyMatrix4(matrix);
        return mesh;
      },
    };

    console.log("CSG k√∂nyvt√°rak sikeresen inicializ√°lva (ES6 modules)");
    return true;
  } catch (error) {
    console.error("CSG inicializ√°l√°s hiba:", error);
    return false;
  }
}

// Shader el√©rhet≈ës√©g ellen≈ërz√©se (v√°ltozatlan)
function checkShaderAvailability() {
  const shaders = {
    toonVertex: document.getElementById("toonVertexShader"),
    toonFragment: document.getElementById("toonFragmentShader"),
  };

  const missing = Object.entries(shaders)
    .filter(([name, element]) => !element)
    .map(([name]) => name);

  if (missing.length === 0) {
    console.log("‚úÖ Minden shader el√©rhet≈ë");
    return true;
  } else {
    console.warn("‚ö†Ô∏è Hi√°nyz√≥ shaderek:", missing);
    return false;
  }
}

// CSS2DRenderer el√©rhet≈ës√©g ellen≈ërz√©se (v√°ltozatlan)
function checkCSS2DAvailability() {
  if (window.CSS2DRenderer && window.CSS2DObject) {
    console.log("‚úÖ CSS2DRenderer el√©rhet≈ë");
    return true;
  } else {
    console.warn("‚ö†Ô∏è CSS2DRenderer nem el√©rhet≈ë, koordin√°ta c√≠mk√©k n√©lk√ºl");
    return false;
  }
}

// √öJ v1.12.0: F≈ëalkalmaz√°s inicializ√°l√°sa async normal maps-ekkel
async function initialize() {
  try {
    console.log("üöÄ Inicializ√°l√°s kezdete v1.12.0 - Normal Maps Integration...");

    // K√∂nyvt√°rak ellen≈ërz√©se
    const csgAvailable = initializeCSG();
    const shadersAvailable = checkShaderAvailability();
    const css2dAvailable = checkCSS2DAvailability();

    // √öJ v1.12.0: TextureManager els≈ë inicializ√°l√°sa
    console.log("üé® TextureManager inicializ√°l√°sa...");
    textureManager = new TextureManager();
    textureManager.initialize();
    console.log("‚úÖ TextureManager v1.6.0 inicializ√°lva");

    // Alapvet≈ë manager objektumok l√©trehoz√°sa
    elementManager = new ElementManager();
    sceneManager = new SceneManager(
      document.getElementById("viewer-container")
    );
    
    // √öJ v1.12.0: GeometryBuilder + TextureManager integr√°ci√≥
    console.log("üîß GeometryBuilder + TextureManager integr√°ci√≥...");
    geometryBuilder = new GeometryBuilder();
    geometryBuilder.setTextureManager(textureManager); // ‚Üê √öJ!
    
    exploder = new Exploder();
    
    // Refaktor√°lt ViewModeManager
    viewModeManager = new ViewModeManager(sceneManager, geometryBuilder, textureManager);

    // HDR Environment Manager l√©trehoz√°sa
    hdrEnvironmentManager = new HDREnvironmentManager(sceneManager, textureManager);
    
    // Post-Processing Manager l√©trehoz√°sa (ha el√©rhet≈ë)
    if (typeof PostProcessingManager !== 'undefined') {
      postProcessingManager = new PostProcessingManager(sceneManager);
    } else {
      console.warn("PostProcessingManager nem el√©rhet≈ë");
    }
    
    // Specializ√°lt manager objektumok el√©rhet≈ëv√© t√©tele
    wireframeManager = viewModeManager.getWireframeManager();
    materialManager = viewModeManager.getMaterialManager();
    lightingManager = viewModeManager.getLightingManager();

    // Keresztreferenci√°k be√°ll√≠t√°sa
    exploder.setViewModeManager(viewModeManager);
    viewModeManager.setExploder(exploder);
    console.log("‚úÖ Keresztreferenci√°k be√°ll√≠tva");

    // Shader t√°mogat√°s be√°ll√≠t√°sa
    if (shadersAvailable) {
      viewModeManager.setShadersAvailable(true);
      console.log("Custom shader t√°mogat√°s enged√©lyezve");
    }

    // CSG Manager l√©trehoz√°sa ha el√©rhet≈ë
    if (csgAvailable && typeof CSGManager !== "undefined") {
      csgManager = new CSGManager();
      geometryBuilder.setCSGManager(csgManager);
      console.log("CSG Manager inicializ√°lva");
    } else {
      console.log("CSG Manager nem el√©rhet≈ë, hagyom√°nyos m√≥dban folytat√°s");
    }

    console.log("Manager objektumok l√©trehozva");

    // Scene setup
    sceneManager.setup();
    console.log("Scene setup k√©sz");

    // Elemek bet√∂lt√©se
    console.log("üì¶ Minigolf elemek bet√∂lt√©se...");
    minigolfElements = await window.loadModels();
    minigolfElements.forEach((element) => {
      elementManager.addElement(element);
    });
    console.log(`‚úÖ ${minigolfElements.length} elem bet√∂ltve`);

    // √öJ v1.12.0: Async Mesh-ek l√©trehoz√°sa Normal Maps-ekkel
    console.log("üé® Async PBR Mesh-ek l√©trehoz√°sa Normal Maps-ekkel...");
    const elements = elementManager.getAllElements();
    
    // KRITIKUS: Async h√≠v√°s!
    allMeshes = await geometryBuilder.createAllMeshes(elements);
    console.log(`‚úÖ ${allMeshes.size} PBR mesh l√©trehozva Normal Maps-ekkel`);

    // √öJ v1.12.0: PBR Statistics logging
    logPBRStatistics(allMeshes);

    // Mesh-ek hozz√°ad√°sa a scene-hez
    sceneManager.addAllMeshes(allMeshes);
    console.log("Mesh-ek hozz√°adva a scene-hez");

    // ViewModeManager inicializ√°l√°sa
    viewModeManager.saveOriginalMaterials(allMeshes);
    console.log("Eredeti anyagok mentve");

    // Exploder inicializ√°l√°sa
    exploder.saveOriginalPositions(allMeshes);
    console.log("Eredeti poz√≠ci√≥k mentve");

    // ALAP√âRTELMEZETT: Sz√≠nes n√©zet be√°ll√≠t√°sa (PBR Normal Maps-ekkel)
    console.log("üåü Sz√≠nes PBR n√©zet aktiv√°l√°sa Normal Maps-ekkel...");
    viewModeManager.switchToRealistic(
      allMeshes,
      elementManager.getAllElements()
    );
    console.log("‚úÖ Sz√≠nes PBR n√©zet be√°ll√≠tva alap√©rtelmezettk√©nt");

    // HDR Environment inicializ√°l√°sa
    console.log("üåø Meadow HDR Environment inicializ√°l√°sa...");
    try {
      const hdrInitialized = await hdrEnvironmentManager.initialize();
      
      if (hdrInitialized) {
        console.log("‚úÖ HDR Manager inicializ√°lva, meadow HDR bet√∂lt√©se...");
        
        try {
          await hdrEnvironmentManager.loadHDREnvironment();
          // Minden mesh environment friss√≠t√©se (most m√°r Normal Maps-ekkel!)
          hdrEnvironmentManager.updateAllMeshesEnvironment();
          console.log("üåü Meadow HDR Environment + Normal Maps aktiv√°lva!");
        } catch (hdrError) {
          console.warn("‚ö†Ô∏è Meadow HDR bet√∂lt√©s sikertelen, fallback haszn√°lata:", hdrError);
        }
      } else {
        console.warn("‚ùå HDR Environment Manager nem inicializ√°lhat√≥");
      }
    } catch (error) {
      console.error("HDR inicializ√°l√°si hiba:", error);
    }

    // Post-Processing (Bloom + SSAO) inicializ√°l√°sa
    if (postProcessingManager) {
      console.log("‚ú® Post-Processing (Bloom + SSAO) inicializ√°l√°sa...");
      try {
        const postProcessingInitialized = await postProcessingManager.initialize();
        
        if (postProcessingInitialized) {
          // Bloom bekapcsol√°sa 'subtle' preset-tel
          postProcessingManager.setBloomPreset('subtle');
          postProcessingManager.setBloomEnabled(true);
          
          // SSAO bekapcsol√°sa 'architectural' preset-tel
          postProcessingManager.setSSAOPreset('architectural');
          postProcessingManager.setSSAOEnabled(true);
          
          console.log("üåü Bloom + SSAO Effect aktiv√°lva Normal Maps-ekkel!");
        } else {
          console.warn("‚ùå Post-Processing nem inicializ√°lhat√≥");
        }
      } catch (error) {
        console.error("Post-Processing inicializ√°l√°si hiba:", error);
      }
    } else {
      console.log("Post-Processing Manager nincs el√©rhet≈ë, folytat√°s n√©lk√ºle");
    }

    // Summary gener√°l√°sa
    const summary = elementManager.generateSummary();
    const summaryPanel = document.getElementById("summary-panel");
    summaryGenerator.renderFullSummary(
      summaryPanel,
      summary,
      elementManager.version
    );
    console.log("Summary gener√°lva");

    // Event listener-ek be√°ll√≠t√°sa
    if (typeof setupEventListeners === "function") {
      setupEventListeners({
        exploder,
        viewModeManager,
        sceneManager,
        elementManager,
        allMeshes,
      });
      console.log("Event listener-ek be√°ll√≠tva");
    }

    console.log("üéâ Inicializ√°l√°s sikeres v1.12.0 - Normal Maps Integration!");
    
    // √öJ v1.12.0: Teljes rendszer status
    logSystemStatus();
    
  } catch (error) {
    console.error("‚ùå Hiba az inicializ√°l√°s sor√°n:", error);
    
    // √öJ v1.12.0: Error recovery - fallback inicializ√°l√°s Normal Maps n√©lk√ºl
    console.log("üîÑ Error recovery - fallback inicializ√°l√°s...");
    await initializeFallback();
  }
}

// √öJ v1.12.0: PBR Statistics logging
function logPBRStatistics(meshes) {
  let pbrCount = 0;
  let legacyCount = 0;
  let totalMaps = {
    diffuse: 0,
    normal: 0,
    roughness: 0,
    metalness: 0,
    ao: 0
  };

  meshes.forEach((mesh, elementId) => {
    if (mesh.userData.materialType === 'PBR') {
      pbrCount++;
      
      // Map statistics
      if (mesh.userData.hasDiffuseMap) totalMaps.diffuse++;
      if (mesh.userData.hasNormalMap) totalMaps.normal++;
      if (mesh.userData.hasRoughnessMap) totalMaps.roughness++;
      if (mesh.userData.hasMetalnessMap) totalMaps.metalness++;
      if (mesh.userData.hasAOMap) totalMaps.ao++;
      
      // GROUP gyerekek sz√°m√≠t√°sa
      if (mesh.userData.isGroup) {
        mesh.children.forEach(child => {
          if (child.userData.hasNormalMap) totalMaps.normal++;
          if (child.userData.hasRoughnessMap) totalMaps.roughness++;
          if (child.userData.hasMetalnessMap) totalMaps.metalness++;
          if (child.userData.hasAOMap) totalMaps.ao++;
        });
      }
    } else {
      legacyCount++;
    }
  });

  console.log("üìä PBR STATISTICS v1.12.0:");
  console.log(`   Materials: ${pbrCount} PBR, ${legacyCount} Legacy`);
  console.log(`   Diffuse Maps: ${totalMaps.diffuse}`);
  console.log(`   Normal Maps: ${totalMaps.normal} ‚ú®`);
  console.log(`   Roughness Maps: ${totalMaps.roughness}`);
  console.log(`   Metalness Maps: ${totalMaps.metalness}`);
  console.log(`   AO Maps: ${totalMaps.ao}`);
  console.log(`   Total Texture Maps: ${Object.values(totalMaps).reduce((a, b) => a + b, 0)}`);
}

// √öJ v1.12.0: Teljes rendszer status
function logSystemStatus() {
  console.log("üéØ SYSTEM STATUS v1.12.0:");
  console.log(`   TextureManager: ${textureManager.getStatus().version}`);
  console.log(`   GeometryBuilder: ${geometryBuilder.getPBRStatus().version}`);
  console.log(`   Material Cache: ${geometryBuilder.getMaterialCacheStats().cacheSize} items`);
  console.log(`   HDR Environment: ${hdrEnvironmentManager.getStatus().isLoaded ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Post-Processing: ${postProcessingManager ? '‚úÖ' : '‚ùå'}`);
}

// √öJ v1.12.0: Fallback inicializ√°l√°s Normal Maps hib√°k eset√©n
async function initializeFallback() {
  try {
    console.log("üîÑ Fallback inicializ√°l√°s Normal Maps n√©lk√ºl...");
    
    // Egyszer≈± mesh-ek l√©trehoz√°sa legacy m√≥dban
    const elements = elementManager.getAllElements();
    
    // Disable PBR minden material-ban
    elements.forEach(element => {
      if (element.material && element.material.enablePBR) {
        element.material.enablePBR = false;
        console.log(`üîÑ PBR disabled: ${element.id}`);
      }
    });
    
    // Fallback mesh creation
    allMeshes = await geometryBuilder.createAllMeshes(elements);
    sceneManager.addAllMeshes(allMeshes);
    
    console.log("‚úÖ Fallback inicializ√°l√°s sikeres");
    
  } catch (fallbackError) {
    console.error("‚ùå Fallback inicializ√°l√°s is sikertelen:", fallbackError);
  }
}

// Glob√°lis hozz√°f√©r√©s debug-hoz (b≈ëv√≠tett v1.12.0)
window.debugInfo = () => {
  console.log("=== DEBUG INFO v1.12.0 ===");
  console.log("Element Manager:", elementManager?.getAllElements().length + " elem");
  console.log("Scene Manager:", sceneManager?.getSceneInfo());
  console.log("Exploder:", exploder?.getState());
  console.log("View Mode Manager:", viewModeManager?.getViewModeInfo());
  console.log("Mesh-ek:", allMeshes?.size);
  console.log("S√∫ly:", elementManager?.getTotalWeight().toFixed(2) + " g");
  
  // CSG debug info
  if (csgManager) {
    console.log("CSG Manager:", csgManager.getDebugInfo());
  }
  
  // Refaktor√°lt manager debug info
  if (wireframeManager) {
    console.log("Wireframe Manager:", wireframeManager.getWireframeInfo());
  }
  if (materialManager) {
    console.log("Material Manager:", materialManager.getMaterialInfo());
  }
  if (lightingManager) {
    console.log("Lighting Manager:", lightingManager.getLightingInfo());
  }
  if (hdrEnvironmentManager) {
    console.log("HDR Environment Manager:", hdrEnvironmentManager.getStatus());
  }
  if (postProcessingManager) {
    console.log("Post-Processing Manager:", postProcessingManager.getStatus());
  }
  
  // √öJ v1.12.0: PBR Debug info
  if (textureManager) {
    console.log("Texture Manager:", textureManager.getStatus());
    textureManager.listLoadedTextures();
  }
  if (geometryBuilder) {
    console.log("Geometry Builder:", geometryBuilder.getPBRStatus());
    console.log("Material Cache:", geometryBuilder.getMaterialCacheStats());
  }
  
  console.log("Shaders:", checkShaderAvailability());
  console.log("CSS2D:", checkCSS2DAvailability());
  console.log("==================");
};

// √öJ v1.12.0: Normal Maps specifikus debug
window.normalMapsDebug = () => {
  if (!allMeshes) {
    console.log("‚ùå Nincs mesh adat");
    return;
  }
  
  console.log("=== NORMAL MAPS DEBUG ===");
  
  allMeshes.forEach((mesh, elementId) => {
    if (mesh.userData.hasNormalMap) {
      console.log(`‚úÖ ${elementId}: Normal Map akt√≠v`);
      
      // Material r√©szletek
      if (mesh.material && mesh.material.normalMap) {
        const normalMap = mesh.material.normalMap;
        console.log(`   Text√∫ra: ${normalMap.image?.currentSrc || 'ismeretlen'}`);
        console.log(`   M√©ret: ${normalMap.image?.width}x${normalMap.image?.height}`);
        console.log(`   Normal Scale: ${mesh.material.normalScale.x}`);
      }
    }
  });
  
  console.log("========================");
};

// R√©szletes ViewMode debug (v√°ltozatlan)
window.viewModeDebug = () => {
  if (viewModeManager) {
    viewModeManager.logStatus();
  } else {
    console.warn("ViewModeManager nem el√©rhet≈ë");
  }
};

// Glob√°lis manager el√©rhet≈ës√©g (v√°ltozatlan)
window.elementManager = () => elementManager;
window.sceneManager = () => sceneManager;
window.csgManager = () => csgManager;
window.viewModeManager = () => viewModeManager;
window.exploder = () => exploder;
window.textureManager = () => textureManager;

// Refaktor√°lt manager el√©rhet≈ës√©g
window.wireframeManager = () => wireframeManager;
window.materialManager = () => materialManager;
window.lightingManager = () => lightingManager;
window.hdrEnvironmentManager = () => hdrEnvironmentManager;
window.postProcessingManager = () => postProcessingManager;

// Egyedi elem l√°that√≥s√°g kapcsol√≥ funkci√≥ (v√°ltozatlan)
window.toggleElementVisibility = function (elementId, isVisible) {
  console.log(`Elem l√°that√≥s√°g v√°lt√°s: ${elementId} -> ${isVisible}`);

  const mesh = allMeshes.get(elementId);
  if (mesh) {
    mesh.visible = isVisible;

    if (viewModeManager.getCurrentMode() === "blueprint") {
      wireframeManager.setElementWireframeVisibility(elementId, isVisible);
    }

    sceneManager.renderer.render(sceneManager.scene, sceneManager.camera);
  } else {
    console.warn(`Elem nem tal√°lhat√≥: ${elementId}`);
  }
};

// Inicializ√°l√°s ind√≠t√°sa az oldal bet√∂lt√©se ut√°n
document.addEventListener("DOMContentLoaded", initialize);

// Export√°l√°s m√°s modulok sz√°m√°ra (b≈ëv√≠tett v1.12.0)
export {
  elementManager,
  sceneManager,
  geometryBuilder,
  exploder,
  viewModeManager,
  csgManager,
  textureManager, // TextureManager export
  // Refaktor√°lt manager exportok
  wireframeManager,
  materialManager,
  lightingManager,
  hdrEnvironmentManager,
  allMeshes,
};