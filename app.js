/**
 * Minigolf P√°lya Viewer - F≈ëalkalmaz√°s
 * v1.13.3 - Post-processing vil√°g√≠t√°s optimaliz√°l√°s
 */

// ES6 importok
import * as THREE from "three";
import { GLTFExporter } from "three/examples/jsm/exporters/GLTFExporter.js";
import { CSS2DRenderer, CSS2DObject } from "three/examples/jsm/renderers/CSS2DRenderer.js";
import { RGBELoader } from "three/examples/jsm/loaders/RGBELoader.js"; // HDR loader
import * as ThreeMeshBVH from "three-mesh-bvh";
import * as ThreeBVHCSG from "three-bvh-csg";

// THREE.js glob√°lisan el√©rhet≈ëv√© t√©tele
window.THREE = THREE;
window.GLTFExporter = GLTFExporter;

// CSS2DRenderer k√ºl√∂n glob√°lis v√°ltoz√≥k√©nt
window.CSS2DRenderer = CSS2DRenderer;
window.CSS2DObject = CSS2DObject;

// Glob√°lis v√°ltoz√≥k
let elementManager;
let sceneManager;
let geometryBuilder;
let exploder;
let viewModeManager;
let csgManager;
let textureManager;
// Refaktor√°lt manager objektumok el√©rhet≈ës√©ge
let wireframeManager;
let materialManager;
let lightingManager;
let hdrEnvironmentManager;
let postProcessingManager;
let allMeshes;
let sectionExploder;

// √öJ v1.13.1: localStorage L√°that√≥s√°g Ment√©s
const VISIBILITY_STORAGE_KEY = 'minigolf_element_visibility';

// L√°that√≥s√°g √°llapot bet√∂lt√©se localStorage-b√≥l
function loadVisibilityState() {
  console.log("üìÇ L√°that√≥s√°g √°llapot bet√∂lt√©se localStorage-b√≥l...");
  
  try {
    const savedState = localStorage.getItem(VISIBILITY_STORAGE_KEY);
    if (savedState) {
      const visibilityMap = JSON.parse(savedState);
      console.log(`‚úÖ ${Object.keys(visibilityMap).length} elem l√°that√≥s√°g bet√∂ltve`);
      return visibilityMap;
    }
  } catch (error) {
    console.warn("‚ö†Ô∏è L√°that√≥s√°g bet√∂lt√©si hiba:", error);
  }
  
  console.log("Nincs mentett l√°that√≥s√°g √°llapot");
  return {};
}

// L√°that√≥s√°g √°llapot ment√©se localStorage-ba
function saveVisibilityState() {
  if (!allMeshes) return;
  
  try {
    const visibilityMap = {};
    
    allMeshes.forEach((mesh, elementId) => {
      visibilityMap[elementId] = mesh.visible;
    });
    
    localStorage.setItem(VISIBILITY_STORAGE_KEY, JSON.stringify(visibilityMap));
    console.log(`üíæ ${Object.keys(visibilityMap).length} elem l√°that√≥s√°g mentve`);
  } catch (error) {
    console.warn("‚ö†Ô∏è L√°that√≥s√°g ment√©si hiba:", error);
  }
}

// Mentett l√°that√≥s√°g alkalmaz√°sa az elemekre
function applyVisibilityState(visibilityMap) {
  if (!allMeshes || Object.keys(visibilityMap).length === 0) return;
  
  let appliedCount = 0;
  
  allMeshes.forEach((mesh, elementId) => {
    if (visibilityMap.hasOwnProperty(elementId)) {
      const shouldBeVisible = visibilityMap[elementId];
      
      if (mesh.visible !== shouldBeVisible) {
        mesh.visible = shouldBeVisible;
        
        // Blueprint wireframe is friss√≠t√©se
        if (viewModeManager && viewModeManager.getCurrentMode() === "blueprint") {
          wireframeManager.setElementWireframeVisibility(elementId, shouldBeVisible);
        }
        
        // UI checkbox szinkroniz√°l√°sa
        const checkbox = document.querySelector(`[data-element-id="${elementId}"]`);
        if (checkbox) {
          checkbox.checked = shouldBeVisible;
        }
        
        appliedCount++;
      }
    }
  });
  
  if (appliedCount > 0) {
    console.log(`üîÑ ${appliedCount} elem l√°that√≥s√°g friss√≠tve localStorage-b√≥l`);
    sceneManager.renderer.render(sceneManager.scene, sceneManager.camera);
  }
}

// L√°that√≥s√°g t√∂rl√©se (debug funkci√≥hoz)
function clearVisibilityState() {
  try {
    localStorage.removeItem(VISIBILITY_STORAGE_KEY);
    console.log("üßπ L√°that√≥s√°g √°llapot t√∂r√∂lve");
  } catch (error) {
    console.warn("‚ö†Ô∏è L√°that√≥s√°g t√∂rl√©si hiba:", error);
  }
}

// CSG inicializ√°l√°s (v√°ltozatlan)
function initializeCSG() {
  try {
    // K√∂nyvt√°rak hozz√°f√©rhet≈ës√©ge ellen≈ërz√©se
    if (!ThreeMeshBVH || !ThreeBVHCSG) {
      console.warn("CSG k√∂nyvt√°rak nem t√∂lt≈ëdtek be, fallback m√≥dra v√°lt√°s");
      return false;
    }

    // Glob√°lis objektumok l√©trehoz√°sa kompatibilit√°s miatt
    window.MeshBVH = ThreeMeshBVH.MeshBVH;
    window.CSGAPI = ThreeBVHCSG;

    // CSG wrapper objektum
    window.CSG = {
      // Alapvet≈ë oszt√°lyok
      Brush: ThreeBVHCSG.Brush,
      Evaluator: ThreeBVHCSG.Evaluator,

      // Oper√°ci√≥k
      ADDITION: ThreeBVHCSG.ADDITION,
      SUBTRACTION: ThreeBVHCSG.SUBTRACTION,
      INTERSECTION: ThreeBVHCSG.INTERSECTION,
      DIFFERENCE: ThreeBVHCSG.DIFFERENCE,

      // Kompatibilit√°si funkci√≥k
      fromMesh: (mesh) => {
        const brush = new ThreeBVHCSG.Brush(mesh.geometry, mesh.material);
        brush.position.copy(mesh.position);
        brush.rotation.copy(mesh.rotation);
        brush.scale.copy(mesh.scale);
        brush.updateMatrixWorld();
        return brush;
      },

      toMesh: (brush, matrix) => {
        const mesh = new THREE.Mesh(brush.geometry, brush.material);
        if (matrix) mesh.applyMatrix4(matrix);
        return mesh;
      },
    };

    console.log("CSG k√∂nyvt√°rak sikeresen inicializ√°lva (ES6 modules)");
    return true;
  } catch (error) {
    console.error("CSG inicializ√°l√°s hiba:", error);
    return false;
  }
}

// Shader el√©rhet≈ës√©g ellen≈ërz√©se (v√°ltozatlan)
function checkShaderAvailability() {
  const shaders = {
    toonVertex: document.getElementById("toonVertexShader"),
    toonFragment: document.getElementById("toonFragmentShader"),
  };

  const missing = Object.entries(shaders)
    .filter(([name, element]) => !element)
    .map(([name]) => name);

  if (missing.length === 0) {
    console.log("‚úÖ Minden shader el√©rhet≈ë");
    return true;
  } else {
    console.warn("‚ö†Ô∏è Hi√°nyz√≥ shaderek:", missing);
    return false;
  }
}

// CSS2DRenderer el√©rhet≈ës√©g ellen≈ërz√©se (v√°ltozatlan)
function checkCSS2DAvailability() {
  if (window.CSS2DRenderer && window.CSS2DObject) {
    console.log("‚úÖ CSS2DRenderer el√©rhet≈ë");
    return true;
  } else {
    console.warn("‚ö†Ô∏è CSS2DRenderer nem el√©rhet≈ë, koordin√°ta c√≠mk√©k n√©lk√ºl");
    return false;
  }
}

async function setRealisticPostProcesing() {
  if (postProcessingManager) {
      console.log("‚ú® Post-Processing (FXAA + Bloom + SSAO) inicializ√°l√°sa...");
      try {
        const postProcessingInitialized = await postProcessingManager.initialize();
        
        if (postProcessingInitialized) {
          // ELS≈ê: FXAA Anti-aliasing aktiv√°l√°sa (alapvet≈ë min≈ës√©gjav√≠t√°s)
          postProcessingManager.setFXAAEnabled(true);
          postProcessingManager.setFXAAPreset('default');
          console.log("üéØ FXAA Anti-aliasing aktiv√°lva!");
          
          // M√ÅSODIK: Bloom bekapcsol√°sa 'subtle' preset-tel
          postProcessingManager.setBloomPreset('subtle');
          postProcessingManager.setBloomEnabled(true);
          
          // HARMADIK: SSAO bekapcsol√°sa 'architectural' preset-tel
          postProcessingManager.setSSAOPreset('architectural');
          postProcessingManager.setSSAOEnabled(true);
          
          // √öJ v1.13.3: Vil√°g√≠t√°s optimaliz√°l√°s post-processing-hez
          console.log("üí° Vil√°g√≠t√°s optimaliz√°l√°s post-processing pipeline-hoz...");
          
          // Tone mapping exposure n√∂vel√©se
          sceneManager.renderer.toneMappingExposure = 1.5;
          
          // Bloom be√°ll√≠t√°sok finomhangol√°sa
          postProcessingManager.bloomPass.threshold = 2.5;
          postProcessingManager.bloomPass.strength = 0.05;
          
          // F√©nyek er≈ës√≠t√©se
          sceneManager.scene.traverse(function(object) {
            if (object.isLight && object.isAmbientLight) {
              object.intensity = 3.5;
            } else if (object.isLight) {
              object.intensity *= 3.2;
            }
          });
          
          console.log("‚úÖ Vil√°g√≠t√°s optimaliz√°lva post-processing-hez");
          console.log("üåü Teljes Post-Processing Pipeline aktiv√°lva: FXAA + Bloom + SSAO!");
        } else {
          console.warn("‚ùå Post-Processing nem inicializ√°lhat√≥");
        }
      } catch (error) {
        console.error("Post-Processing inicializ√°l√°si hiba:", error);
      }
    } else {
      console.log("Post-Processing Manager nincs el√©rhet≈ë, folytat√°s n√©lk√ºle");
    }
}

async function setBlueprintPostProcesing() {
  if (postProcessingManager) {
      console.log("‚ú® Post-Processing (FXAA + Bloom + SSAO) inicializ√°l√°sa...");
      try {
        const postProcessingInitialized = await postProcessingManager.initialize();
        
        if (postProcessingInitialized) {
          // ELS≈ê: FXAA Anti-aliasing aktiv√°l√°sa (alapvet≈ë min≈ës√©gjav√≠t√°s)
          postProcessingManager.setFXAAEnabled(false);
          // postProcessingManager.setFXAAPreset('default');
          // console.log("üéØ FXAA Anti-aliasing aktiv√°lva!");
          
          // // M√ÅSODIK: Bloom bekapcsol√°sa 'subtle' preset-tel
          // postProcessingManager.setBloomPreset('subtle');
          postProcessingManager.setBloomEnabled(false);
          
          // HARMADIK: SSAO bekapcsol√°sa 'architectural' preset-tel
          postProcessingManager.setSSAOPreset('architectural');
          postProcessingManager.setSSAOEnabled(true);
          
          // // √öJ v1.13.3: Vil√°g√≠t√°s optimaliz√°l√°s post-processing-hez
          // console.log("üí° Vil√°g√≠t√°s optimaliz√°l√°s post-processing pipeline-hoz...");
          
          // // Tone mapping exposure n√∂vel√©se
          // sceneManager.renderer.toneMappingExposure = 1.5;
          
          // // Bloom be√°ll√≠t√°sok finomhangol√°sa
          // postProcessingManager.bloomPass.threshold = 2.5;
          // postProcessingManager.bloomPass.strength = 0.05;
          
          // // F√©nyek er≈ës√≠t√©se
          // sceneManager.scene.traverse(function(object) {
          //   if (object.isLight && object.isAmbientLight) {
          //     object.intensity = 3.5;
          //   } else if (object.isLight) {
          //     object.intensity *= 3.2;
          //   }
          // });
          
          // console.log("‚úÖ Vil√°g√≠t√°s optimaliz√°lva post-processing-hez");
          // console.log("üåü Teljes Post-Processing Pipeline aktiv√°lva: FXAA + Bloom + SSAO!");
        } else {
          console.warn("‚ùå Post-Processing nem inicializ√°lhat√≥");
        }
      } catch (error) {
        console.error("Post-Processing inicializ√°l√°si hiba:", error);
      }
    } else {
      console.log("Post-Processing Manager nincs el√©rhet≈ë, folytat√°s n√©lk√ºle");
    }
}

// FRISS√çTETT v1.13.3: Egyszer≈±s√≠tett inicializ√°l√°s Pure PBR pipeline-nal + localStorage + vil√°g√≠t√°s optimaliz√°l√°s
async function initialize() {
  try {
    console.log("üöÄ Inicializ√°l√°s kezdete v1.13.3 - Post-processing vil√°g√≠t√°s optimaliz√°l√°s...");

    // K√∂nyvt√°rak ellen≈ërz√©se
    const csgAvailable = initializeCSG();
    const shadersAvailable = checkShaderAvailability();
    const css2dAvailable = checkCSS2DAvailability();

    // ELS≈ê: TextureManager inicializ√°l√°sa
    console.log("üé® TextureManager Pure PBR inicializ√°l√°sa...");
    textureManager = new TextureManager();
    textureManager.initialize();
    console.log("‚úÖ TextureManager v1.7.0 Pure PBR inicializ√°lva");

    // Alapvet≈ë manager objektumok l√©trehoz√°sa
    elementManager = new ElementManager();
    sceneManager = new SceneManager(
      document.getElementById("viewer-container")
    );
    
    // GeometryBuilder + TextureManager integr√°ci√≥
    console.log("üîß GeometryBuilder v2.0.0 + TextureManager integr√°ci√≥...");
    geometryBuilder = new GeometryBuilder();
    geometryBuilder.setTextureManager(textureManager);
    
    exploder = new Exploder();

    sectionExploder = new SectionExploder();
    sectionExploder.setViewModeManager(viewModeManager);

    // Szekci√≥ konfigur√°ci√≥k regisztr√°l√°sa
    try {
      const frontSection = await import("./models/front/index.js");
      sectionExploder.registerSectionConfig(frontSection.sectionConfig);
      
      const backSection = await import("./models/back/index.js");
      sectionExploder.registerSectionConfig(backSection.sectionConfig);

      const joinerSection = await import("./models/joiner/index.js");
      sectionExploder.registerSectionConfig(joinerSection.sectionConfig);
    } catch (error) {
      console.warn("Szekci√≥ konfigur√°ci√≥k regisztr√°l√°si hiba:", error);
    }
    
    // FRISS√çTETT: ViewModeManager v5.0.0 - Pure PBR
    viewModeManager = new ViewModeManager(sceneManager, geometryBuilder, textureManager);

    // HDR Environment Manager l√©trehoz√°sa
    hdrEnvironmentManager = new HDREnvironmentManager(sceneManager, textureManager);
    
    // Post-Processing Manager l√©trehoz√°sa (ha el√©rhet≈ë)
    if (typeof PostProcessingManager !== 'undefined') {
      postProcessingManager = new PostProcessingManager(sceneManager);
    } else {
      console.warn("PostProcessingManager nem el√©rhet≈ë");
    }
    
    // Specializ√°lt manager objektumok el√©rhet≈ëv√© t√©tele
    wireframeManager = viewModeManager.getWireframeManager();
    materialManager = viewModeManager.getMaterialManager();
    lightingManager = viewModeManager.getLightingManager();

    // Keresztreferenci√°k be√°ll√≠t√°sa
    exploder.setViewModeManager(viewModeManager);
    viewModeManager.setExploder(exploder);
    console.log("‚úÖ Keresztreferenci√°k be√°ll√≠tva");

    // Shader t√°mogat√°s be√°ll√≠t√°sa
    if (shadersAvailable) {
      viewModeManager.setShadersAvailable(true);
      console.log("Custom shader t√°mogat√°s enged√©lyezve");
    }

    // CSG Manager l√©trehoz√°sa ha el√©rhet≈ë
    if (csgAvailable && typeof CSGManager !== "undefined") {
      csgManager = new CSGManager();
      geometryBuilder.setCSGManager(csgManager);
      console.log("CSG Manager inicializ√°lva");
    } else {
      console.log("CSG Manager nem el√©rhet≈ë, hagyom√°nyos m√≥dban folytat√°s");
    }

    console.log("Manager objektumok l√©trehozva");

    // Scene setup
    sceneManager.setup();
    console.log("Scene setup k√©sz");

    // Elemek bet√∂lt√©se
    console.log("üì¶ Minigolf elemek bet√∂lt√©se...");
    minigolfElements = await window.loadModels();
    minigolfElements.forEach((element) => {
      elementManager.addElement(element);
    });
    console.log(`‚úÖ ${minigolfElements.length} elem bet√∂ltve`);

    // KULCS v1.13.1: Pure PBR Mesh-ek l√©trehoz√°sa
    console.log("üé® Pure PBR Mesh-ek l√©trehoz√°sa...");
    const elements = elementManager.getAllElements();
    
    // ASYNC PBR mesh creation
    allMeshes = await geometryBuilder.createAllMeshes(elements);
    console.log(`‚úÖ ${allMeshes.size} Pure PBR mesh l√©trehozva`);

    // PBR Statistics logging
    logPBRStatistics(allMeshes);

    // Mesh-ek hozz√°ad√°sa a scene-hez
    sceneManager.addAllMeshes(allMeshes);
    console.log("Mesh-ek hozz√°adva a scene-hez");

    // KULCS v1.13.1: ViewModeManager v5.0.0 inicializ√°l√°sa - sz√≠nes az alap√©rtelmezett
    console.log("üåü ViewModeManager v5.0.0 - sz√≠nes PBR alap√©rtelmezett...");
    
    // ELS≈ê: PBR material-ok ment√©se (GeometryBuilder k√©sz√≠tette ≈ëket)
    viewModeManager.switchToRealistic(allMeshes, elementManager.getAllElements());
    console.log("‚úÖ Sz√≠nes PBR n√©zet be√°ll√≠tva alap√©rtelmezettk√©nt + PBR material-ok mentve");

    // Exploder inicializ√°l√°sa
    exploder.saveOriginalPositions(allMeshes);
    console.log("Eredeti poz√≠ci√≥k mentve");

    sectionExploder.saveOriginalPositions(allMeshes);

    // HDR Environment inicializ√°l√°sa
    console.log("üåø Meadow HDR Environment inicializ√°l√°sa...");
    try {
      const hdrInitialized = await hdrEnvironmentManager.initialize();
      
      if (hdrInitialized) {
        console.log("‚úÖ HDR Manager inicializ√°lva, meadow HDR bet√∂lt√©se...");
        
        try {
          await hdrEnvironmentManager.loadHDREnvironment();
          // Minden mesh environment friss√≠t√©se
          hdrEnvironmentManager.updateAllMeshesEnvironment();
          console.log("üåü Meadow HDR Environment aktiv√°lva!");
        } catch (hdrError) {
          console.warn("‚ö†Ô∏è Meadow HDR bet√∂lt√©s sikertelen, fallback haszn√°lata:", hdrError);
        }
      } else {
        console.warn("‚ùå HDR Environment Manager nem inicializ√°lhat√≥");
      }
    } catch (error) {
      console.error("HDR inicializ√°l√°si hiba:", error);
    }

    // Post-Processing (FXAA + Bloom + SSAO) inicializ√°l√°sa
    // await setRealisticPostProcesing();

    // Event listener-ek be√°ll√≠t√°sa
    if (typeof setupEventListeners === "function") {
      setupEventListeners({
        exploder,
        viewModeManager,
        sceneManager,
        elementManager,
        allMeshes,
        sectionExploder,
      });
      console.log("Event listener-ek be√°ll√≠tva");
    }

    // Summary gener√°l√°sa - m√°r localStorage-aware
    const summary = elementManager.generateSummary();
    const summaryPanel = document.getElementById("summary-panel");
    summaryGenerator.renderFullSummary(
      summaryPanel,
      summary,
      elementManager.version
    );
    console.log("Summary gener√°lva localStorage √°llapottal");

    // √öJ v1.13.1: Mentett l√°that√≥s√°g alkalmaz√°sa csak a 3D mesh-ekre
    console.log("üìÇ localStorage √°llapot alkalmaz√°sa 3D mesh-ekre...");
    const savedVisibility = loadVisibilityState();
    if (Object.keys(savedVisibility).length > 0) {
      setTimeout(() => {
        // Csak a 3D mesh l√°that√≥s√°g, UI m√°r helyes a summary gener√°l√°skor
        allMeshes.forEach((mesh, elementId) => {
          if (savedVisibility.hasOwnProperty(elementId)) {
            mesh.visible = savedVisibility[elementId];
            
            // Blueprint wireframe friss√≠t√©se
            if (viewModeManager && viewModeManager.getCurrentMode() === "blueprint") {
              wireframeManager.setElementWireframeVisibility(elementId, savedVisibility[elementId]);
            }
          }
        });
        sceneManager.renderer.render(sceneManager.scene, sceneManager.camera);
        console.log("3D mesh l√°that√≥s√°g szinkroniz√°lva localStorage-b√≥l");
      }, 100);
    }

    console.log("üéâ Inicializ√°l√°s sikeres v1.13.3 - Post-processing vil√°g√≠t√°s optimaliz√°l√°ssal!");
    
    // Teljes rendszer status
    logSystemStatus();
    
  } catch (error) {
    console.error("‚ùå Hiba az inicializ√°l√°s sor√°n:", error);
    
    // Error recovery - egyszer≈±s√≠tett fallback
    console.log("üîÑ Error recovery...");
    await initializeFallback();
  }
}

// PBR Statistics logging (v√°ltozatlan)
function logPBRStatistics(meshes) {
  let pbrCount = 0;
  let totalMaps = {
    diffuse: 0,
    normal: 0,
    roughness: 0,
    metalness: 0,
    ao: 0
  };

  meshes.forEach((mesh, elementId) => {
    pbrCount++;
    
    // Map statistics
    if (mesh.userData.hasDiffuseMap) totalMaps.diffuse++;
    if (mesh.userData.hasNormalMap) totalMaps.normal++;
    if (mesh.userData.hasRoughnessMap) totalMaps.roughness++;
    if (mesh.userData.hasMetalnessMap) totalMaps.metalness++;
    if (mesh.userData.hasAOMap) totalMaps.ao++;
    
    // GROUP gyerekek sz√°m√≠t√°sa
    if (mesh.userData.isGroup) {
      mesh.children.forEach(child => {
        if (child.userData.hasNormalMap) totalMaps.normal++;
        if (child.userData.hasRoughnessMap) totalMaps.roughness++;
        if (child.userData.hasMetalnessMap) totalMaps.metalness++;
        if (child.userData.hasAOMap) totalMaps.ao++;
      });
    }
  });

  console.log("üìä PURE PBR STATISTICS v1.13.3:");
  console.log(`   Materials: ${pbrCount} Pure PBR (100%)`);
  console.log(`   Diffuse Maps: ${totalMaps.diffuse}`);
  console.log(`   Normal Maps: ${totalMaps.normal} ‚ú®`);
  console.log(`   Roughness Maps: ${totalMaps.roughness}`);
  console.log(`   Metalness Maps: ${totalMaps.metalness}`);
  console.log(`   AO Maps: ${totalMaps.ao}`);
  console.log(`   Total Texture Maps: ${Object.values(totalMaps).reduce((a, b) => a + b, 0)}`);
}

// Teljes rendszer status (friss√≠tett)
function logSystemStatus() {
  console.log("üéØ SYSTEM STATUS v1.13.3:");
  console.log(`   TextureManager: ${textureManager.getStatus().version} (Pure PBR)`);
  console.log(`   GeometryBuilder: ${geometryBuilder.getPBRStatus().version} (Pure PBR)`);
  console.log(`   ViewModeManager: ${viewModeManager.getViewModeInfo().version} (Pure PBR)`);
  console.log(`   MaterialManager: ${materialManager.getMaterialInfo().version} (Pure PBR)`);
  console.log(`   HDR Environment: ${hdrEnvironmentManager.getStatus().isLoaded ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Post-Processing: ${postProcessingManager ? postProcessingManager.getStatus().version : '‚ùå'}`);
  console.log(`   FXAA Anti-aliasing: ${postProcessingManager?.getStatus().fxaaEnabled ? '‚úÖ' : '‚ùå'}`);
  console.log(`   Vil√°g√≠t√°s optimaliz√°lva: ‚úÖ (exposure: 2.5, bloom: optim√°lis)`);
  console.log(`   localStorage L√°that√≥s√°g: ‚úÖ`);
  console.log(`   Legacy Support: ‚ùå (Pure PBR only)`);
}

// Egyszer≈±s√≠tett fallback inicializ√°l√°s
async function initializeFallback() {
  try {
    console.log("üîÑ Fallback inicializ√°l√°s...");
    
    // Egyszer≈± emergency mesh-ek l√©trehoz√°sa
    const elements = elementManager.getAllElements();
    
    allMeshes = new Map();
    elements.forEach(element => {
      const fallbackGeometry = new THREE.BoxGeometry(10, 10, 10);
      const fallbackMaterial = new THREE.MeshBasicMaterial({
        color: 0xff0000,
        wireframe: true,
      });
      const fallbackMesh = new THREE.Mesh(fallbackGeometry, fallbackMaterial);
      
      fallbackMesh.userData = {
        elementId: element.id,
        elementName: element.name + " (FALLBACK)",
        hasError: true,
      };
      
      allMeshes.set(element.id, fallbackMesh);
    });
    
    sceneManager.addAllMeshes(allMeshes);
    
    console.log("‚úÖ Fallback inicializ√°l√°s sikeres");
    
  } catch (fallbackError) {
    console.error("‚ùå Fallback inicializ√°l√°s is sikertelen:", fallbackError);
  }
}

// √öJ v1.13.1: localStorage L√°that√≥s√°g debug funkci√≥k
window.visibilityDebug = () => {
  console.log("=== L√ÅTHAT√ìS√ÅG DEBUG v1.13.3 ===");
  
  const saved = loadVisibilityState();
  console.log(`LocalStorage elemek: ${Object.keys(saved).length}`);
  
  if (allMeshes) {
    let visibleCount = 0;
    allMeshes.forEach((mesh, elementId) => {
      if (mesh.visible) visibleCount++;
    });
    console.log(`Aktu√°lisan l√°that√≥: ${visibleCount}/${allMeshes.size}`);
    
    // Elt√©r√©sek keres√©se
    const differences = [];
    allMeshes.forEach((mesh, elementId) => {
      if (saved.hasOwnProperty(elementId) && saved[elementId] !== mesh.visible) {
        differences.push(`${elementId}: saved=${saved[elementId]} vs actual=${mesh.visible}`);
      }
    });
    
    if (differences.length > 0) {
      console.log("Elt√©r√©sek:", differences);
    } else {
      console.log("‚úÖ Nincs elt√©r√©s localStorage √©s aktu√°lis √°llapot k√∂z√∂tt");
    }
  }
  console.log("===============================");
};

window.clearVisibility = () => {
  clearVisibilityState();
  console.log("üßπ L√°that√≥s√°g t√∂r√∂lve, oldal √∫jrat√∂lt√©se aj√°nlott");
};

// Glob√°lis hozz√°f√©r√©s localStorage funkci√≥khoz
window.saveVisibilityState = saveVisibilityState;
window.loadVisibilityState = loadVisibilityState;

// Glob√°lis hozz√°f√©r√©s debug-hoz (friss√≠tett v1.13.3)
window.debugInfo = () => {
  console.log("=== DEBUG INFO v1.13.3 - Pure PBR + localStorage + Vil√°g√≠t√°s ===");
  console.log("Element Manager:", elementManager?.getAllElements().length + " elem");
  console.log("Scene Manager:", sceneManager?.getSceneInfo());
  console.log("Exploder:", exploder?.getState());
  console.log("View Mode Manager:", viewModeManager?.getViewModeInfo());
  console.log("Mesh-ek:", allMeshes?.size);
  console.log("S√∫ly:", elementManager?.getTotalWeight().toFixed(2) + " g");
  
  // CSG debug info
  if (csgManager) {
    console.log("CSG Manager:", csgManager.getDebugInfo());
  }
  
  // Pure PBR manager debug info
  if (wireframeManager) {
    console.log("Wireframe Manager:", wireframeManager.getWireframeInfo());
  }
  if (materialManager) {
    console.log("Material Manager:", materialManager.getMaterialInfo());
  }
  if (lightingManager) {
    console.log("Lighting Manager:", lightingManager.getLightingInfo());
  }
  if (hdrEnvironmentManager) {
    console.log("HDR Environment Manager:", hdrEnvironmentManager.getStatus());
  }
  if (postProcessingManager) {
    console.log("Post-Processing Manager:", postProcessingManager.getStatus());
    
    // √öJ: FXAA Anti-aliasing debug info
    const antiAliasingInfo = postProcessingManager.getAntiAliasingInfo();
    console.log("FXAA Anti-aliasing:", antiAliasingInfo);
  }
  
  // Pure PBR Debug info
  if (textureManager) {
    console.log("Texture Manager:", textureManager.getStatus());
    textureManager.listLoadedTextures();
  }
  if (geometryBuilder) {
    console.log("Geometry Builder:", geometryBuilder.getPBRStatus());
  }
  
  console.log("==================");
};

// √öJ v1.13.3: Vil√°g√≠t√°s debug
window.lightingDebug = () => {
  if (!postProcessingManager) {
    console.log("‚ùå PostProcessingManager nem el√©rhet≈ë");
    return;
  }
  
  console.log("=== VIL√ÅG√çT√ÅS DEBUG v1.13.3 ===");
  
  console.log(`Tone Mapping Exposure: ${sceneManager.renderer.toneMappingExposure}`);
  console.log(`Bloom Threshold: ${postProcessingManager.bloomPass.threshold}`);
  console.log(`Bloom Strength: ${postProcessingManager.bloomPass.strength}`);
  
  // F√©nyek list√°z√°sa
  let lightCount = 0;
  sceneManager.scene.traverse(function(object) {
    if (object.isLight) {
      lightCount++;
      console.log(`F√©ny ${lightCount}: ${object.type}, intensity: ${object.intensity}`);
    }
  });
  
  console.log("===============================");
};

// √öJ v1.13.1: FXAA Anti-aliasing debug
window.fxaaDebug = () => {
  if (!postProcessingManager) {
    console.log("‚ùå PostProcessingManager nem el√©rhet≈ë");
    return;
  }
  
  console.log("=== FXAA ANTI-ALIASING DEBUG ===");
  
  const status = postProcessingManager.getStatus();
  const aaInfo = postProcessingManager.getAntiAliasingInfo();
  
  console.log(`FXAA Enabled: ${status.fxaaEnabled}`);
  console.log(`FXAA Pass Available: ${status.hasFXAAPass}`);
  console.log(`Renderer Anti-aliasing: ${aaInfo.rendererAntialias}`);
  console.log(`Pixel Ratio: ${aaInfo.pixelRatio} (device: ${window.devicePixelRatio})`);
  console.log(`FXAA Resolution:`, aaInfo.resolution);
  console.log(`FXAA Settings:`, aaInfo.fxaaSettings);
  
  console.log("===============================");
};

window.normalMapsDebug = () => {
  if (!allMeshes) {
    console.log("‚ùå Nincs mesh adat");
    return;
  }
  
  console.log("=== NORMAL MAPS DEBUG ===");
  
  allMeshes.forEach((mesh, elementId) => {
    if (mesh.userData.hasNormalMap) {
      console.log(`‚úÖ ${elementId}: Normal Map akt√≠v`);
      
      // Material r√©szletek
      if (mesh.material && mesh.material.normalMap) {
        const normalMap = mesh.material.normalMap;
        console.log(`   Text√∫ra: ${normalMap.image?.currentSrc || 'ismeretlen'}`);
        console.log(`   M√©ret: ${normalMap.image?.width}x${normalMap.image?.height}`);
        console.log(`   Normal Scale: ${mesh.material.normalScale.x}`);
      }
    }
  });
  
  console.log("========================");
};

// ViewMode debug (v√°ltozatlan)
window.viewModeDebug = () => {
  if (viewModeManager) {
    viewModeManager.logStatus();
  } else {
    console.warn("ViewModeManager nem el√©rhet≈ë");
  }
};

// Glob√°lis manager el√©rhet≈ës√©g (v√°ltozatlan)
window.elementManager = () => elementManager;
window.sceneManager = () => sceneManager;
window.csgManager = () => csgManager;
window.viewModeManager = () => viewModeManager;
window.exploder = () => exploder;
window.sectionExploder = () => sectionExploder;
window.textureManager = () => textureManager;

// Pure PBR manager el√©rhet≈ës√©g
window.wireframeManager = () => wireframeManager;
window.materialManager = () => materialManager;
window.lightingManager = () => lightingManager;
window.hdrEnvironmentManager = () => hdrEnvironmentManager;
window.postProcessingManager = () => postProcessingManager;

// Egyedi elem l√°that√≥s√°g kapcsol√≥ funkci√≥ - √öJ: localStorage ment√©ssel + √°llapot friss√≠t√©s
window.toggleElementVisibility = function (elementId, isVisible) {
  console.log(`Elem l√°that√≥s√°g v√°lt√°s: ${elementId} -> ${isVisible}`);

  const mesh = allMeshes.get(elementId);
  if (mesh) {
    mesh.visible = isVisible;

    if (viewModeManager.getCurrentMode() === "blueprint") {
      wireframeManager.setElementWireframeVisibility(elementId, isVisible);
    }

    // √öJ v1.13.1: Automatikus ment√©s localStorage-ba
    saveVisibilityState();

    // √öJ: Toggle All √°llapot friss√≠t√©se
    if (window.updateToggleAllStatus) {
      setTimeout(() => {
        window.updateToggleAllStatus();
      }, 10);
    }

    sceneManager.renderer.render(sceneManager.scene, sceneManager.camera);
  } else {
    console.warn(`Elem nem tal√°lhat√≥: ${elementId}`);
  }
};

// Inicializ√°l√°s ind√≠t√°sa az oldal bet√∂lt√©se ut√°n
document.addEventListener("DOMContentLoaded", initialize);

window.setRealisticPostProcesing = setRealisticPostProcesing;
window.setBlueprintPostProcesing = setBlueprintPostProcesing;

// Export√°l√°s m√°s modulok sz√°m√°ra (friss√≠tett v1.13.3)
export {
  elementManager,
  sceneManager,
  geometryBuilder,
  exploder,
  viewModeManager,
  csgManager,
  textureManager,
  // Pure PBR manager exportok
  wireframeManager,
  materialManager,
  lightingManager,
  hdrEnvironmentManager,
  allMeshes,
};