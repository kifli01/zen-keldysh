/**
 * Texture Manager
 * Text√∫r√°k k√∂zponti kezel√©se √©s l√©trehoz√°sa
 * v1.3.0 - Minden anyag shade t√°mogat√°s (steel, wood, turf)
 */

class TextureManager {
  constructor() {
    this.textures = new Map();
    this.realisticMaterials = null;
    this.wireframeMaterial = null;
    this.initialized = false;
    
    console.log("TextureManager v1.3.0 konstruktor - minden anyag shade t√°mogat√°ssal");
  }

  // √ñsszes text√∫ra inicializ√°l√°sa
  initialize() {
    if (this.initialized) {
      console.log("TextureManager m√°r inicializ√°lva");
      return this.getAllTextures();
    }

    console.log("üé® Text√∫r√°k √©s anyagok l√©trehoz√°sa...");
    
    // Csak a pap√≠r text√∫ra marad procedur√°lis
    this.textures.set('paper', this.createPaperTexture());

    // Anyagok l√©trehoz√°sa text√∫r√°k alapj√°n
    this.realisticMaterials = this.createRealisticMaterials();
    this.wireframeMaterial = this.createWireframeMaterial();

    this.initialized = true;
    console.log(`‚úÖ TextureManager inicializ√°lva`);
    
    return this.getAllTextures();
  }

  // FRISS√çTETT: Galvaniz√°lt text√∫ra bet√∂lt√©se k√©pb≈ël - 1-10 √°rnyalat sk√°la
  createGalvanizedTexture(shade = 5) {
    const normalizedShade = Math.max(1, Math.min(10, shade));
    const imagePath = `textures/steel.jpg`;
    
    const texture = new THREE.TextureLoader().load(
      imagePath,
      (loadedTexture) => {
        console.log(`‚úÖ Galvaniz√°lt text√∫ra bet√∂ltve: √°rnyalat ${normalizedShade}`);
      },
      undefined,
      (error) => {
        console.warn(`‚ö†Ô∏è Steel k√©p nem tal√°lhat√≥: ${imagePath}, fallback sz√≠nre`);
      }
    );
    
    // Sz√©th√∫zott text√∫ra be√°ll√≠t√°sok
    texture.wrapS = THREE.ClampToEdgeWrapping;
    texture.wrapT = THREE.ClampToEdgeWrapping;
    texture.repeat.set(1, 1);
    texture.minFilter = THREE.LinearFilter;
    texture.magFilter = THREE.LinearFilter;
    
    return texture;
  }

  // √öJ: Fa text√∫ra bet√∂lt√©se k√©pb≈ël - 1-10 √°rnyalat sk√°la
  createWoodTexture(shade = 9) {
    const normalizedShade = Math.max(1, Math.min(10, shade));
    const imagePath = `textures/wood-1.jpg`;
    
    const texture = new THREE.TextureLoader().load(
      imagePath,
      (loadedTexture) => {
        console.log(`‚úÖ Fa text√∫ra bet√∂ltve: √°rnyalat ${normalizedShade}`);
      },
      undefined,
      (error) => {
        console.warn(`‚ö†Ô∏è Wood k√©p nem tal√°lhat√≥: ${imagePath}, fallback sz√≠nre`);
      }
    );
    
    // Ism√©tl≈ëd≈ë text√∫ra be√°ll√≠t√°sok (fa eset√©n jobb az ism√©tl√©s)
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(2, 2);
    texture.minFilter = THREE.LinearFilter;
    texture.magFilter = THREE.LinearFilter;
    
    return texture;
  }

  // √öJ: M≈±f≈± text√∫ra bet√∂lt√©se k√©pb≈ël - 1-10 √°rnyalat sk√°la
  createTurfTexture(shade = 5) {
    const normalizedShade = Math.max(1, Math.min(10, shade));
    const imagePath = `textures/turf-1.jpg`;
    
    const texture = new THREE.TextureLoader().load(
      imagePath,
      (loadedTexture) => {
        console.log(`‚úÖ M≈±f≈± text√∫ra bet√∂ltve: √°rnyalat ${normalizedShade}`);
      },
      undefined,
      (error) => {
        console.warn(`‚ö†Ô∏è Turf k√©p nem tal√°lhat√≥: ${imagePath}, fallback sz√≠nre`);
      }
    );
    
    // Ism√©tl≈ëd≈ë text√∫ra be√°ll√≠t√°sok (m≈±f≈± eset√©n sok ism√©tl√©s)
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(8, 8);
    texture.minFilter = THREE.LinearFilter;
    texture.magFilter = THREE.LinearFilter;
    
    return texture;
  }

  // √öJ: Galvaniz√°lt anyag l√©trehoz√°sa shade-del - EXTR√âM KONTRASZT
  createGalvanizedMaterialWithShade(shade = 5) {
    const texture = this.createGalvanizedTexture(shade);
    
    // EXTR√âM kontraszt - 0.1-1.5 k√∂z√∂tt
    const brightness = 0.1 + (shade - 1) * (1.4 / 9); // 0.1-1.5 k√∂z√∂tt (EXTR√âM tartom√°ny)
    const shininess = 5 + (shade - 1) * (95 / 9);     // 5-100 k√∂z√∂tt (maximum f√©nyess√©g)
    
    // Alapsz√≠n: feh√©r, brightness-szel szorozva
    const baseColor = new THREE.Color(0xffffff);
    baseColor.multiplyScalar(brightness);
    
    return new THREE.MeshPhongMaterial({
      color: baseColor.getHex(),
      map: texture,
      shininess: shininess,
      transparent: false,
    });
  }

  // √öJ: Fa anyag l√©trehoz√°sa shade-del - EXTR√âM KONTRASZT
  createWoodMaterialWithShade(shade = 5) {
    const texture = this.createWoodTexture(shade);
    
    // EXTR√âM kontraszt - 0.15-1.3 k√∂z√∂tt
    const brightness = 0.15 + (shade - 1) * (1.15 / 9); // 0.15-1.3 k√∂z√∂tt (EXTR√âM tartom√°ny)
    const shininess = 1 + (shade - 1) * (60 / 9);       // 1-61 k√∂z√∂tt (fa is lehet f√©nyes)
    
    // Alapsz√≠n: barna √°rnyalat
    const baseColor = new THREE.Color(0xecc5a9); // Eredeti fa sz√≠n
    baseColor.multiplyScalar(brightness);
    
    return new THREE.MeshPhongMaterial({
      color: baseColor.getHex(),
      map: texture,
      shininess: shininess,
      transparent: false,
    });
  }

  // √öJ: M≈±f≈± anyag l√©trehoz√°sa shade-del - EXTR√âM KONTRASZT
  createTurfMaterialWithShade(shade = 5) {
    const texture = this.createTurfTexture(shade);
    
    // EXTR√âM kontraszt - 0.2-1.4 k√∂z√∂tt
    const brightness = 0.2 + (shade - 1) * (1.2 / 9); // 0.2-1.4 k√∂z√∂tt (EXTR√âM tartom√°ny)
    const shininess = 1 + (shade - 1) * (25 / 9);     // 1-26 k√∂z√∂tt (f≈± is lehet f√©nyesebb)
    
    // Alapsz√≠n: z√∂ld √°rnyalat
    const baseColor = new THREE.Color(0xa5bc49); // Eredeti f≈± sz√≠n
    baseColor.multiplyScalar(brightness);
    
    return new THREE.MeshPhongMaterial({
      color: baseColor.getHex(),
      map: texture,
      shininess: shininess,
      transparent: false,
    });
  }

  // √öJ: Univerz√°lis anyag lek√©r√©se shade-del
  getGalvanizedMaterial(shade = 5) {
    if (!this.initialized) {
      this.initialize();
    }
    return this.createGalvanizedMaterialWithShade(shade);
  }

  getWoodMaterial(shade = 5) {
    if (!this.initialized) {
      this.initialize();
    }
    return this.createWoodMaterialWithShade(shade);
  }

  getTurfMaterial(shade = 5) {
    if (!this.initialized) {
      this.initialize();
    }
    return this.createTurfMaterialWithShade(shade);
  }

  // FRISS√çTETT: Realistic anyagok l√©trehoz√°sa - alap√©rtelmezett shade 5-tel
  createRealisticMaterials() {
    return {
      plate: new THREE.MeshPhongMaterial({
        color: 0xb99379,
        shininess: 10,
        transparent: false,
      }),
      frame: this.createWoodMaterialWithShade(5),      // Fa shade 5
      covering: this.createTurfMaterialWithShade(5),   // M≈±f≈± shade 5
      wall: this.createWoodMaterialWithShade(5),       // Fa shade 5
      leg: this.createWoodMaterialWithShade(5),        // Fa shade 5
      ball: new THREE.MeshPhongMaterial({
        color: 0xffffff,
        shininess: 30,
        transparent: false,
      }),
      galvanized: this.createGalvanizedMaterialWithShade(5), // Galvaniz√°lt shade 5
    };
  }

  // Wireframe anyag l√©trehoz√°sa
  createWireframeMaterial() {
    return new THREE.LineBasicMaterial({
      color: 0x333333,
      linewidth: 2,
      transparent: true,
      opacity: 0.8,
    });
  }

  // Pap√≠r text√∫ra l√©trehoz√°sa (V√ÅLTOZATLAN - procedur√°lis)
  createPaperTexture() {
    const canvas = document.createElement("canvas");
    canvas.width = 512;
    canvas.height = 512;
    const context = canvas.getContext("2d");

    context.fillStyle = "#ffffff";
    context.fillRect(0, 0, 512, 512);

    const imageData = context.getImageData(0, 0, 512, 512);
    const data = imageData.data;

    for (let i = 0; i < data.length; i += 4) {
      const noise = (Math.random() - 0.5) * 1;
      data[i] = Math.max(0, Math.min(255, 255 + noise));
      data[i + 1] = Math.max(0, Math.min(255, 255 + noise));
      data[i + 2] = Math.max(0, Math.min(255, 255 + noise));
      data[i + 3] = 255;
    }

    context.putImageData(imageData, 0, 0);

    const texture = new THREE.CanvasTexture(canvas);
    texture.wrapS = THREE.RepeatWrapping;
    texture.wrapT = THREE.RepeatWrapping;
    texture.repeat.set(16, 16);
    return texture;
  }

  // Egy text√∫ra lek√©r√©se
  getTexture(name) {
    if (!this.initialized) {
      console.warn("TextureManager nincs inicializ√°lva, auto-init...");
      this.initialize();
    }
    return this.textures.get(name);
  }

  // Realistic anyagok lek√©r√©se
  getRealisticMaterials() {
    if (!this.initialized) {
      console.warn("TextureManager nincs inicializ√°lva, auto-init...");
      this.initialize();
    }
    return this.realisticMaterials;
  }

  // Wireframe anyag lek√©r√©se
  getWireframeMaterial() {
    if (!this.initialized) {
      console.warn("TextureManager nincs inicializ√°lva, auto-init...");
      this.initialize();
    }
    return this.wireframeMaterial;
  }

  // √ñsszes text√∫ra objektumk√©nt (ViewModeManager kompatibilit√°s)
  getAllTextures() {
    const textureObj = {};
    this.textures.forEach((texture, name) => {
      textureObj[name] = texture;
    });
    return textureObj;
  }

  // √öJ: Univerz√°lis anyag lek√©r√©se anyag t√≠pus √©s shade szerint
  getMaterialWithShade(materialType, shade = 5) {
    if (!this.initialized) {
      this.initialize();
    }

    switch (materialType) {
      case MATERIALS.GALVANIZED_STEEL:
        return this.getGalvanizedMaterial(shade);
      case MATERIALS.PINE_SOLID:
        return this.getWoodMaterial(shade);
      case MATERIALS.ARTIFICIAL_GRASS:
        return this.getTurfMaterial(shade);
      case MATERIALS.PINE_PLYWOOD:
        // R√©tegelt lemez is fa alap√∫, de vil√°gosabb alapsz√≠nnel
        const woodMaterial = this.getWoodMaterial(shade);
        const lighterWood = woodMaterial.clone();
        lighterWood.color.multiplyScalar(1.1); // 10%-kal vil√°gosabb
        return lighterWood;
      case MATERIALS.WHITE_PLASTIC:
        // M≈±anyag nem v√°ltozik shade-del
        return new THREE.MeshPhongMaterial({
          color: 0xffffff,
          shininess: 30,
          transparent: false,
        });
      default:
        console.warn(`Ismeretlen anyag t√≠pus: ${materialType}, fallback fa anyag`);
        return this.getWoodMaterial(shade);
    }
  }

  // Debug info
  getStatus() {
    return {
      initialized: this.initialized,
      textureCount: this.textures.size,
      availableTextures: Array.from(this.textures.keys()),
      hasRealisticMaterials: !!this.realisticMaterials,
      hasWireframeMaterial: !!this.wireframeMaterial,
      supportedMaterials: ['galvanized', 'wood', 'turf'],
      shadeRange: '1-10',
      imageBasedTextures: ['steel.jpg', 'wood-1.jpg', 'turf-1.jpg'],
    };
  }

  // Cleanup
  destroy() {
    // Text√∫r√°k cleanup
    this.textures.forEach((texture) => {
      if (texture.dispose) {
        texture.dispose();
      }
    });
    this.textures.clear();

    // Anyagok cleanup
    if (this.realisticMaterials) {
      Object.values(this.realisticMaterials).forEach((material) => {
        if (material.dispose) {
          material.dispose();
        }
      });
      this.realisticMaterials = null;
    }

    if (this.wireframeMaterial && this.wireframeMaterial.dispose) {
      this.wireframeMaterial.dispose();
      this.wireframeMaterial = null;
    }

    this.initialized = false;
    console.log("TextureManager v1.3.0 cleanup k√©sz");
  }
}

// Glob√°lis hozz√°f√©rhet≈ës√©g
window.TextureManager = TextureManager;