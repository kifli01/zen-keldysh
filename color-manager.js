/**
 * Color Manager
 * Fa elemek sz√≠nkezel√©se - egyszer≈±s√≠tett verzi√≥
 * v2.0.0 - Val√≥s idej≈± sz√≠nv√°lt√°s √∫jragener√°l√°ssal
 */

// localStorage kulcs
const WOOD_COLOR_STORAGE_KEY = 'minigolf_wood_color';

// Alap√©rtelmezett fa sz√≠n
const DEFAULT_WOOD_COLOR = 0xb6c4de;

/**
 * Fa sz√≠n megv√°ltoztat√°sa val√≥s id≈ëben
 * @param {number} hexColor - Hex sz√≠n (pl. 0xff5722)
 */
window.changeWoodColor = async function(hexColor) {
  console.log('üé® Fa sz√≠n v√°lt√°sa...', '#' + hexColor.toString(16));
  
  try {
    // 1. Konstansok m√≥dos√≠t√°sa - egys√©ges fa sz√≠n
    MATERIALS.PINE_SOLID.baseColor = hexColor;
    MATERIALS.PINE_PLYWOOD.baseColor = hexColor;
    
    // 2. localStorage ment√©s
    localStorage.setItem(WOOD_COLOR_STORAGE_KEY, hexColor.toString(16));
    console.log(`üíæ Fa sz√≠n mentve localStorage-ba: #${hexColor.toString(16)}`);
    
    // 3. Fa elemek √∫jragener√°l√°sa
    const meshes = sceneManager().getAllMeshes();
    let updatedCount = 0;
    
    for (const [elementId, mesh] of meshes) {
      // Fa elemek azonos√≠t√°sa
      if (isWoodElement(elementId)) {
        const element = elementManager().getAllElements().find(e => e.id === elementId);
        
        if (element) {
          const materialDef = MATERIALS[element.materialKey];
          const newMaterial = await textureManager().getMaterialWithShade(materialDef, element.shade || 5);
          
          // Material csere
          if (mesh.material) {
            // R√©gi material dispose
            if (mesh.material.dispose) {
              mesh.material.dispose();
            }
            mesh.material = newMaterial;
            updatedCount++;
          }
          
          // GROUP mesh-ek kezel√©se (ha vannak)
          if (mesh.children && mesh.children.length > 0) {
            mesh.children.forEach((child) => {
              if (child.material) {
                if (child.material.dispose) {
                  child.material.dispose();
                }
                child.material = newMaterial.clone();
              }
            });
          }
        }
      }
    }
    
    console.log(`‚úÖ ${updatedCount} fa elem friss√≠tve √©s mentve`);
    
    // 4. Renderel√©s triggere
    sceneManager().renderer.render(sceneManager().scene, sceneManager().camera);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Fa sz√≠n v√°lt√°si hiba:', error);
    return false;
  }
};

/**
 * Mentett fa sz√≠n bet√∂lt√©se localStorage-b√≥l
 */
window.loadSavedWoodColor = function() {
  try {
    const saved = localStorage.getItem(WOOD_COLOR_STORAGE_KEY);
    
    if (saved) {
      const color = parseInt(saved, 16);
      
      if (!isNaN(color)) {
        console.log('üìÇ Mentett fa sz√≠n bet√∂lt√©se:', '#' + saved);
        
        // Konstansok be√°ll√≠t√°sa (renderel√©s n√©lk√ºl)
        MATERIALS.PINE_SOLID.baseColor = color;
        MATERIALS.PINE_PLYWOOD.baseColor = color;
        
        console.log(`‚úÖ Fa sz√≠n be√°ll√≠tva: #${saved}`);
        return color;
      }
    }
    
    console.log('üìÇ Nincs mentett fa sz√≠n, alap√©rtelmezett haszn√°lata');
    return DEFAULT_WOOD_COLOR;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Fa sz√≠n localStorage bet√∂lt√©si hiba:', error);
    return DEFAULT_WOOD_COLOR;
  }
};

/**
 * Fa sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre
 */
window.resetWoodColor = function() {
  console.log('üîÑ Fa sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre');
  return changeWoodColor(DEFAULT_WOOD_COLOR);
};

/**
 * Aktu√°lis fa sz√≠n lek√©r√©se
 */
window.getCurrentWoodColor = function() {
  return MATERIALS.PINE_SOLID.baseColor;
};

/**
 * Hex sz√≠n konvert√°l√°sa sz√≠nes stringg√© (debug)
 */
window.hexToColorString = function(hexColor) {
  return '#' + hexColor.toString(16).padStart(6, '0');
};

/**
 * Fa elem azonos√≠t√°sa elementId alapj√°n
 * @param {string} elementId - Elem azonos√≠t√≥
 * @returns {boolean} - Fa elem-e
 */
function isWoodElement(elementId) {
  const woodKeywords = [
    'frame', 'leg', 'wall', 'cross', 'beam', 
    'plate', 'dowel', 'tessauer', 'countersunk'
  ];
  
  return woodKeywords.some(keyword => elementId.includes(keyword));
}

/**
 * Fa elemek sz√°m√°nak lek√©r√©se (debug)
 */
window.getWoodElementCount = function() {
  const meshes = sceneManager().getAllMeshes();
  let woodCount = 0;
  
  for (const [elementId] of meshes) {
    if (isWoodElement(elementId)) {
      woodCount++;
    }
  }
  
  return woodCount;
};

/**
 * Fa elemek list√°z√°sa (debug)
 */
window.listWoodElements = function() {
  const meshes = sceneManager().getAllMeshes();
  const woodElements = [];
  
  for (const [elementId] of meshes) {
    if (isWoodElement(elementId)) {
      const element = elementManager().getAllElements().find(e => e.id === elementId);
      woodElements.push({
        id: elementId,
        materialKey: element?.materialKey || 'UNKNOWN'
      });
    }
  }
  
  console.log(`=== FA ELEMEK (${woodElements.length}) ===`);
  woodElements.forEach(item => {
    console.log(`${item.id} - ${item.materialKey}`);
  });
  console.log('================================');
  
  return woodElements;
};

/**
 * localStorage fa sz√≠n debug inform√°ci√≥k
 */
window.woodColorDebug = function() {
  console.log('=== FA SZ√çN DEBUG ===');
  console.log('Aktu√°lis fa sz√≠n:', hexToColorString(getCurrentWoodColor()));
  console.log('PINE_SOLID.baseColor:', hexToColorString(MATERIALS.PINE_SOLID.baseColor));
  console.log('PINE_PLYWOOD.baseColor:', hexToColorString(MATERIALS.PINE_PLYWOOD.baseColor));
  console.log('localStorage √©rt√©k:', localStorage.getItem(WOOD_COLOR_STORAGE_KEY));
  console.log('Fa elemek sz√°ma:', getWoodElementCount());
  console.log('====================');
};

/**
 * localStorage fa sz√≠n t√∂rl√©se
 */
window.clearWoodColorStorage = function() {
  localStorage.removeItem(WOOD_COLOR_STORAGE_KEY);
  console.log('üßπ Fa sz√≠n localStorage t√∂r√∂lve');
};

// Automatikus bet√∂lt√©s inicializ√°l√°skor (ha a DOM m√°r k√©sz)
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    // K√©sleltetett bet√∂lt√©s - v√°rjuk meg hogy minden manager k√©sz legyen
    setTimeout(() => {
      if (typeof sceneManager === 'function' && sceneManager()) {
        loadSavedWoodColor();
      }
    }, 2000); // 2 m√°sodperc k√©sleltet√©s
  });
} else {
  // DOM m√°r k√©sz
  setTimeout(() => {
    if (typeof sceneManager === 'function' && sceneManager()) {
      loadSavedWoodColor();
    }
  }, 1000);
}

console.log('‚úÖ Color Manager v2.0.0 - Egyszer≈±s√≠tett fa sz√≠nkezel√©s bet√∂ltve');

// Glob√°lis hozz√°f√©rhet≈ës√©g r√©gi ColorManager objektum helyett
window.ColorManager = {
  changeWoodColor,
  loadSavedWoodColor,
  resetWoodColor,
  getCurrentWoodColor,
  getWoodElementCount,
  listWoodElements,
  woodColorDebug,
  clearWoodColorStorage,
  version: '2.0.0'
};