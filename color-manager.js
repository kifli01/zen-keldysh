/**
 * Color Manager
 * Fa √©s M≈±f≈± elemek sz√≠nkezel√©se - v3.0.0 Dual Color System
 * v2.2.0 - Firebase Realtime Database (localStorage helyett)
 * v3.0.0 - M≈±f≈± sz√≠nkezel√©s hozz√°ad√°sa
 */

// Firebase √∫tvonalak - kib≈ëv√≠tett strukt√∫ra
const FIREBASE_PATHS = {
  WOOD: {
    DEFAULT: 'colors/wood/default',
    PRESETS: 'colors/wood/presets'
  },
  GRASS: {
    DEFAULT: 'colors/grass/default',
    PRESETS: 'colors/grass/presets'
  }
};

// Alap√©rtelmezett sz√≠nek
const DEFAULT_WOOD_COLOR = 0xd3e3ff;
const DEFAULT_GRASS_COLOR = 0x95c5ff;

// =============================================================================
// FA SZ√çNKEZEL√âS (MEGL√âV≈ê FUNKCI√ìK)
// =============================================================================

/**
 * Fa sz√≠n megv√°ltoztat√°sa val√≥s id≈ëben (NINCS ment√©s)
 * @param {number} hexColor - Hex sz√≠n (pl. 0xff5722)
 */
window.changeWoodColor = async function(hexColor) {
  console.log('üé® Fa sz√≠n v√°lt√°sa...', '#' + hexColor.toString(16));
  
  try {
    // 1. Konstansok m√≥dos√≠t√°sa - egys√©ges fa sz√≠n
    MATERIALS.PINE_SOLID.baseColor = hexColor;
    MATERIALS.PINE_PLYWOOD.baseColor = hexColor;
    
    // 2. Fa elemek √∫jragener√°l√°sa
    const meshes = sceneManager().getAllMeshes();
    let updatedCount = 0;
    
    for (const [elementId, mesh] of meshes) {
      // Fa elemek azonos√≠t√°sa
      if (isWoodElement(elementId)) {
        const element = elementManager().getAllElements().find(e => e.id === elementId);
        
        if (element) {
          const materialDef = MATERIALS[element.materialKey];
          const newMaterial = await textureManager().getMaterialWithShade(materialDef);
          
          // Material csere
          if (mesh.material) {
            mesh.material = newMaterial;
            updatedCount++;
          }
          
          // GROUP mesh-ek kezel√©se (ha vannak)
          if (mesh.children && mesh.children.length > 0) {
            mesh.children.forEach((child) => {
              if (child.material) {
                child.material = newMaterial.clone();
              }
            });
          }
        }
      }
    }
    
    console.log(`‚úÖ ${updatedCount} fa elem friss√≠tve (NINCS ment√©s)`);
    
    // 3. Renderel√©s triggere
    sceneManager().renderer.render(sceneManager().scene, sceneManager().camera);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Fa sz√≠n v√°lt√°si hiba:', error);
    return false;
  }
};

/**
 * Aktu√°lis fa sz√≠n ment√©se Firebase-be
 * @param {number} hexColor - Opcion√°lis hex sz√≠n, ha nincs megadva akkor az aktu√°lisat menti
 */
window.saveWoodColor = async function(hexColor = null) {
  try {
    // Firebase el√©rhet≈ës√©g ellen≈ërz√©se
    if (!window.firebaseDb || !window.firebaseSet || !window.firebaseRef) {
      console.error('‚ùå Firebase nincs inicializ√°lva');
      return false;
    }
    
    // Ha nincs sz√≠n megadva, aktu√°lis sz√≠n haszn√°lata
    const colorToSave = hexColor !== null ? hexColor : getCurrentWoodColor();
    const colorString = `0x${colorToSave.toString(16)}`;
    
    // Firebase ment√©s
    const ref = window.firebaseRef(window.firebaseDb, FIREBASE_PATHS.WOOD.DEFAULT);
    await window.firebaseSet(ref, colorString);
    
    console.log(`üî• Fa sz√≠n mentve Firebase-be: ${colorString}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Firebase ment√©s hiba:', error);
    return false;
  }
};

/**
 * Mentett fa sz√≠n bet√∂lt√©se Firebase-b≈ël
 */
window.loadSavedWoodColor = async function() {
  try {
    // Firebase el√©rhet≈ës√©g ellen≈ërz√©se
    if (!window.firebaseDb || !window.firebaseGet || !window.firebaseChild || !window.firebaseRef) {
      console.warn('‚ö†Ô∏è Firebase nincs inicializ√°lva, alap√©rtelmezett fa sz√≠n');
      return DEFAULT_WOOD_COLOR;
    }
    
    const dbRef = window.firebaseRef(window.firebaseDb);
    const snapshot = await window.firebaseGet(window.firebaseChild(dbRef, FIREBASE_PATHS.WOOD.DEFAULT));
    
    if (snapshot.exists()) {
      const colorStr = snapshot.val().trim();
      const color = parseInt(colorStr, 16);
      
      if (!isNaN(color)) {
        console.log('üî• Mentett fa sz√≠n bet√∂ltve Firebase-b≈ël:', colorStr);
        
        // Konstansok be√°ll√≠t√°sa (renderel√©s n√©lk√ºl)
        MATERIALS.PINE_SOLID.baseColor = color;
        MATERIALS.PINE_PLYWOOD.baseColor = color;
        
        console.log(`‚úÖ Fa sz√≠n be√°ll√≠tva: ${colorStr}`);
        return color;
      }
    }
    
    console.log('üî• Nincs mentett fa sz√≠n Firebase-ben, alap√©rtelmezett haszn√°lata');
    return DEFAULT_WOOD_COLOR;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Firebase fa sz√≠n bet√∂lt√©s hiba:', error);
    return DEFAULT_WOOD_COLOR;
  }
};

/**
 * Firebase - Fa preset sz√≠n ment√©se
 */
window.saveWoodPresetToFirebase = async function(color) {
  try {
    if (!window.firebaseDb || !window.firebasePush || !window.firebaseRef) {
      console.error('‚ùå Firebase nincs inicializ√°lva');
      return false;
    }
    
    const colorString = `0x${color.toString(16)}`;
    
    // Firebase preset ment√©s (push automatikus ID-t gener√°l)
    const presetsRef = window.firebaseRef(window.firebaseDb, FIREBASE_PATHS.WOOD.PRESETS);
    await window.firebasePush(presetsRef, colorString);
    
    console.log(`üî• Fa preset sz√≠n mentve Firebase-be: ${colorString}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Firebase fa preset ment√©s hiba:', error);
    return false;
  }
};

/**
 * Firebase - Fa √∂sszes preset bet√∂lt√©se
 */
window.loadWoodPresetsFromFirebase = async function() {
  try {
    if (!window.firebaseDb || !window.firebaseGet || !window.firebaseChild || !window.firebaseRef) {
      console.warn('‚ö†Ô∏è Firebase nincs inicializ√°lva');
      return [];
    }
    
    const dbRef = window.firebaseRef(window.firebaseDb);
    const snapshot = await window.firebaseGet(window.firebaseChild(dbRef, FIREBASE_PATHS.WOOD.PRESETS));
    
    if (snapshot.exists()) {
      const presetsData = snapshot.val();
      const presets = [];
      
      // Firebase objektum √°talak√≠t√°sa t√∂mbb√©
      Object.entries(presetsData).forEach(([key, colorStr]) => {
        const color = parseInt(colorStr.trim(), 16);
        if (!isNaN(color)) {
          presets.push({
            id: key,
            color: color,
            colorString: colorStr.trim()
          });
        }
      });
      
      console.log(`üî• ${presets.length} fa preset bet√∂ltve Firebase-b≈ël`);
      return presets;
    }
    
    console.log('üî• Nincs fa preset Firebase-ben');
    return [];
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Firebase fa preset bet√∂lt√©s hiba:', error);
    return [];
  }
};

/**
 * Firebase - Fa preset t√∂rl√©se
 */
window.deleteWoodPresetFromFirebase = async function(presetId) {
  try {
    if (!window.firebaseDb || !window.firebaseRemove || !window.firebaseRef) {
      console.error('‚ùå Firebase nincs inicializ√°lva');
      return false;
    }
    
    const presetRef = window.firebaseRef(window.firebaseDb, `${FIREBASE_PATHS.WOOD.PRESETS}/${presetId}`);
    await window.firebaseRemove(presetRef);
    
    console.log(`üî• Fa preset t√∂r√∂lve Firebase-b≈ël: ${presetId}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Firebase fa preset t√∂rl√©s hiba:', error);
    return false;
  }
};

/**
 * Fa sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre
 */
window.resetWoodColor = function() {
  console.log('üîÑ Fa sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre');
  return changeWoodColor(DEFAULT_WOOD_COLOR);
};

/**
 * Aktu√°lis fa sz√≠n lek√©r√©se
 */
window.getCurrentWoodColor = function() {
  return MATERIALS.PINE_SOLID.baseColor;
};

// =============================================================================
// M≈∞F≈∞ SZ√çNKEZEL√âS (√öJ FUNKCI√ìK v3.0.0)
// =============================================================================

/**
 * M≈±f≈± sz√≠n megv√°ltoztat√°sa val√≥s id≈ëben (NINCS ment√©s)
 * @param {number} hexColor - Hex sz√≠n (pl. 0x00ff00)
 */
window.changeGrassColor = async function(hexColor) {
  console.log('üå± M≈±f≈± sz√≠n v√°lt√°sa...', '#' + hexColor.toString(16));
  
  try {
    // 1. Konstans m√≥dos√≠t√°sa - m≈±f≈± sz√≠n
    MATERIALS.ARTIFICIAL_GRASS.baseColor = hexColor;
    
    // 2. M≈±f≈± elemek √∫jragener√°l√°sa
    const meshes = sceneManager().getAllMeshes();
    let updatedCount = 0;
    
    for (const [elementId, mesh] of meshes) {
      // M≈±f≈± elemek azonos√≠t√°sa
      if (isGrassElement(elementId)) {
        const element = elementManager().getAllElements().find(e => e.id === elementId);
        
        if (element) {
          const materialDef = MATERIALS[element.materialKey];
          const newMaterial = await textureManager().getMaterialWithShade(materialDef);
          
          // Material csere
          if (mesh.material) {
            mesh.material = newMaterial;
            updatedCount++;
          }
          
          // GROUP mesh-ek kezel√©se (ha vannak)
          if (mesh.children && mesh.children.length > 0) {
            mesh.children.forEach((child) => {
              if (child.material) {
                child.material = newMaterial.clone();
              }
            });
          }
        }
      }
    }
    
    console.log(`‚úÖ ${updatedCount} m≈±f≈± elem friss√≠tve (NINCS ment√©s)`);
    
    // 3. Renderel√©s triggere
    sceneManager().renderer.render(sceneManager().scene, sceneManager().camera);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå M≈±f≈± sz√≠n v√°lt√°si hiba:', error);
    return false;
  }
};

/**
 * Aktu√°lis m≈±f≈± sz√≠n ment√©se Firebase-be
 * @param {number} hexColor - Opcion√°lis hex sz√≠n, ha nincs megadva akkor az aktu√°lisat menti
 */
window.saveGrassColor = async function(hexColor = null) {
  try {
    // Firebase el√©rhet≈ës√©g ellen≈ërz√©se
    if (!window.firebaseDb || !window.firebaseSet || !window.firebaseRef) {
      console.error('‚ùå Firebase nincs inicializ√°lva');
      return false;
    }
    
    // Ha nincs sz√≠n megadva, aktu√°lis sz√≠n haszn√°lata
    const colorToSave = hexColor !== null ? hexColor : getCurrentGrassColor();
    const colorString = `0x${colorToSave.toString(16)}`;
    
    // Firebase ment√©s
    const ref = window.firebaseRef(window.firebaseDb, FIREBASE_PATHS.GRASS.DEFAULT);
    await window.firebaseSet(ref, colorString);
    
    console.log(`üî• M≈±f≈± sz√≠n mentve Firebase-be: ${colorString}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Firebase m≈±f≈± ment√©s hiba:', error);
    return false;
  }
};

/**
 * Mentett m≈±f≈± sz√≠n bet√∂lt√©se Firebase-b≈ël
 */
window.loadSavedGrassColor = async function() {
  try {
    // Firebase el√©rhet≈ës√©g ellen≈ërz√©se
    if (!window.firebaseDb || !window.firebaseGet || !window.firebaseChild || !window.firebaseRef) {
      console.warn('‚ö†Ô∏è Firebase nincs inicializ√°lva, alap√©rtelmezett m≈±f≈± sz√≠n');
      return DEFAULT_GRASS_COLOR;
    }
    
    const dbRef = window.firebaseRef(window.firebaseDb);
    const snapshot = await window.firebaseGet(window.firebaseChild(dbRef, FIREBASE_PATHS.GRASS.DEFAULT));
    
    if (snapshot.exists()) {
      const colorStr = snapshot.val().trim();
      const color = parseInt(colorStr, 16);
      
      if (!isNaN(color)) {
        console.log('üî• Mentett m≈±f≈± sz√≠n bet√∂ltve Firebase-b≈ël:', colorStr);
        
        // Konstans be√°ll√≠t√°sa (renderel√©s n√©lk√ºl)
        MATERIALS.ARTIFICIAL_GRASS.baseColor = color;
        
        console.log(`‚úÖ M≈±f≈± sz√≠n be√°ll√≠tva: ${colorStr}`);
        return color;
      }
    }
    
    console.log('üî• Nincs mentett m≈±f≈± sz√≠n Firebase-ben, alap√©rtelmezett haszn√°lata');
    return DEFAULT_GRASS_COLOR;
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Firebase m≈±f≈± sz√≠n bet√∂lt√©s hiba:', error);
    return DEFAULT_GRASS_COLOR;
  }
};

/**
 * Firebase - M≈±f≈± preset sz√≠n ment√©se
 */
window.saveGrassPresetToFirebase = async function(color) {
  try {
    if (!window.firebaseDb || !window.firebasePush || !window.firebaseRef) {
      console.error('‚ùå Firebase nincs inicializ√°lva');
      return false;
    }
    
    const colorString = `0x${color.toString(16)}`;
    
    // Firebase preset ment√©s (push automatikus ID-t gener√°l)
    const presetsRef = window.firebaseRef(window.firebaseDb, FIREBASE_PATHS.GRASS.PRESETS);
    await window.firebasePush(presetsRef, colorString);
    
    console.log(`üî• M≈±f≈± preset sz√≠n mentve Firebase-be: ${colorString}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Firebase m≈±f≈± preset ment√©s hiba:', error);
    return false;
  }
};

/**
 * Firebase - M≈±f≈± √∂sszes preset bet√∂lt√©se
 */
window.loadGrassPresetsFromFirebase = async function() {
  try {
    if (!window.firebaseDb || !window.firebaseGet || !window.firebaseChild || !window.firebaseRef) {
      console.warn('‚ö†Ô∏è Firebase nincs inicializ√°lva');
      return [];
    }
    
    const dbRef = window.firebaseRef(window.firebaseDb);
    const snapshot = await window.firebaseGet(window.firebaseChild(dbRef, FIREBASE_PATHS.GRASS.PRESETS));
    
    if (snapshot.exists()) {
      const presetsData = snapshot.val();
      const presets = [];
      
      // Firebase objektum √°talak√≠t√°sa t√∂mbb√©
      Object.entries(presetsData).forEach(([key, colorStr]) => {
        const color = parseInt(colorStr.trim(), 16);
        if (!isNaN(color)) {
          presets.push({
            id: key,
            color: color,
            colorString: colorStr.trim()
          });
        }
      });
      
      console.log(`üî• ${presets.length} m≈±f≈± preset bet√∂ltve Firebase-b≈ël`);
      return presets;
    }
    
    console.log('üî• Nincs m≈±f≈± preset Firebase-ben');
    return [];
    
  } catch (error) {
    console.warn('‚ö†Ô∏è Firebase m≈±f≈± preset bet√∂lt√©s hiba:', error);
    return [];
  }
};

/**
 * Firebase - M≈±f≈± preset t√∂rl√©se
 */
window.deleteGrassPresetFromFirebase = async function(presetId) {
  try {
    if (!window.firebaseDb || !window.firebaseRemove || !window.firebaseRef) {
      console.error('‚ùå Firebase nincs inicializ√°lva');
      return false;
    }
    
    const presetRef = window.firebaseRef(window.firebaseDb, `${FIREBASE_PATHS.GRASS.PRESETS}/${presetId}`);
    await window.firebaseRemove(presetRef);
    
    console.log(`üî• M≈±f≈± preset t√∂r√∂lve Firebase-b≈ël: ${presetId}`);
    return true;
    
  } catch (error) {
    console.error('‚ùå Firebase m≈±f≈± preset t√∂rl√©s hiba:', error);
    return false;
  }
};

/**
 * M≈±f≈± sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre
 */
window.resetGrassColor = function() {
  console.log('üîÑ M≈±f≈± sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre');
  return changeGrassColor(DEFAULT_GRASS_COLOR);
};

/**
 * Aktu√°lis m≈±f≈± sz√≠n lek√©r√©se
 */
window.getCurrentGrassColor = function() {
  return MATERIALS.ARTIFICIAL_GRASS.baseColor;
};

// =============================================================================
// SEG√âDFUNKCI√ìK √âS ELEM AZONOS√çT√ÅS
// =============================================================================

/**
 * Hex sz√≠n konvert√°l√°sa sz√≠nes stringg√© (debug)
 */
window.hexToColorString = function(hexColor) {
  return '#' + hexColor.toString(16).padStart(6, '0');
};

/**
 * Fa elem azonos√≠t√°sa elementId alapj√°n
 * @param {string} elementId - Elem azonos√≠t√≥
 * @returns {boolean} - Fa elem-e
 */
function isWoodElement(elementId) {
  const woodKeywords = [
    'frame', 'leg', 'wall', 'cross', 'beam', 
    'plate', 'dowel', 'tessauer', 'countersunk', 'fastener'
  ];
  
  return woodKeywords.some(keyword => elementId.includes(keyword));
}

/**
 * M≈±f≈± elem azonos√≠t√°sa elementId alapj√°n
 * @param {string} elementId - Elem azonos√≠t√≥
 * @returns {boolean} - M≈±f≈± elem-e
 */
function isGrassElement(elementId) {
  const grassKeywords = [
    'turf', 'covering', 'grass', 'artificial'
  ];
  
  return grassKeywords.some(keyword => elementId.includes(keyword));
}

/**
 * Fa elemek sz√°m√°nak lek√©r√©se (debug)
 */
window.getWoodElementCount = function() {
  const meshes = sceneManager().getAllMeshes();
  let woodCount = 0;
  
  for (const [elementId] of meshes) {
    if (isWoodElement(elementId)) {
      woodCount++;
    }
  }
  
  return woodCount;
};

/**
 * M≈±f≈± elemek sz√°m√°nak lek√©r√©se (debug)
 */
window.getGrassElementCount = function() {
  const meshes = sceneManager().getAllMeshes();
  let grassCount = 0;
  
  for (const [elementId] of meshes) {
    if (isGrassElement(elementId)) {
      grassCount++;
    }
  }
  
  return grassCount;
};

/**
 * Fa elemek list√°z√°sa (debug)
 */
window.listWoodElements = function() {
  const meshes = sceneManager().getAllMeshes();
  const woodElements = [];
  
  for (const [elementId] of meshes) {
    if (isWoodElement(elementId)) {
      const element = elementManager().getAllElements().find(e => e.id === elementId);
      woodElements.push({
        id: elementId,
        materialKey: element?.materialKey || 'UNKNOWN'
      });
    }
  }
  
  console.log(`=== FA ELEMEK (${woodElements.length}) ===`);
  woodElements.forEach(item => {
    console.log(`${item.id} - ${item.materialKey}`);
  });
  console.log('================================');
  
  return woodElements;
};

/**
 * M≈±f≈± elemek list√°z√°sa (debug)
 */
window.listGrassElements = function() {
  const meshes = sceneManager().getAllMeshes();
  const grassElements = [];
  
  for (const [elementId] of meshes) {
    if (isGrassElement(elementId)) {
      const element = elementManager().getAllElements().find(e => e.id === elementId);
      grassElements.push({
        id: elementId,
        materialKey: element?.materialKey || 'UNKNOWN'
      });
    }
  }
  
  console.log(`=== M≈∞F≈∞ ELEMEK (${grassElements.length}) ===`);
  grassElements.forEach(item => {
    console.log(`${item.id} - ${item.materialKey}`);
  });
  console.log('====================================');
  
  return grassElements;
};

/**
 * Sz√≠nek debug inform√°ci√≥k
 */
window.colorDebug = function() {
  console.log('=== SZ√çN DEBUG v3.0.0 ===');
  console.log('FA SZ√çNEK:');
  console.log('  Aktu√°lis fa sz√≠n:', hexToColorString(getCurrentWoodColor()));
  console.log('  PINE_SOLID.baseColor:', hexToColorString(MATERIALS.PINE_SOLID.baseColor));
  console.log('  PINE_PLYWOOD.baseColor:', hexToColorString(MATERIALS.PINE_PLYWOOD.baseColor));
  console.log('  Fa elemek sz√°ma:', getWoodElementCount());
  console.log('');
  console.log('M≈∞F≈∞ SZ√çNEK:');
  console.log('  Aktu√°lis m≈±f≈± sz√≠n:', hexToColorString(getCurrentGrassColor()));
  console.log('  ARTIFICIAL_GRASS.baseColor:', hexToColorString(MATERIALS.ARTIFICIAL_GRASS.baseColor));
  console.log('  M≈±f≈± elemek sz√°ma:', getGrassElementCount());
  console.log('========================');
};

// =============================================================================
// INICIALIZ√ÅL√ÅS √âS BET√ñLT√âS
// =============================================================================

// Automatikus bet√∂lt√©s inicializ√°l√°skor - FA √âS M≈∞F≈∞ sz√≠nek
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    // K√©sleltetett bet√∂lt√©s - v√°rjuk meg hogy minden manager √©s Firebase k√©sz legyen
    setTimeout(async () => {
      if (typeof sceneManager === 'function' && sceneManager()) {
        // Fa sz√≠n bet√∂lt√©se
        const woodColor = await loadSavedWoodColor();
        if (woodColor !== DEFAULT_WOOD_COLOR) {
          await changeWoodColor(woodColor);
        }
        
        // M≈±f≈± sz√≠n bet√∂lt√©se
        const grassColor = await loadSavedGrassColor();
        if (grassColor !== DEFAULT_GRASS_COLOR) {
          await changeGrassColor(grassColor);
        }
      }
    }, 3000); // 3 m√°sodperc k√©sleltet√©s Firebase sz√°m√°ra
  });
} else {
  // DOM m√°r k√©sz
  setTimeout(async () => {
    if (typeof sceneManager === 'function' && sceneManager()) {
      // Fa sz√≠n bet√∂lt√©se
      const woodColor = await loadSavedWoodColor();
      if (woodColor !== DEFAULT_WOOD_COLOR) {
        await changeWoodColor(woodColor);
      }
      
      // M≈±f≈± sz√≠n bet√∂lt√©se
      const grassColor = await loadSavedGrassColor();
      if (grassColor !== DEFAULT_GRASS_COLOR) {
        await changeGrassColor(grassColor);
      }
    }
  }, 2000); // 2 m√°sodperc k√©sleltet√©s Firebase sz√°m√°ra
}

console.log('‚úÖ Color Manager v3.0.0 - Dual Color System (Fa + M≈±f≈±) bet√∂ltve');

// =============================================================================
// GLOB√ÅLIS HOZZ√ÅF√âRHET≈êS√âG
// =============================================================================

window.ColorManager = {
  // FA FUNKCI√ìK
  changeWoodColor,
  saveWoodColor,
  loadSavedWoodColor,
  saveWoodPresetToFirebase,
  loadWoodPresetsFromFirebase,
  deleteWoodPresetFromFirebase,
  resetWoodColor,
  getCurrentWoodColor,
  getWoodElementCount,
  listWoodElements,
  
  // M≈∞F≈∞ FUNKCI√ìK (v3.0.0)
  changeGrassColor,
  saveGrassColor,
  loadSavedGrassColor,
  saveGrassPresetToFirebase,
  loadGrassPresetsFromFirebase,
  deleteGrassPresetFromFirebase,
  resetGrassColor,
  getCurrentGrassColor,
  getGrassElementCount,
  listGrassElements,
  
  // SEG√âDFUNKCI√ìK
  hexToColorString,
  colorDebug,
  
  // KONSTANSOK
  DEFAULT_WOOD_COLOR,
  DEFAULT_GRASS_COLOR,
  
  version: '3.0.0'
};

// Backward compatibility - r√©gi f√ºggv√©nyek tov√°bbra is el√©rhet≈ëek
window.savePresetToFirebase = saveWoodPresetToFirebase; // r√©gi n√©v
window.loadPresetsFromFirebase = loadWoodPresetsFromFirebase; // r√©gi n√©v
window.deletePresetFromFirebase = deleteWoodPresetFromFirebase; // r√©gi n√©v
window.woodColorDebug = colorDebug; // r√©gi n√©v