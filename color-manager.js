/**
 * Color Manager
 * Fa elemek sz√≠nkezel√©se - egys√©ges sz√≠n √©s colorTintStrength
 * v1.0.0 - Alapvet≈ë sz√≠nv√°ltoztat√°s √©s localStorage t√°mogat√°s
 */

class ColorManager {
  constructor(textureManager, sceneManager) {
    this.textureManager = textureManager;
    this.sceneManager = sceneManager;
    
    // Alap√©rtelmezett √©rt√©kek (PINE_SOLID-b√≥l)
    this.defaultWoodColor = 0xb6c4de;
    this.defaultColorTintStrength = 1.2;
    
    // localStorage kulcsok
    this.WOOD_COLOR_KEY = 'minigolf_wood_color';
    this.TINT_STRENGTH_KEY = 'minigolf_wood_tint_strength';
    
    // Aktu√°lis √©rt√©kek
    this.currentWoodColor = this.defaultWoodColor;
    this.currentTintStrength = this.defaultColorTintStrength;
    
    this.initialized = false;
    
    console.log("ColorManager v1.0.0 - Egys√©ges fa sz√≠nkezel√©s");
  }

  // Inicializ√°l√°s - localStorage √©rt√©kek bet√∂lt√©se √©s alkalmaz√°sa
  initialize() {
    if (this.initialized) {
      console.log("ColorManager m√°r inicializ√°lva");
      return;
    }

    console.log("üé® ColorManager inicializ√°l√°s...");
    
    // localStorage √©rt√©kek bet√∂lt√©se
    const savedColor = this.loadWoodColor();
    const savedTintStrength = this.loadTintStrength();
    
    console.log(`üìÇ Bet√∂lt√∂tt √©rt√©kek - sz√≠n: #${savedColor.toString(16)}, tint: ${savedTintStrength}`);
    
    // √ârt√©kek alkalmaz√°sa
    this.setWoodColor(savedColor, false); // false = ne mentse localStorage-ba √∫jra
    this.setTintStrength(savedTintStrength, false);
    
    this.initialized = true;
    console.log("‚úÖ ColorManager inicializ√°lva");
  }

  // === FA SZ√çN KEZEL√âSE ===
  
  // Fa sz√≠n be√°ll√≠t√°sa mindk√©t anyagra
  setWoodColor(hexColor, saveToStorage = true) {
    try {
      // Hex sz√≠n valid√°l√°sa
      const validatedColor = this.validateHexColor(hexColor);
      
      // MATERIALS objektum friss√≠t√©se - mindk√©t fa anyag
      MATERIALS.PINE_SOLID.baseColor = validatedColor;
      MATERIALS.PINE_PLYWOOD.baseColor = validatedColor;
      
      this.currentWoodColor = validatedColor;
      
      console.log(`üé® Fa sz√≠n be√°ll√≠tva: #${validatedColor.toString(16)}`);
      
      // localStorage ment√©s
      if (saveToStorage) {
        this.saveWoodColor(validatedColor);
      }
      
      // Mesh-ek friss√≠t√©se
      this.updateAllWoodMeshes();
      
      return true;
    } catch (error) {
      console.error("‚ùå Fa sz√≠n be√°ll√≠t√°si hiba:", error);
      return false;
    }
  }
  
  // Aktu√°lis fa sz√≠n lek√©r√©se
  getCurrentWoodColor() {
    return this.currentWoodColor;
  }
  
  // Fa sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre
  resetWoodColor() {
    console.log("üîÑ Fa sz√≠n vissza√°ll√≠t√°sa alap√©rtelmezettre");
    return this.setWoodColor(this.defaultWoodColor);
  }

  // === COLOR TINT STRENGTH KEZEL√âSE ===
  
  // ColorTintStrength be√°ll√≠t√°sa mindk√©t anyagra
  setTintStrength(strength, saveToStorage = true) {
    try {
      // √ârt√©k valid√°l√°sa (0.1 - 3.0 k√∂z√∂tti tartom√°ny)
      const validatedStrength = Math.max(0.1, Math.min(3.0, parseFloat(strength) || this.defaultColorTintStrength));
      
      // MATERIALS objektum friss√≠t√©se - mindk√©t fa anyag
      MATERIALS.PINE_SOLID.colorTintStrength = validatedStrength;
      MATERIALS.PINE_PLYWOOD.colorTintStrength = validatedStrength;
      
      this.currentTintStrength = validatedStrength;
      
      console.log(`üéõÔ∏è ColorTintStrength be√°ll√≠tva: ${validatedStrength}`);
      
      // localStorage ment√©s
      if (saveToStorage) {
        this.saveTintStrength(validatedStrength);
      }
      
      // Mesh-ek friss√≠t√©se
      this.updateAllWoodMeshes();
      
      return true;
    } catch (error) {
      console.error("‚ùå ColorTintStrength be√°ll√≠t√°si hiba:", error);
      return false;
    }
  }
  
  // Aktu√°lis tint strength lek√©r√©se
  getCurrentTintStrength() {
    return this.currentTintStrength;
  }
  
  // Tint strength vissza√°ll√≠t√°sa alap√©rtelmezettre
  resetTintStrength() {
    console.log("üîÑ ColorTintStrength vissza√°ll√≠t√°sa alap√©rtelmezettre");
    return this.setTintStrength(this.defaultColorTintStrength);
  }

  // === LOCALSTORAGE KEZEL√âSE ===
  
  // Fa sz√≠n bet√∂lt√©se localStorage-b√≥l
  loadWoodColor() {
    try {
      const saved = localStorage.getItem(this.WOOD_COLOR_KEY);
      if (saved) {
        const parsedColor = parseInt(saved, 16);
        if (!isNaN(parsedColor)) {
          console.log(`üìÇ Fa sz√≠n bet√∂ltve localStorage-b√≥l: #${parsedColor.toString(16)}`);
          return parsedColor;
        }
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è Fa sz√≠n localStorage bet√∂lt√©si hiba:", error);
    }
    
    console.log(`üìÇ Alap√©rtelmezett fa sz√≠n haszn√°lata: #${this.defaultWoodColor.toString(16)}`);
    return this.defaultWoodColor;
  }
  
  // Fa sz√≠n ment√©se localStorage-ba
  saveWoodColor(hexColor) {
    try {
      localStorage.setItem(this.WOOD_COLOR_KEY, hexColor.toString(16));
      console.log(`üíæ Fa sz√≠n mentve localStorage-ba: #${hexColor.toString(16)}`);
    } catch (error) {
      console.warn("‚ö†Ô∏è Fa sz√≠n localStorage ment√©si hiba:", error);
    }
  }
  
  // ColorTintStrength bet√∂lt√©se localStorage-b√≥l
  loadTintStrength() {
    try {
      const saved = localStorage.getItem(this.TINT_STRENGTH_KEY);
      if (saved) {
        const parsedStrength = parseFloat(saved);
        if (!isNaN(parsedStrength) && parsedStrength >= 0.1 && parsedStrength <= 3.0) {
          console.log(`üìÇ ColorTintStrength bet√∂ltve localStorage-b√≥l: ${parsedStrength}`);
          return parsedStrength;
        }
      }
    } catch (error) {
      console.warn("‚ö†Ô∏è ColorTintStrength localStorage bet√∂lt√©si hiba:", error);
    }
    
    console.log(`üìÇ Alap√©rtelmezett ColorTintStrength haszn√°lata: ${this.defaultColorTintStrength}`);
    return this.defaultColorTintStrength;
  }
  
  // ColorTintStrength ment√©se localStorage-ba
  saveTintStrength(strength) {
    try {
      localStorage.setItem(this.TINT_STRENGTH_KEY, strength.toString());
      console.log(`üíæ ColorTintStrength mentve localStorage-ba: ${strength}`);
    } catch (error) {
      console.warn("‚ö†Ô∏è ColorTintStrength localStorage ment√©si hiba:", error);
    }
  }

  // === MESH FRISS√çT√âSE ===
  
  // √ñsszes fa mesh √∫jragener√°l√°sa
  async updateAllWoodMeshes() {
    if (!this.sceneManager || !this.textureManager) {
      console.warn("‚ö†Ô∏è SceneManager vagy TextureManager nem el√©rhet≈ë");
      return;
    }

    console.log("üîÑ Fa mesh-ek friss√≠t√©se...");
    
    try {
      const meshes = this.sceneManager.getAllMeshes();
      let updatedCount = 0;
      
      for (const [elementId, mesh] of meshes) {
        // ElementManager helyett k√∂zvetlen√ºl a mesh userData-b√≥l szerezz√ºk az inform√°ci√≥t
        const element = mesh.userData?.element;
        
        if (element && this.isWoodMaterial(element.materialKey)) {
          const success = await this.updateSingleWoodMesh(mesh, element);
          if (success) {
            updatedCount++;
          }
        }
      }
      
      console.log(`‚úÖ ${updatedCount} fa mesh friss√≠tve`);
      
      // Renderel√©s triggere
      if (this.sceneManager.renderer && this.sceneManager.camera) {
        this.sceneManager.renderer.render(this.sceneManager.scene, this.sceneManager.camera);
      }
      
    } catch (error) {
      console.error("‚ùå Fa mesh-ek friss√≠t√©si hiba:", error);
    }
  }
  
  // Egyetlen fa mesh √∫jragener√°l√°sa
  async updateSingleWoodMesh(mesh, element) {
    try {
      // √öj material gener√°l√°sa friss√≠tett param√©terekkel
      const materialDef = MATERIALS[element.materialKey];
      const newMaterial = await this.textureManager.getMaterialWithShade(materialDef, element.shade);
      
      if (!newMaterial) {
        console.warn(`‚ö†Ô∏è Material gener√°l√°s sikertelen: ${element.id}`);
        return false;
      }
      
      // GROUP elemek kezel√©se
      if (mesh.userData && mesh.userData.isGroup) {
        mesh.children.forEach((childMesh) => {
          if (childMesh.material) {
            // R√©gi material dispose
            if (childMesh.material.dispose) {
              childMesh.material.dispose();
            }
            childMesh.material = newMaterial.clone();
          }
        });
      } else {
        // Hagyom√°nyos mesh
        if (mesh.material) {
          // R√©gi material dispose
          if (mesh.material.dispose) {
            mesh.material.dispose();
          }
          mesh.material = newMaterial;
        }
      }
      
      return true;
    } catch (error) {
      console.error(`‚ùå Mesh friss√≠t√©si hiba (${element.id}):`, error);
      return false;
    }
  }

  // === SEG√âDF√úGGV√âNYEK ===
  
  // Fa anyag ellen≈ërz√©se
  isWoodMaterial(materialKey) {
    return materialKey === 'PINE_SOLID' || materialKey === 'PINE_PLYWOOD';
  }
  
  // Hex sz√≠n valid√°l√°sa
  validateHexColor(hexColor) {
    // Ha m√°r sz√°m, visszaad√°s
    if (typeof hexColor === 'number') {
      return Math.max(0, Math.min(0xFFFFFF, hexColor));
    }
    
    // String eset√©n konverzi√≥
    if (typeof hexColor === 'string') {
      // # elt√°vol√≠t√°sa ha van
      const cleanHex = hexColor.replace('#', '');
      const parsed = parseInt(cleanHex, 16);
      
      if (!isNaN(parsed) && cleanHex.length === 6) {
        return parsed;
      }
    }
    
    // Hib√°s √©rt√©k eset√©n alap√©rtelmezett
    console.warn(`‚ö†Ô∏è Hib√°s hex sz√≠n: ${hexColor}, alap√©rtelmezett haszn√°lata`);
    return this.defaultWoodColor;
  }
  
  // Hex sz√≠n THREE.Color-r√° konvert√°l√°sa
  hexToThreeColor(hexColor) {
    return new THREE.Color(hexColor);
  }
  
  // THREE.Color hex string-g√© konvert√°l√°sa
  threeColorToHex(threeColor) {
    return parseInt(threeColor.getHexString(), 16);
  }

  // === KOMBIN√ÅLT M≈∞VELETEK ===
  
  // Mindk√©t √©rt√©k egyszerre be√°ll√≠t√°sa
  setWoodProperties(hexColor, tintStrength) {
    console.log(`üé® Fa tulajdons√°gok be√°ll√≠t√°sa - sz√≠n: #${hexColor.toString(16)}, tint: ${tintStrength}`);
    
    const colorSuccess = this.setWoodColor(hexColor);
    const tintSuccess = this.setTintStrength(tintStrength);
    
    return colorSuccess && tintSuccess;
  }
  
  // Minden be√°ll√≠t√°s vissza√°ll√≠t√°sa alap√©rtelmezettre
  resetAllWoodProperties() {
    console.log("üîÑ √ñsszes fa tulajdons√°g vissza√°ll√≠t√°sa");
    
    const colorSuccess = this.resetWoodColor();
    const tintSuccess = this.resetTintStrength();
    
    return colorSuccess && tintSuccess;
  }

  // === STATUS √âS DEBUG ===
  
  // Aktu√°lis √°llapot lek√©r√©se
  getStatus() {
    return {
      initialized: this.initialized,
      currentWoodColor: `#${this.currentWoodColor.toString(16)}`,
      currentTintStrength: this.currentTintStrength,
      defaultWoodColor: `#${this.defaultWoodColor.toString(16)}`,
      defaultTintStrength: this.defaultColorTintStrength,
      hasTextureManager: !!this.textureManager,
      hasSceneManager: !!this.sceneManager,
      version: '1.0.0'
    };
  }
  
  // Debug inform√°ci√≥ ki√≠r√°sa
  logStatus() {
    console.log("=== COLOR MANAGER STATUS ===");
    const status = this.getStatus();
    Object.entries(status).forEach(([key, value]) => {
      console.log(`${key}: ${value}`);
    });
    console.log("===========================");
  }
  
  // localStorage tartalom ki√≠r√°sa
  logStorageContents() {
    console.log("=== COLOR MANAGER LOCALSTORAGE ===");
    console.log(`${this.WOOD_COLOR_KEY}: ${localStorage.getItem(this.WOOD_COLOR_KEY)}`);
    console.log(`${this.TINT_STRENGTH_KEY}: ${localStorage.getItem(this.TINT_STRENGTH_KEY)}`);
    console.log("=================================");
  }

  // === CLEANUP ===
  
  // Cleanup √©s er≈ëforr√°sok felszabad√≠t√°sa
  destroy() {
    console.log("üßπ ColorManager cleanup...");
    
    this.textureManager = null;
    this.sceneManager = null;
    this.initialized = false;
    
    console.log("ColorManager v1.0.0 cleanup k√©sz");
  }
}

// Glob√°lis hozz√°f√©rhet≈ës√©g
window.ColorManager = ColorManager;