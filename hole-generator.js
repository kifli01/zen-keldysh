/**
 * Ter√ºlet defin√≠ci√≥ helper - V√ÅLTOZATLAN
 */
function defineArea(xStart, xEnd, zStart, zEnd) {
  return { xStart, xEnd, zStart, zEnd };
}

/**
 * Lyukak sz≈±r√©se t√°vols√°g alapj√°n - V√ÅLTOZATLAN
 */
function filterHolesByDistance(operations, centerPosition, minDistance = 8) {
  return operations.filter((operation) => {
    const distance = Math.sqrt(
      Math.pow(operation.position.x - centerPosition.x, 2) +
        Math.pow(operation.position.z - centerPosition.z, 2)
    );
    return distance >= minDistance;
  });
}
/**
 * Hole Generator
 * Lyuk gener√°l√≥ tengely √©s ir√°ny t√°mogat√°ssal
 * v3.0.0 - Direction param√©ter hozz√°adva minden tengelyhez
 */

const holeExtension = 0.05;

// √öJ: Direction-rot√°ci√≥ mapping
const DIRECTION_ROTATIONS = {
  y: {
    down: { x: 0, y: 0, z: 0 }, // Fel√ºlr≈ël lefel√© (alap√©rtelmezett)
    up: { x: Math.PI, y: 0, z: 0 }, // Alulr√≥l felfel√© (180¬∞ flip)
  },
  x: {
    right: { x: 0, y: 0, z: Math.PI / 2 }, // Balr√≥l jobbra (alap√©rtelmezett)
    left: { x: 0, y: 0, z: -Math.PI / 2 }, // Jobbr√≥l balra
  },
  z: {
    forward: { x: Math.PI / 2, y: 0, z: 0 }, // H√°tulr√≥l el≈ëre (alap√©rtelmezett)
    backward: { x: -Math.PI / 2, y: 0, z: 0 }, // El√∂lr≈ël h√°tra
  },
};

// ELT√ÅVOL√çTVA: Direction-poz√≠ci√≥ offset mapping (m√°r nem kell)
// A direction csak rot√°ci√≥t befoly√°sol, poz√≠ci√≥t nem!

// √öJ: √ârv√©nyes direction √©rt√©kek valid√°l√°sa
const VALID_DIRECTIONS = {
  y: ["down", "up"],
  x: ["right", "left"],
  z: ["forward", "backward"],
};

/**
 * K√∂rlyuk CSG m≈±velet l√©trehoz√°sa tetsz≈ëleges tengely √©s ir√°ny szerint
 * @param {Object} params - Lyuk param√©terek
 * @param {number} params.radius - Sug√°r (cm)
 * @param {Object} params.position - Poz√≠ci√≥ {x, y, z}
 * @param {string} params.axis - Lyuk tengelye: 'x', 'y', 'z' (alap√©rtelmezett: 'y')
 * @param {string} params.direction - Lyuk ir√°nya tengely szerint (√öJ param√©ter)
 *   - Y tengely: 'down' (fel√ºlr≈ël), 'up' (alulr√≥l)
 *   - X tengely: 'right' (balr√≥l), 'left' (jobbr√≥l)
 *   - Z tengely: 'forward' (h√°tulr√≥l), 'backward' (el√∂lr≈ël)
 * @param {number} params.depth - M√©lys√©g (opcion√°lis, auto-sz√°m√≠t√°s parent alapj√°n)
 * @param {number} params.parentThickness - Parent elem vastags√°ga auto-m√©lys√©ghez
 * @returns {Object} CSG m≈±velet objektum
 */
function createCircleHole(params) {
  const {
    radius = 1,
    position = { x: 0, y: 0, z: 0 },
    axis = "y",
    direction, // √öJ param√©ter
    depth,
    parentThickness = 10,
  } = params;

  // Axis normaliz√°l√°s
  const normalizedAxis = axis.toLowerCase();

  // Direction alap√©rtelmezett √©rt√©kek
  const defaultDirection = getDefaultDirection(normalizedAxis);
  const finalDirection = direction ? direction.toLowerCase() : defaultDirection;

  // Direction valid√°l√°s
  if (!validateDirection(normalizedAxis, finalDirection)) {
    console.warn(
      `√ârv√©nytelen direction '${finalDirection}' a '${normalizedAxis}' tengelyhez. Alap√©rtelmezett haszn√°lata: '${defaultDirection}'`
    );
    finalDirection = defaultDirection;
  }

  // Automatikus m√©lys√©g sz√°m√≠t√°s ha nincs megadva
  const finalDepth =
    depth !== undefined ? depth : parentThickness + holeExtension;

  // √öJ: Rot√°ci√≥ sz√°m√≠t√°sa axis + direction alapj√°n
  const rotation = getDirectionRotation(normalizedAxis, finalDirection);

  // JAV√çT√ÅS: Poz√≠ci√≥ v√°ltozatlan marad - direction csak rot√°ci√≥t befoly√°sol
  const finalPosition = position; // Nincs poz√≠ci√≥ offset!

  console.log(
    `üîß Lyuk l√©trehoz√°s: ${normalizedAxis} tengely, ${finalDirection} ir√°ny, poz√≠ci√≥ v√°ltozatlan:`,
    finalPosition
  );

  return {
    type: CSG_OPERATIONS.SUBTRACT,
    geometry: "cylinder",
    params: {
      radius: radius,
      height: finalDepth,
      segments: 64,
    },
    position: finalPosition,
    rotation: rotation,
    // √öJ: Metadata a debugging-hez (poz√≠ci√≥ offset elt√°vol√≠tva)
    metadata: {
      axis: normalizedAxis,
      direction: finalDirection,
      originalPosition: position,
    },
  };
}

/**
 * √öJ: Alap√©rtelmezett ir√°ny lek√©r√©se tengelyhez
 */
function getDefaultDirection(axis) {
  const defaults = {
    y: "down", // Fel√ºlr≈ël lefel√©
    x: "right", // Balr√≥l jobbra
    z: "forward", // H√°tulr√≥l el≈ëre
  };
  return defaults[axis] || "down";
}

/**
 * √öJ: Direction valid√°l√°s
 */
function validateDirection(axis, direction) {
  const validDirections = VALID_DIRECTIONS[axis];
  return validDirections && validDirections.includes(direction);
}

/**
 * √öJ: Rot√°ci√≥ lek√©r√©se axis + direction alapj√°n
 */
function getDirectionRotation(axis, direction) {
  const axisRotations = DIRECTION_ROTATIONS[axis];
  if (!axisRotations) {
    console.warn(`Ismeretlen axis: ${axis}`);
    return { x: 0, y: 0, z: 0 };
  }

  const rotation = axisRotations[direction];
  if (!rotation) {
    console.warn(`Ismeretlen direction '${direction}' a '${axis}' tengelyhez`);
    return axisRotations[getDefaultDirection(axis)];
  }

  return rotation;
}

/**
 * K√∂rlyukak r√°cs elrendez√©se - FRISS√çTETT direction t√°mogat√°ssal
 * @param {Object} params - R√°cs param√©terek
 * @param {Object} params.area - Ter√ºlet {xStart, xEnd, zStart, zEnd}
 * @param {Object} params.grid - R√°cs {x, z} - lyukak sz√°ma ir√°nyonk√©nt
 * @param {number} params.radius - Lyuk sug√°r (cm)
 * @param {string} params.axis - Lyuk ir√°nya: 'x', 'y', 'z' (alap√©rtelmezett: 'y')
 * @param {string} params.direction - Lyuk direction (√öJ param√©ter)
 * @param {number} params.margin - Bels≈ë marg√≥ (cm)
 * @param {number} params.parentThickness - Parent elem vastags√°ga
 * @param {Array} params.skip - Kihagyand√≥ poz√≠ci√≥k [{x, z}, ...]
 * @returns {Array} CSG m≈±veletek t√∂mbje
 */
function createCircleHoleGrid(params) {
  const {
    area,
    grid,
    radius = 0.8,
    axis = "y",
    direction, // √öJ param√©ter
    margin = 10,
    parentThickness = 10,
    skip,
  } = params;

  if (!area || !grid) {
    console.error("Area √©s grid param√©terek k√∂telez≈ëek");
    return [];
  }

  const operations = [];

  // Munkater√ºlet sz√°m√≠t√°sa
  const workWidth = area.xEnd - area.xStart - 2 * margin;
  const workDepth = area.zEnd - area.zStart - 2 * margin;

  // T√°vols√°gok sz√°m√≠t√°sa
  const xSpacing = grid.x > 1 ? workWidth / (grid.x - 1) : 0;
  const zSpacing = grid.z > 1 ? workDepth / (grid.z - 1) : 0;

  for (let i = 0; i < grid.x; i++) {
    for (let j = 0; j < grid.z; j++) {
      const x = area.xStart + margin + i * xSpacing;
      const z = area.zStart + margin + j * zSpacing;

      const isSkipped =
        skip && skip.findIndex((e) => e.x === i && e.z === j) > -1;

      if (!isSkipped) {
        operations.push(
          createCircleHole({
            radius: radius,
            position: { x, y: 0, z },
            axis: axis,
            direction: direction, // √öJ: direction tov√°bb√≠t√°sa
            parentThickness: parentThickness,
          })
        );
      }
    }
  }

  console.log(
    `üéØ R√°cs lyukak: ${operations.length} db (${axis} tengely, ${
      direction || "alap√©rtelmezett"
    } ir√°ny)`
  );

  return operations;
}

/**
 * K√©tl√©pcs≈ës lyuk l√©trehoz√°sa - FRISS√çTETT direction t√°mogat√°ssal
 * @param {Object} params - Lyuk param√©terek
 * @param {Object} params.position - Lyuk poz√≠ci√≥ja
 * @param {number} params.parentThickness - Parent elem vastags√°ga
 * @param {Object} params.firstHole - Els≈ë lyuk {radius, depth}
 * @param {Object} params.secondHole - M√°sodik lyuk {radius, depth}
 * @param {string} params.axis - Lyuk ir√°nya: 'x', 'y', 'z' (K√ñTELEZ≈ê)
 * @param {string} params.direction - Lyuk direction (√öJ param√©ter)
 * @returns {Array} CSG m≈±veletek t√∂mbje
 */
function twoStepHole(params) {
  const { position, parentThickness, firstHole, secondHole, axis, direction } =
    params;

  if (!axis) {
    console.error("twoStepHole: axis param√©ter k√∂telez≈ë!");
    return [];
  }

  const normalizedAxis = axis.toLowerCase();
  const finalDirection = direction
    ? direction.toLowerCase()
    : getDefaultDirection(normalizedAxis);

  // Direction valid√°l√°s
  if (!validateDirection(normalizedAxis, finalDirection)) {
    console.warn(
      `twoStepHole: √ârv√©nytelen direction '${finalDirection}' a '${normalizedAxis}' tengelyhez`
    );
    return [];
  }

  console.log(
    `üîß K√©tl√©pcs≈ës lyuk: ${normalizedAxis} tengely, ${finalDirection} ir√°ny`
  );

  // JAV√çT√ÅS: Direction NEM befoly√°solja a poz√≠ci√≥t, csak a rot√°ci√≥t
  // Mindk√©t lyuk ugyanazon poz√≠ci√≥n√°l van, csak k√ºl√∂nb√∂z≈ë m√©lys√©gben

  const firstHoleParams = {
    radius: firstHole.radius,
    position: position, // Eredeti poz√≠ci√≥
    axis: normalizedAxis,
    direction: finalDirection,
    depth: firstHole.depth + holeExtension,
  };

  // A m√°sodik lyuk ugyanazon poz√≠ci√≥n, csak m√°s m√©lys√©g≈±
  const secondHoleParams = {
    radius: secondHole.radius,
    position: position, // Ugyanaz a poz√≠ci√≥!
    axis: normalizedAxis,
    direction: finalDirection,
    depth: secondHole.depth + holeExtension,
  };

  return [
    createCircleHole(firstHoleParams),
    createCircleHole(secondHoleParams),
  ];
}

/**
 * Ter√ºlet defin√≠ci√≥ helper - V√ÅLTOZATLAN
 */
function defineArea(xStart, xEnd, zStart, zEnd) {
  return { xStart, xEnd, zStart, zEnd };
}

/**
 * Lyukak sz≈±r√©se t√°vols√°g alapj√°n - V√ÅLTOZATLAN
 */
function filterHolesByDistance(operations, centerPosition, minDistance = 8) {
  return operations.filter((operation) => {
    const distance = Math.sqrt(
      Math.pow(operation.position.x - centerPosition.x, 2) +
        Math.pow(operation.position.z - centerPosition.z, 2)
    );
    return distance >= minDistance;
  });
}

/**
 * √öJ: Debug inform√°ci√≥ lyukakr√≥l
 */
function debugHoleConfiguration(hole) {
  console.log("üîç Lyuk konfigur√°ci√≥:", {
    axis: hole.metadata?.axis,
    direction: hole.metadata?.direction,
    position: hole.position,
    rotation: hole.rotation,
  });
}

// P√©lda haszn√°lat:
//
// // Alap√©rtelmezett Y tengely, fel√ºlr≈ël lefel√©:
// createCircleHole({
//   radius: 5.4,
//   position: { x: 0, y: 0, z: 0 },  // Lyuk k√∂z√©ppontja
//   axis: 'y'  // direction: 'down' alap√©rtelmezett
// });
//
// // Y tengely, alulr√≥l felfel√©:
// createCircleHole({
//   radius: 5.4,
//   position: { x: 0, y: 0, z: 0 },  // Lyuk k√∂z√©ppontja (ugyanott)
//   axis: 'y',
//   direction: 'up'  // Csak rot√°ci√≥ v√°ltozik!
// });
//
// // X tengely, jobbr√≥l balra:
// createCircleHole({
//   radius: 2.5,
//   position: { x: 0, y: 0, z: 0 },  // Lyuk k√∂z√©ppontja
//   axis: 'x',
//   direction: 'left'  // Csak rot√°ci√≥
// });
//
// // K√©tl√©pcs≈ës lyuk - mindk√©t lyuk ugyanazon poz√≠ci√≥n:
// twoStepHole({
//   position: { x: 0, y: 0, z: 0 },  // Lyuk k√∂z√©ppontja
//   parentThickness: 12,
//   firstHole: { radius: 8, depth: 3 },
//   secondHole: { radius: 4, depth: 9 },
//   axis: 'y',
//   direction: 'down'  // Csak orient√°ci√≥
// });
